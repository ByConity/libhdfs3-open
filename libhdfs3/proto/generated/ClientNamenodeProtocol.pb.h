// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientNamenodeProtocol.proto

#ifndef PROTOBUF_ClientNamenodeProtocol_2eproto__INCLUDED
#define PROTOBUF_ClientNamenodeProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "hdfs.pb.h"
#include "Security.pb.h"
#include "encryption.pb.h"
// @@protoc_insertion_point(includes)

namespace Hdfs {
namespace Internal {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

class GetBlockLocationsRequestProto;
class GetBlockLocationsResponseProto;
class GetServerDefaultsRequestProto;
class GetServerDefaultsResponseProto;
class CreateRequestProto;
class CreateResponseProto;
class AppendRequestProto;
class AppendResponseProto;
class SetReplicationRequestProto;
class SetReplicationResponseProto;
class SetPermissionRequestProto;
class SetPermissionResponseProto;
class SetOwnerRequestProto;
class SetOwnerResponseProto;
class AbandonBlockRequestProto;
class AbandonBlockResponseProto;
class AddBlockRequestProto;
class AddBlockResponseProto;
class GetAdditionalDatanodeRequestProto;
class GetAdditionalDatanodeResponseProto;
class CompleteRequestProto;
class CompleteResponseProto;
class ReportBadBlocksRequestProto;
class ReportBadBlocksResponseProto;
class ConcatRequestProto;
class ConcatResponseProto;
class TruncateRequestProto;
class TruncateResponseProto;
class GetLeaseRequestProto;
class GetLeaseResponseProto;
class ReleaseLeaseRequestProto;
class ReleaseLeaseResponseProto;
class RenameRequestProto;
class RenameResponseProto;
class Rename2RequestProto;
class Rename2ResponseProto;
class DeleteRequestProto;
class DeleteResponseProto;
class MkdirsRequestProto;
class MkdirsResponseProto;
class GetListingRequestProto;
class GetListingResponseProto;
class GetSnapshottableDirListingRequestProto;
class GetSnapshottableDirListingResponseProto;
class GetSnapshotDiffReportRequestProto;
class GetSnapshotDiffReportResponseProto;
class RenewLeaseRequestProto;
class RenewLeaseResponseProto;
class RecoverLeaseRequestProto;
class RecoverLeaseResponseProto;
class GetFsStatusRequestProto;
class GetFsStatsResponseProto;
class GetDatanodeReportRequestProto;
class GetDatanodeReportResponseProto;
class GetPreferredBlockSizeRequestProto;
class GetPreferredBlockSizeResponseProto;
class SetSafeModeRequestProto;
class SetSafeModeResponseProto;
class SaveNamespaceRequestProto;
class SaveNamespaceResponseProto;
class RollEditsRequestProto;
class RollEditsResponseProto;
class RestoreFailedStorageRequestProto;
class RestoreFailedStorageResponseProto;
class RefreshNodesRequestProto;
class RefreshNodesResponseProto;
class FinalizeUpgradeRequestProto;
class FinalizeUpgradeResponseProto;
class ListCorruptFileBlocksRequestProto;
class ListCorruptFileBlocksResponseProto;
class MetaSaveRequestProto;
class MetaSaveResponseProto;
class GetFileInfoRequestProto;
class GetFileInfoResponseProto;
class IsFileClosedRequestProto;
class IsFileClosedResponseProto;
class CacheDirectiveInfoProto;
class CacheDirectiveInfoExpirationProto;
class CacheDirectiveStatsProto;
class AddCacheDirectiveRequestProto;
class AddCacheDirectiveResponseProto;
class ModifyCacheDirectiveRequestProto;
class ModifyCacheDirectiveResponseProto;
class RemoveCacheDirectiveRequestProto;
class RemoveCacheDirectiveResponseProto;
class ListCacheDirectivesRequestProto;
class CacheDirectiveEntryProto;
class ListCacheDirectivesResponseProto;
class CachePoolInfoProto;
class CachePoolStatsProto;
class AddCachePoolRequestProto;
class AddCachePoolResponseProto;
class ModifyCachePoolRequestProto;
class ModifyCachePoolResponseProto;
class RemoveCachePoolRequestProto;
class RemoveCachePoolResponseProto;
class ListCachePoolsRequestProto;
class ListCachePoolsResponseProto;
class CachePoolEntryProto;
class GetFileLinkInfoRequestProto;
class GetFileLinkInfoResponseProto;
class GetContentSummaryRequestProto;
class GetContentSummaryResponseProto;
class SetQuotaRequestProto;
class SetQuotaResponseProto;
class FsyncRequestProto;
class FsyncResponseProto;
class SetTimesRequestProto;
class SetTimesResponseProto;
class CreateSymlinkRequestProto;
class CreateSymlinkResponseProto;
class GetLinkTargetRequestProto;
class GetLinkTargetResponseProto;
class UpdateBlockForPipelineRequestProto;
class UpdateBlockForPipelineResponseProto;
class UpdatePipelineRequestProto;
class UpdatePipelineResponseProto;
class SetBalancerBandwidthRequestProto;
class SetBalancerBandwidthResponseProto;
class GetDataEncryptionKeyRequestProto;
class GetDataEncryptionKeyResponseProto;
class CreateSnapshotRequestProto;
class CreateSnapshotResponseProto;
class RenameSnapshotRequestProto;
class RenameSnapshotResponseProto;
class AllowSnapshotRequestProto;
class AllowSnapshotResponseProto;
class DisallowSnapshotRequestProto;
class DisallowSnapshotResponseProto;
class DeleteSnapshotRequestProto;
class DeleteSnapshotResponseProto;

enum CreateFlagProto {
  CREATE = 1,
  OVERWRITE = 2,
  APPEND = 4
};
bool CreateFlagProto_IsValid(int value);
const CreateFlagProto CreateFlagProto_MIN = CREATE;
const CreateFlagProto CreateFlagProto_MAX = APPEND;
const int CreateFlagProto_ARRAYSIZE = CreateFlagProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateFlagProto_descriptor();
inline const ::std::string& CreateFlagProto_Name(CreateFlagProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateFlagProto_descriptor(), value);
}
inline bool CreateFlagProto_Parse(
    const ::std::string& name, CreateFlagProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateFlagProto>(
    CreateFlagProto_descriptor(), name, value);
}
enum DatanodeReportTypeProto {
  ALL = 1,
  LIVE = 2,
  DEAD = 3
};
bool DatanodeReportTypeProto_IsValid(int value);
const DatanodeReportTypeProto DatanodeReportTypeProto_MIN = ALL;
const DatanodeReportTypeProto DatanodeReportTypeProto_MAX = DEAD;
const int DatanodeReportTypeProto_ARRAYSIZE = DatanodeReportTypeProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatanodeReportTypeProto_descriptor();
inline const ::std::string& DatanodeReportTypeProto_Name(DatanodeReportTypeProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatanodeReportTypeProto_descriptor(), value);
}
inline bool DatanodeReportTypeProto_Parse(
    const ::std::string& name, DatanodeReportTypeProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatanodeReportTypeProto>(
    DatanodeReportTypeProto_descriptor(), name, value);
}
enum SafeModeActionProto {
  SAFEMODE_LEAVE = 1,
  SAFEMODE_ENTER = 2,
  SAFEMODE_GET = 3
};
bool SafeModeActionProto_IsValid(int value);
const SafeModeActionProto SafeModeActionProto_MIN = SAFEMODE_LEAVE;
const SafeModeActionProto SafeModeActionProto_MAX = SAFEMODE_GET;
const int SafeModeActionProto_ARRAYSIZE = SafeModeActionProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* SafeModeActionProto_descriptor();
inline const ::std::string& SafeModeActionProto_Name(SafeModeActionProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    SafeModeActionProto_descriptor(), value);
}
inline bool SafeModeActionProto_Parse(
    const ::std::string& name, SafeModeActionProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SafeModeActionProto>(
    SafeModeActionProto_descriptor(), name, value);
}
enum CacheFlagProto {
  FORCE = 1
};
bool CacheFlagProto_IsValid(int value);
const CacheFlagProto CacheFlagProto_MIN = FORCE;
const CacheFlagProto CacheFlagProto_MAX = FORCE;
const int CacheFlagProto_ARRAYSIZE = CacheFlagProto_MAX + 1;

const ::google::protobuf::EnumDescriptor* CacheFlagProto_descriptor();
inline const ::std::string& CacheFlagProto_Name(CacheFlagProto value) {
  return ::google::protobuf::internal::NameOfEnum(
    CacheFlagProto_descriptor(), value);
}
inline bool CacheFlagProto_Parse(
    const ::std::string& name, CacheFlagProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CacheFlagProto>(
    CacheFlagProto_descriptor(), name, value);
}
// ===================================================================

class GetBlockLocationsRequestProto : public ::google::protobuf::Message {
 public:
  GetBlockLocationsRequestProto();
  virtual ~GetBlockLocationsRequestProto();

  GetBlockLocationsRequestProto(const GetBlockLocationsRequestProto& from);

  inline GetBlockLocationsRequestProto& operator=(const GetBlockLocationsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBlockLocationsRequestProto& default_instance();

  void Swap(GetBlockLocationsRequestProto* other);

  // implements Message ----------------------------------------------

  GetBlockLocationsRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBlockLocationsRequestProto& from);
  void MergeFrom(const GetBlockLocationsRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required uint64 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint64 offset() const;
  inline void set_offset(::google::protobuf::uint64 value);

  // required uint64 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint64 length() const;
  inline void set_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetBlockLocationsRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetBlockLocationsRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetBlockLocationsResponseProto : public ::google::protobuf::Message {
 public:
  GetBlockLocationsResponseProto();
  virtual ~GetBlockLocationsResponseProto();

  GetBlockLocationsResponseProto(const GetBlockLocationsResponseProto& from);

  inline GetBlockLocationsResponseProto& operator=(const GetBlockLocationsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBlockLocationsResponseProto& default_instance();

  void Swap(GetBlockLocationsResponseProto* other);

  // implements Message ----------------------------------------------

  GetBlockLocationsResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetBlockLocationsResponseProto& from);
  void MergeFrom(const GetBlockLocationsResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
  inline bool has_locations() const;
  inline void clear_locations();
  static const int kLocationsFieldNumber = 1;
  inline const ::Hdfs::Internal::LocatedBlocksProto& locations() const;
  inline ::Hdfs::Internal::LocatedBlocksProto* mutable_locations();
  inline ::Hdfs::Internal::LocatedBlocksProto* release_locations();
  inline void set_allocated_locations(::Hdfs::Internal::LocatedBlocksProto* locations);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetBlockLocationsResponseProto)
 private:
  inline void set_has_locations();
  inline void clear_has_locations();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::LocatedBlocksProto* locations_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetBlockLocationsResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetServerDefaultsRequestProto : public ::google::protobuf::Message {
 public:
  GetServerDefaultsRequestProto();
  virtual ~GetServerDefaultsRequestProto();

  GetServerDefaultsRequestProto(const GetServerDefaultsRequestProto& from);

  inline GetServerDefaultsRequestProto& operator=(const GetServerDefaultsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerDefaultsRequestProto& default_instance();

  void Swap(GetServerDefaultsRequestProto* other);

  // implements Message ----------------------------------------------

  GetServerDefaultsRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServerDefaultsRequestProto& from);
  void MergeFrom(const GetServerDefaultsRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetServerDefaultsRequestProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetServerDefaultsRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetServerDefaultsResponseProto : public ::google::protobuf::Message {
 public:
  GetServerDefaultsResponseProto();
  virtual ~GetServerDefaultsResponseProto();

  GetServerDefaultsResponseProto(const GetServerDefaultsResponseProto& from);

  inline GetServerDefaultsResponseProto& operator=(const GetServerDefaultsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerDefaultsResponseProto& default_instance();

  void Swap(GetServerDefaultsResponseProto* other);

  // implements Message ----------------------------------------------

  GetServerDefaultsResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetServerDefaultsResponseProto& from);
  void MergeFrom(const GetServerDefaultsResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
  inline bool has_serverdefaults() const;
  inline void clear_serverdefaults();
  static const int kServerDefaultsFieldNumber = 1;
  inline const ::Hdfs::Internal::FsServerDefaultsProto& serverdefaults() const;
  inline ::Hdfs::Internal::FsServerDefaultsProto* mutable_serverdefaults();
  inline ::Hdfs::Internal::FsServerDefaultsProto* release_serverdefaults();
  inline void set_allocated_serverdefaults(::Hdfs::Internal::FsServerDefaultsProto* serverdefaults);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetServerDefaultsResponseProto)
 private:
  inline void set_has_serverdefaults();
  inline void clear_has_serverdefaults();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::FsServerDefaultsProto* serverdefaults_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetServerDefaultsResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class CreateRequestProto : public ::google::protobuf::Message {
 public:
  CreateRequestProto();
  virtual ~CreateRequestProto();

  CreateRequestProto(const CreateRequestProto& from);

  inline CreateRequestProto& operator=(const CreateRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRequestProto& default_instance();

  void Swap(CreateRequestProto* other);

  // implements Message ----------------------------------------------

  CreateRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRequestProto& from);
  void MergeFrom(const CreateRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  inline bool has_masked() const;
  inline void clear_masked();
  static const int kMaskedFieldNumber = 2;
  inline const ::Hdfs::Internal::FsPermissionProto& masked() const;
  inline ::Hdfs::Internal::FsPermissionProto* mutable_masked();
  inline ::Hdfs::Internal::FsPermissionProto* release_masked();
  inline void set_allocated_masked(::Hdfs::Internal::FsPermissionProto* masked);

  // required string clientName = 3;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 3;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // required uint32 createFlag = 4;
  inline bool has_createflag() const;
  inline void clear_createflag();
  static const int kCreateFlagFieldNumber = 4;
  inline ::google::protobuf::uint32 createflag() const;
  inline void set_createflag(::google::protobuf::uint32 value);

  // required bool createParent = 5;
  inline bool has_createparent() const;
  inline void clear_createparent();
  static const int kCreateParentFieldNumber = 5;
  inline bool createparent() const;
  inline void set_createparent(bool value);

  // required uint32 replication = 6;
  inline bool has_replication() const;
  inline void clear_replication();
  static const int kReplicationFieldNumber = 6;
  inline ::google::protobuf::uint32 replication() const;
  inline void set_replication(::google::protobuf::uint32 value);

  // required uint64 blockSize = 7;
  inline bool has_blocksize() const;
  inline void clear_blocksize();
  static const int kBlockSizeFieldNumber = 7;
  inline ::google::protobuf::uint64 blocksize() const;
  inline void set_blocksize(::google::protobuf::uint64 value);

  // repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 8;
  inline int cryptoprotocolversion_size() const;
  inline void clear_cryptoprotocolversion();
  static const int kCryptoProtocolVersionFieldNumber = 8;
  inline ::Hdfs::Internal::CryptoProtocolVersionProto cryptoprotocolversion(int index) const;
  inline void set_cryptoprotocolversion(int index, ::Hdfs::Internal::CryptoProtocolVersionProto value);
  inline void add_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value);
  inline const ::google::protobuf::RepeatedField<int>& cryptoprotocolversion() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_cryptoprotocolversion();

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_masked();
  inline void clear_has_masked();
  inline void set_has_clientname();
  inline void clear_has_clientname();
  inline void set_has_createflag();
  inline void clear_has_createflag();
  inline void set_has_createparent();
  inline void clear_has_createparent();
  inline void set_has_replication();
  inline void clear_has_replication();
  inline void set_has_blocksize();
  inline void clear_has_blocksize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::Hdfs::Internal::FsPermissionProto* masked_;
  ::std::string* clientname_;
  ::google::protobuf::uint32 createflag_;
  bool createparent_;
  ::google::protobuf::uint64 blocksize_;
  ::google::protobuf::RepeatedField<int> cryptoprotocolversion_;
  ::google::protobuf::uint32 replication_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CreateRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class CreateResponseProto : public ::google::protobuf::Message {
 public:
  CreateResponseProto();
  virtual ~CreateResponseProto();

  CreateResponseProto(const CreateResponseProto& from);

  inline CreateResponseProto& operator=(const CreateResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateResponseProto& default_instance();

  void Swap(CreateResponseProto* other);

  // implements Message ----------------------------------------------

  CreateResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateResponseProto& from);
  void MergeFrom(const CreateResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  inline bool has_fs() const;
  inline void clear_fs();
  static const int kFsFieldNumber = 1;
  inline const ::Hdfs::Internal::HdfsFileStatusProto& fs() const;
  inline ::Hdfs::Internal::HdfsFileStatusProto* mutable_fs();
  inline ::Hdfs::Internal::HdfsFileStatusProto* release_fs();
  inline void set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateResponseProto)
 private:
  inline void set_has_fs();
  inline void clear_has_fs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::HdfsFileStatusProto* fs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CreateResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class AppendRequestProto : public ::google::protobuf::Message {
 public:
  AppendRequestProto();
  virtual ~AppendRequestProto();

  AppendRequestProto(const AppendRequestProto& from);

  inline AppendRequestProto& operator=(const AppendRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendRequestProto& default_instance();

  void Swap(AppendRequestProto* other);

  // implements Message ----------------------------------------------

  AppendRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendRequestProto& from);
  void MergeFrom(const AppendRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string clientName = 2;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 2;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AppendRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_clientname();
  inline void clear_has_clientname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* clientname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AppendRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class AppendResponseProto : public ::google::protobuf::Message {
 public:
  AppendResponseProto();
  virtual ~AppendResponseProto();

  AppendResponseProto(const AppendResponseProto& from);

  inline AppendResponseProto& operator=(const AppendResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendResponseProto& default_instance();

  void Swap(AppendResponseProto* other);

  // implements Message ----------------------------------------------

  AppendResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppendResponseProto& from);
  void MergeFrom(const AppendResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Hdfs.Internal.LocatedBlockProto block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::Hdfs::Internal::LocatedBlockProto& block() const;
  inline ::Hdfs::Internal::LocatedBlockProto* mutable_block();
  inline ::Hdfs::Internal::LocatedBlockProto* release_block();
  inline void set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block);

  // optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
  inline bool has_stat() const;
  inline void clear_stat();
  static const int kStatFieldNumber = 2;
  inline const ::Hdfs::Internal::HdfsFileStatusProto& stat() const;
  inline ::Hdfs::Internal::HdfsFileStatusProto* mutable_stat();
  inline ::Hdfs::Internal::HdfsFileStatusProto* release_stat();
  inline void set_allocated_stat(::Hdfs::Internal::HdfsFileStatusProto* stat);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AppendResponseProto)
 private:
  inline void set_has_block();
  inline void clear_has_block();
  inline void set_has_stat();
  inline void clear_has_stat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::LocatedBlockProto* block_;
  ::Hdfs::Internal::HdfsFileStatusProto* stat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AppendResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class SetReplicationRequestProto : public ::google::protobuf::Message {
 public:
  SetReplicationRequestProto();
  virtual ~SetReplicationRequestProto();

  SetReplicationRequestProto(const SetReplicationRequestProto& from);

  inline SetReplicationRequestProto& operator=(const SetReplicationRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetReplicationRequestProto& default_instance();

  void Swap(SetReplicationRequestProto* other);

  // implements Message ----------------------------------------------

  SetReplicationRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetReplicationRequestProto& from);
  void MergeFrom(const SetReplicationRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required uint32 replication = 2;
  inline bool has_replication() const;
  inline void clear_replication();
  static const int kReplicationFieldNumber = 2;
  inline ::google::protobuf::uint32 replication() const;
  inline void set_replication(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetReplicationRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_replication();
  inline void clear_has_replication();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::google::protobuf::uint32 replication_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetReplicationRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class SetReplicationResponseProto : public ::google::protobuf::Message {
 public:
  SetReplicationResponseProto();
  virtual ~SetReplicationResponseProto();

  SetReplicationResponseProto(const SetReplicationResponseProto& from);

  inline SetReplicationResponseProto& operator=(const SetReplicationResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetReplicationResponseProto& default_instance();

  void Swap(SetReplicationResponseProto* other);

  // implements Message ----------------------------------------------

  SetReplicationResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetReplicationResponseProto& from);
  void MergeFrom(const SetReplicationResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetReplicationResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetReplicationResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class SetPermissionRequestProto : public ::google::protobuf::Message {
 public:
  SetPermissionRequestProto();
  virtual ~SetPermissionRequestProto();

  SetPermissionRequestProto(const SetPermissionRequestProto& from);

  inline SetPermissionRequestProto& operator=(const SetPermissionRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPermissionRequestProto& default_instance();

  void Swap(SetPermissionRequestProto* other);

  // implements Message ----------------------------------------------

  SetPermissionRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetPermissionRequestProto& from);
  void MergeFrom(const SetPermissionRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required .Hdfs.Internal.FsPermissionProto permission = 2;
  inline bool has_permission() const;
  inline void clear_permission();
  static const int kPermissionFieldNumber = 2;
  inline const ::Hdfs::Internal::FsPermissionProto& permission() const;
  inline ::Hdfs::Internal::FsPermissionProto* mutable_permission();
  inline ::Hdfs::Internal::FsPermissionProto* release_permission();
  inline void set_allocated_permission(::Hdfs::Internal::FsPermissionProto* permission);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetPermissionRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_permission();
  inline void clear_has_permission();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::Hdfs::Internal::FsPermissionProto* permission_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetPermissionRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class SetPermissionResponseProto : public ::google::protobuf::Message {
 public:
  SetPermissionResponseProto();
  virtual ~SetPermissionResponseProto();

  SetPermissionResponseProto(const SetPermissionResponseProto& from);

  inline SetPermissionResponseProto& operator=(const SetPermissionResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetPermissionResponseProto& default_instance();

  void Swap(SetPermissionResponseProto* other);

  // implements Message ----------------------------------------------

  SetPermissionResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetPermissionResponseProto& from);
  void MergeFrom(const SetPermissionResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetPermissionResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetPermissionResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class SetOwnerRequestProto : public ::google::protobuf::Message {
 public:
  SetOwnerRequestProto();
  virtual ~SetOwnerRequestProto();

  SetOwnerRequestProto(const SetOwnerRequestProto& from);

  inline SetOwnerRequestProto& operator=(const SetOwnerRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetOwnerRequestProto& default_instance();

  void Swap(SetOwnerRequestProto* other);

  // implements Message ----------------------------------------------

  SetOwnerRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetOwnerRequestProto& from);
  void MergeFrom(const SetOwnerRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // optional string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string groupname = 3;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupnameFieldNumber = 3;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  inline void set_allocated_groupname(::std::string* groupname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetOwnerRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_groupname();
  inline void clear_has_groupname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* username_;
  ::std::string* groupname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetOwnerRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class SetOwnerResponseProto : public ::google::protobuf::Message {
 public:
  SetOwnerResponseProto();
  virtual ~SetOwnerResponseProto();

  SetOwnerResponseProto(const SetOwnerResponseProto& from);

  inline SetOwnerResponseProto& operator=(const SetOwnerResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetOwnerResponseProto& default_instance();

  void Swap(SetOwnerResponseProto* other);

  // implements Message ----------------------------------------------

  SetOwnerResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetOwnerResponseProto& from);
  void MergeFrom(const SetOwnerResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetOwnerResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetOwnerResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class AbandonBlockRequestProto : public ::google::protobuf::Message {
 public:
  AbandonBlockRequestProto();
  virtual ~AbandonBlockRequestProto();

  AbandonBlockRequestProto(const AbandonBlockRequestProto& from);

  inline AbandonBlockRequestProto& operator=(const AbandonBlockRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AbandonBlockRequestProto& default_instance();

  void Swap(AbandonBlockRequestProto* other);

  // implements Message ----------------------------------------------

  AbandonBlockRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbandonBlockRequestProto& from);
  void MergeFrom(const AbandonBlockRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.ExtendedBlockProto b = 1;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 1;
  inline const ::Hdfs::Internal::ExtendedBlockProto& b() const;
  inline ::Hdfs::Internal::ExtendedBlockProto* mutable_b();
  inline ::Hdfs::Internal::ExtendedBlockProto* release_b();
  inline void set_allocated_b(::Hdfs::Internal::ExtendedBlockProto* b);

  // required string src = 2;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 2;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string holder = 3;
  inline bool has_holder() const;
  inline void clear_holder();
  static const int kHolderFieldNumber = 3;
  inline const ::std::string& holder() const;
  inline void set_holder(const ::std::string& value);
  inline void set_holder(const char* value);
  inline void set_holder(const char* value, size_t size);
  inline ::std::string* mutable_holder();
  inline ::std::string* release_holder();
  inline void set_allocated_holder(::std::string* holder);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AbandonBlockRequestProto)
 private:
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_holder();
  inline void clear_has_holder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::ExtendedBlockProto* b_;
  ::std::string* src_;
  ::std::string* holder_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AbandonBlockRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class AbandonBlockResponseProto : public ::google::protobuf::Message {
 public:
  AbandonBlockResponseProto();
  virtual ~AbandonBlockResponseProto();

  AbandonBlockResponseProto(const AbandonBlockResponseProto& from);

  inline AbandonBlockResponseProto& operator=(const AbandonBlockResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AbandonBlockResponseProto& default_instance();

  void Swap(AbandonBlockResponseProto* other);

  // implements Message ----------------------------------------------

  AbandonBlockResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbandonBlockResponseProto& from);
  void MergeFrom(const AbandonBlockResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AbandonBlockResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AbandonBlockResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class AddBlockRequestProto : public ::google::protobuf::Message {
 public:
  AddBlockRequestProto();
  virtual ~AddBlockRequestProto();

  AddBlockRequestProto(const AddBlockRequestProto& from);

  inline AddBlockRequestProto& operator=(const AddBlockRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBlockRequestProto& default_instance();

  void Swap(AddBlockRequestProto* other);

  // implements Message ----------------------------------------------

  AddBlockRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddBlockRequestProto& from);
  void MergeFrom(const AddBlockRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string clientName = 2;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 2;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
  inline bool has_previous() const;
  inline void clear_previous();
  static const int kPreviousFieldNumber = 3;
  inline const ::Hdfs::Internal::ExtendedBlockProto& previous() const;
  inline ::Hdfs::Internal::ExtendedBlockProto* mutable_previous();
  inline ::Hdfs::Internal::ExtendedBlockProto* release_previous();
  inline void set_allocated_previous(::Hdfs::Internal::ExtendedBlockProto* previous);

  // repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
  inline int excludenodes_size() const;
  inline void clear_excludenodes();
  static const int kExcludeNodesFieldNumber = 4;
  inline const ::Hdfs::Internal::DatanodeInfoProto& excludenodes(int index) const;
  inline ::Hdfs::Internal::DatanodeInfoProto* mutable_excludenodes(int index);
  inline ::Hdfs::Internal::DatanodeInfoProto* add_excludenodes();
  inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
      excludenodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
      mutable_excludenodes();

  // optional uint64 fileId = 5 [default = 0];
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 5;
  inline ::google::protobuf::uint64 fileid() const;
  inline void set_fileid(::google::protobuf::uint64 value);

  // repeated string favoredNodes = 6;
  inline int favorednodes_size() const;
  inline void clear_favorednodes();
  static const int kFavoredNodesFieldNumber = 6;
  inline const ::std::string& favorednodes(int index) const;
  inline ::std::string* mutable_favorednodes(int index);
  inline void set_favorednodes(int index, const ::std::string& value);
  inline void set_favorednodes(int index, const char* value);
  inline void set_favorednodes(int index, const char* value, size_t size);
  inline ::std::string* add_favorednodes();
  inline void add_favorednodes(const ::std::string& value);
  inline void add_favorednodes(const char* value);
  inline void add_favorednodes(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& favorednodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_favorednodes();

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddBlockRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_clientname();
  inline void clear_has_clientname();
  inline void set_has_previous();
  inline void clear_has_previous();
  inline void set_has_fileid();
  inline void clear_has_fileid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* clientname_;
  ::Hdfs::Internal::ExtendedBlockProto* previous_;
  ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto > excludenodes_;
  ::google::protobuf::uint64 fileid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> favorednodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AddBlockRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class AddBlockResponseProto : public ::google::protobuf::Message {
 public:
  AddBlockResponseProto();
  virtual ~AddBlockResponseProto();

  AddBlockResponseProto(const AddBlockResponseProto& from);

  inline AddBlockResponseProto& operator=(const AddBlockResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddBlockResponseProto& default_instance();

  void Swap(AddBlockResponseProto* other);

  // implements Message ----------------------------------------------

  AddBlockResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddBlockResponseProto& from);
  void MergeFrom(const AddBlockResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::Hdfs::Internal::LocatedBlockProto& block() const;
  inline ::Hdfs::Internal::LocatedBlockProto* mutable_block();
  inline ::Hdfs::Internal::LocatedBlockProto* release_block();
  inline void set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddBlockResponseProto)
 private:
  inline void set_has_block();
  inline void clear_has_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::LocatedBlockProto* block_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AddBlockResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetAdditionalDatanodeRequestProto : public ::google::protobuf::Message {
 public:
  GetAdditionalDatanodeRequestProto();
  virtual ~GetAdditionalDatanodeRequestProto();

  GetAdditionalDatanodeRequestProto(const GetAdditionalDatanodeRequestProto& from);

  inline GetAdditionalDatanodeRequestProto& operator=(const GetAdditionalDatanodeRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAdditionalDatanodeRequestProto& default_instance();

  void Swap(GetAdditionalDatanodeRequestProto* other);

  // implements Message ----------------------------------------------

  GetAdditionalDatanodeRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAdditionalDatanodeRequestProto& from);
  void MergeFrom(const GetAdditionalDatanodeRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
  inline bool has_blk() const;
  inline void clear_blk();
  static const int kBlkFieldNumber = 2;
  inline const ::Hdfs::Internal::ExtendedBlockProto& blk() const;
  inline ::Hdfs::Internal::ExtendedBlockProto* mutable_blk();
  inline ::Hdfs::Internal::ExtendedBlockProto* release_blk();
  inline void set_allocated_blk(::Hdfs::Internal::ExtendedBlockProto* blk);

  // repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
  inline int existings_size() const;
  inline void clear_existings();
  static const int kExistingsFieldNumber = 3;
  inline const ::Hdfs::Internal::DatanodeInfoProto& existings(int index) const;
  inline ::Hdfs::Internal::DatanodeInfoProto* mutable_existings(int index);
  inline ::Hdfs::Internal::DatanodeInfoProto* add_existings();
  inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
      existings() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
      mutable_existings();

  // repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
  inline int excludes_size() const;
  inline void clear_excludes();
  static const int kExcludesFieldNumber = 4;
  inline const ::Hdfs::Internal::DatanodeInfoProto& excludes(int index) const;
  inline ::Hdfs::Internal::DatanodeInfoProto* mutable_excludes(int index);
  inline ::Hdfs::Internal::DatanodeInfoProto* add_excludes();
  inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
      excludes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
      mutable_excludes();

  // required uint32 numAdditionalNodes = 5;
  inline bool has_numadditionalnodes() const;
  inline void clear_numadditionalnodes();
  static const int kNumAdditionalNodesFieldNumber = 5;
  inline ::google::protobuf::uint32 numadditionalnodes() const;
  inline void set_numadditionalnodes(::google::protobuf::uint32 value);

  // required string clientName = 6;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 6;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // repeated string existingStorageUuids = 7;
  inline int existingstorageuuids_size() const;
  inline void clear_existingstorageuuids();
  static const int kExistingStorageUuidsFieldNumber = 7;
  inline const ::std::string& existingstorageuuids(int index) const;
  inline ::std::string* mutable_existingstorageuuids(int index);
  inline void set_existingstorageuuids(int index, const ::std::string& value);
  inline void set_existingstorageuuids(int index, const char* value);
  inline void set_existingstorageuuids(int index, const char* value, size_t size);
  inline ::std::string* add_existingstorageuuids();
  inline void add_existingstorageuuids(const ::std::string& value);
  inline void add_existingstorageuuids(const char* value);
  inline void add_existingstorageuuids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& existingstorageuuids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_existingstorageuuids();

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetAdditionalDatanodeRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_blk();
  inline void clear_has_blk();
  inline void set_has_numadditionalnodes();
  inline void clear_has_numadditionalnodes();
  inline void set_has_clientname();
  inline void clear_has_clientname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::Hdfs::Internal::ExtendedBlockProto* blk_;
  ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto > existings_;
  ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto > excludes_;
  ::std::string* clientname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> existingstorageuuids_;
  ::google::protobuf::uint32 numadditionalnodes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetAdditionalDatanodeRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetAdditionalDatanodeResponseProto : public ::google::protobuf::Message {
 public:
  GetAdditionalDatanodeResponseProto();
  virtual ~GetAdditionalDatanodeResponseProto();

  GetAdditionalDatanodeResponseProto(const GetAdditionalDatanodeResponseProto& from);

  inline GetAdditionalDatanodeResponseProto& operator=(const GetAdditionalDatanodeResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAdditionalDatanodeResponseProto& default_instance();

  void Swap(GetAdditionalDatanodeResponseProto* other);

  // implements Message ----------------------------------------------

  GetAdditionalDatanodeResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAdditionalDatanodeResponseProto& from);
  void MergeFrom(const GetAdditionalDatanodeResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::Hdfs::Internal::LocatedBlockProto& block() const;
  inline ::Hdfs::Internal::LocatedBlockProto* mutable_block();
  inline ::Hdfs::Internal::LocatedBlockProto* release_block();
  inline void set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetAdditionalDatanodeResponseProto)
 private:
  inline void set_has_block();
  inline void clear_has_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::LocatedBlockProto* block_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetAdditionalDatanodeResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class CompleteRequestProto : public ::google::protobuf::Message {
 public:
  CompleteRequestProto();
  virtual ~CompleteRequestProto();

  CompleteRequestProto(const CompleteRequestProto& from);

  inline CompleteRequestProto& operator=(const CompleteRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompleteRequestProto& default_instance();

  void Swap(CompleteRequestProto* other);

  // implements Message ----------------------------------------------

  CompleteRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompleteRequestProto& from);
  void MergeFrom(const CompleteRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string clientName = 2;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 2;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // optional .Hdfs.Internal.ExtendedBlockProto last = 3;
  inline bool has_last() const;
  inline void clear_last();
  static const int kLastFieldNumber = 3;
  inline const ::Hdfs::Internal::ExtendedBlockProto& last() const;
  inline ::Hdfs::Internal::ExtendedBlockProto* mutable_last();
  inline ::Hdfs::Internal::ExtendedBlockProto* release_last();
  inline void set_allocated_last(::Hdfs::Internal::ExtendedBlockProto* last);

  // optional uint64 fileId = 4 [default = 0];
  inline bool has_fileid() const;
  inline void clear_fileid();
  static const int kFileIdFieldNumber = 4;
  inline ::google::protobuf::uint64 fileid() const;
  inline void set_fileid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CompleteRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_clientname();
  inline void clear_has_clientname();
  inline void set_has_last();
  inline void clear_has_last();
  inline void set_has_fileid();
  inline void clear_has_fileid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* clientname_;
  ::Hdfs::Internal::ExtendedBlockProto* last_;
  ::google::protobuf::uint64 fileid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CompleteRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class CompleteResponseProto : public ::google::protobuf::Message {
 public:
  CompleteResponseProto();
  virtual ~CompleteResponseProto();

  CompleteResponseProto(const CompleteResponseProto& from);

  inline CompleteResponseProto& operator=(const CompleteResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CompleteResponseProto& default_instance();

  void Swap(CompleteResponseProto* other);

  // implements Message ----------------------------------------------

  CompleteResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompleteResponseProto& from);
  void MergeFrom(const CompleteResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CompleteResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CompleteResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class ReportBadBlocksRequestProto : public ::google::protobuf::Message {
 public:
  ReportBadBlocksRequestProto();
  virtual ~ReportBadBlocksRequestProto();

  ReportBadBlocksRequestProto(const ReportBadBlocksRequestProto& from);

  inline ReportBadBlocksRequestProto& operator=(const ReportBadBlocksRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportBadBlocksRequestProto& default_instance();

  void Swap(ReportBadBlocksRequestProto* other);

  // implements Message ----------------------------------------------

  ReportBadBlocksRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportBadBlocksRequestProto& from);
  void MergeFrom(const ReportBadBlocksRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
  inline int blocks_size() const;
  inline void clear_blocks();
  static const int kBlocksFieldNumber = 1;
  inline const ::Hdfs::Internal::LocatedBlockProto& blocks(int index) const;
  inline ::Hdfs::Internal::LocatedBlockProto* mutable_blocks(int index);
  inline ::Hdfs::Internal::LocatedBlockProto* add_blocks();
  inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto >&
      blocks() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto >*
      mutable_blocks();

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ReportBadBlocksRequestProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto > blocks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ReportBadBlocksRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class ReportBadBlocksResponseProto : public ::google::protobuf::Message {
 public:
  ReportBadBlocksResponseProto();
  virtual ~ReportBadBlocksResponseProto();

  ReportBadBlocksResponseProto(const ReportBadBlocksResponseProto& from);

  inline ReportBadBlocksResponseProto& operator=(const ReportBadBlocksResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportBadBlocksResponseProto& default_instance();

  void Swap(ReportBadBlocksResponseProto* other);

  // implements Message ----------------------------------------------

  ReportBadBlocksResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportBadBlocksResponseProto& from);
  void MergeFrom(const ReportBadBlocksResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ReportBadBlocksResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ReportBadBlocksResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class ConcatRequestProto : public ::google::protobuf::Message {
 public:
  ConcatRequestProto();
  virtual ~ConcatRequestProto();

  ConcatRequestProto(const ConcatRequestProto& from);

  inline ConcatRequestProto& operator=(const ConcatRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatRequestProto& default_instance();

  void Swap(ConcatRequestProto* other);

  // implements Message ----------------------------------------------

  ConcatRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatRequestProto& from);
  void MergeFrom(const ConcatRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string trg = 1;
  inline bool has_trg() const;
  inline void clear_trg();
  static const int kTrgFieldNumber = 1;
  inline const ::std::string& trg() const;
  inline void set_trg(const ::std::string& value);
  inline void set_trg(const char* value);
  inline void set_trg(const char* value, size_t size);
  inline ::std::string* mutable_trg();
  inline ::std::string* release_trg();
  inline void set_allocated_trg(::std::string* trg);

  // repeated string srcs = 2;
  inline int srcs_size() const;
  inline void clear_srcs();
  static const int kSrcsFieldNumber = 2;
  inline const ::std::string& srcs(int index) const;
  inline ::std::string* mutable_srcs(int index);
  inline void set_srcs(int index, const ::std::string& value);
  inline void set_srcs(int index, const char* value);
  inline void set_srcs(int index, const char* value, size_t size);
  inline ::std::string* add_srcs();
  inline void add_srcs(const ::std::string& value);
  inline void add_srcs(const char* value);
  inline void add_srcs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& srcs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srcs();

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ConcatRequestProto)
 private:
  inline void set_has_trg();
  inline void clear_has_trg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* trg_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srcs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ConcatRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class ConcatResponseProto : public ::google::protobuf::Message {
 public:
  ConcatResponseProto();
  virtual ~ConcatResponseProto();

  ConcatResponseProto(const ConcatResponseProto& from);

  inline ConcatResponseProto& operator=(const ConcatResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConcatResponseProto& default_instance();

  void Swap(ConcatResponseProto* other);

  // implements Message ----------------------------------------------

  ConcatResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConcatResponseProto& from);
  void MergeFrom(const ConcatResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ConcatResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ConcatResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class TruncateRequestProto : public ::google::protobuf::Message {
 public:
  TruncateRequestProto();
  virtual ~TruncateRequestProto();

  TruncateRequestProto(const TruncateRequestProto& from);

  inline TruncateRequestProto& operator=(const TruncateRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TruncateRequestProto& default_instance();

  void Swap(TruncateRequestProto* other);

  // implements Message ----------------------------------------------

  TruncateRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TruncateRequestProto& from);
  void MergeFrom(const TruncateRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required uint64 newLength = 2;
  inline bool has_newlength() const;
  inline void clear_newlength();
  static const int kNewLengthFieldNumber = 2;
  inline ::google::protobuf::uint64 newlength() const;
  inline void set_newlength(::google::protobuf::uint64 value);

  // required string clientName = 3;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 3;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.TruncateRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_newlength();
  inline void clear_has_newlength();
  inline void set_has_clientname();
  inline void clear_has_clientname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::google::protobuf::uint64 newlength_;
  ::std::string* clientname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static TruncateRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class TruncateResponseProto : public ::google::protobuf::Message {
 public:
  TruncateResponseProto();
  virtual ~TruncateResponseProto();

  TruncateResponseProto(const TruncateResponseProto& from);

  inline TruncateResponseProto& operator=(const TruncateResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TruncateResponseProto& default_instance();

  void Swap(TruncateResponseProto* other);

  // implements Message ----------------------------------------------

  TruncateResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TruncateResponseProto& from);
  void MergeFrom(const TruncateResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.TruncateResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static TruncateResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetLeaseRequestProto : public ::google::protobuf::Message {
 public:
  GetLeaseRequestProto();
  virtual ~GetLeaseRequestProto();

  GetLeaseRequestProto(const GetLeaseRequestProto& from);

  inline GetLeaseRequestProto& operator=(const GetLeaseRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLeaseRequestProto& default_instance();

  void Swap(GetLeaseRequestProto* other);

  // implements Message ----------------------------------------------

  GetLeaseRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLeaseRequestProto& from);
  void MergeFrom(const GetLeaseRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string clientName = 2;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 2;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetLeaseRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_clientname();
  inline void clear_has_clientname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* clientname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetLeaseRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetLeaseResponseProto : public ::google::protobuf::Message {
 public:
  GetLeaseResponseProto();
  virtual ~GetLeaseResponseProto();

  GetLeaseResponseProto(const GetLeaseResponseProto& from);

  inline GetLeaseResponseProto& operator=(const GetLeaseResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLeaseResponseProto& default_instance();

  void Swap(GetLeaseResponseProto* other);

  // implements Message ----------------------------------------------

  GetLeaseResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLeaseResponseProto& from);
  void MergeFrom(const GetLeaseResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetLeaseResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetLeaseResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class ReleaseLeaseRequestProto : public ::google::protobuf::Message {
 public:
  ReleaseLeaseRequestProto();
  virtual ~ReleaseLeaseRequestProto();

  ReleaseLeaseRequestProto(const ReleaseLeaseRequestProto& from);

  inline ReleaseLeaseRequestProto& operator=(const ReleaseLeaseRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReleaseLeaseRequestProto& default_instance();

  void Swap(ReleaseLeaseRequestProto* other);

  // implements Message ----------------------------------------------

  ReleaseLeaseRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReleaseLeaseRequestProto& from);
  void MergeFrom(const ReleaseLeaseRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string clientName = 2;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 2;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ReleaseLeaseRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_clientname();
  inline void clear_has_clientname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* clientname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ReleaseLeaseRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class ReleaseLeaseResponseProto : public ::google::protobuf::Message {
 public:
  ReleaseLeaseResponseProto();
  virtual ~ReleaseLeaseResponseProto();

  ReleaseLeaseResponseProto(const ReleaseLeaseResponseProto& from);

  inline ReleaseLeaseResponseProto& operator=(const ReleaseLeaseResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReleaseLeaseResponseProto& default_instance();

  void Swap(ReleaseLeaseResponseProto* other);

  // implements Message ----------------------------------------------

  ReleaseLeaseResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReleaseLeaseResponseProto& from);
  void MergeFrom(const ReleaseLeaseResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ReleaseLeaseResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ReleaseLeaseResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class RenameRequestProto : public ::google::protobuf::Message {
 public:
  RenameRequestProto();
  virtual ~RenameRequestProto();

  RenameRequestProto(const RenameRequestProto& from);

  inline RenameRequestProto& operator=(const RenameRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenameRequestProto& default_instance();

  void Swap(RenameRequestProto* other);

  // implements Message ----------------------------------------------

  RenameRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenameRequestProto& from);
  void MergeFrom(const RenameRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenameRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RenameRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class RenameResponseProto : public ::google::protobuf::Message {
 public:
  RenameResponseProto();
  virtual ~RenameResponseProto();

  RenameResponseProto(const RenameResponseProto& from);

  inline RenameResponseProto& operator=(const RenameResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenameResponseProto& default_instance();

  void Swap(RenameResponseProto* other);

  // implements Message ----------------------------------------------

  RenameResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenameResponseProto& from);
  void MergeFrom(const RenameResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenameResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RenameResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class Rename2RequestProto : public ::google::protobuf::Message {
 public:
  Rename2RequestProto();
  virtual ~Rename2RequestProto();

  Rename2RequestProto(const Rename2RequestProto& from);

  inline Rename2RequestProto& operator=(const Rename2RequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rename2RequestProto& default_instance();

  void Swap(Rename2RequestProto* other);

  // implements Message ----------------------------------------------

  Rename2RequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rename2RequestProto& from);
  void MergeFrom(const Rename2RequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // required bool overwriteDest = 3;
  inline bool has_overwritedest() const;
  inline void clear_overwritedest();
  static const int kOverwriteDestFieldNumber = 3;
  inline bool overwritedest() const;
  inline void set_overwritedest(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.Rename2RequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();
  inline void set_has_overwritedest();
  inline void clear_has_overwritedest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* dst_;
  bool overwritedest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static Rename2RequestProto* default_instance_;
};
// -------------------------------------------------------------------

class Rename2ResponseProto : public ::google::protobuf::Message {
 public:
  Rename2ResponseProto();
  virtual ~Rename2ResponseProto();

  Rename2ResponseProto(const Rename2ResponseProto& from);

  inline Rename2ResponseProto& operator=(const Rename2ResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rename2ResponseProto& default_instance();

  void Swap(Rename2ResponseProto* other);

  // implements Message ----------------------------------------------

  Rename2ResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rename2ResponseProto& from);
  void MergeFrom(const Rename2ResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.Rename2ResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static Rename2ResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRequestProto : public ::google::protobuf::Message {
 public:
  DeleteRequestProto();
  virtual ~DeleteRequestProto();

  DeleteRequestProto(const DeleteRequestProto& from);

  inline DeleteRequestProto& operator=(const DeleteRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequestProto& default_instance();

  void Swap(DeleteRequestProto* other);

  // implements Message ----------------------------------------------

  DeleteRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRequestProto& from);
  void MergeFrom(const DeleteRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required bool recursive = 2;
  inline bool has_recursive() const;
  inline void clear_recursive();
  static const int kRecursiveFieldNumber = 2;
  inline bool recursive() const;
  inline void set_recursive(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_recursive();
  inline void clear_has_recursive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  bool recursive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static DeleteRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class DeleteResponseProto : public ::google::protobuf::Message {
 public:
  DeleteResponseProto();
  virtual ~DeleteResponseProto();

  DeleteResponseProto(const DeleteResponseProto& from);

  inline DeleteResponseProto& operator=(const DeleteResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResponseProto& default_instance();

  void Swap(DeleteResponseProto* other);

  // implements Message ----------------------------------------------

  DeleteResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteResponseProto& from);
  void MergeFrom(const DeleteResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static DeleteResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class MkdirsRequestProto : public ::google::protobuf::Message {
 public:
  MkdirsRequestProto();
  virtual ~MkdirsRequestProto();

  MkdirsRequestProto(const MkdirsRequestProto& from);

  inline MkdirsRequestProto& operator=(const MkdirsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MkdirsRequestProto& default_instance();

  void Swap(MkdirsRequestProto* other);

  // implements Message ----------------------------------------------

  MkdirsRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MkdirsRequestProto& from);
  void MergeFrom(const MkdirsRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  inline bool has_masked() const;
  inline void clear_masked();
  static const int kMaskedFieldNumber = 2;
  inline const ::Hdfs::Internal::FsPermissionProto& masked() const;
  inline ::Hdfs::Internal::FsPermissionProto* mutable_masked();
  inline ::Hdfs::Internal::FsPermissionProto* release_masked();
  inline void set_allocated_masked(::Hdfs::Internal::FsPermissionProto* masked);

  // required bool createParent = 3;
  inline bool has_createparent() const;
  inline void clear_createparent();
  static const int kCreateParentFieldNumber = 3;
  inline bool createparent() const;
  inline void set_createparent(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.MkdirsRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_masked();
  inline void clear_has_masked();
  inline void set_has_createparent();
  inline void clear_has_createparent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::Hdfs::Internal::FsPermissionProto* masked_;
  bool createparent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static MkdirsRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class MkdirsResponseProto : public ::google::protobuf::Message {
 public:
  MkdirsResponseProto();
  virtual ~MkdirsResponseProto();

  MkdirsResponseProto(const MkdirsResponseProto& from);

  inline MkdirsResponseProto& operator=(const MkdirsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MkdirsResponseProto& default_instance();

  void Swap(MkdirsResponseProto* other);

  // implements Message ----------------------------------------------

  MkdirsResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MkdirsResponseProto& from);
  void MergeFrom(const MkdirsResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.MkdirsResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static MkdirsResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetListingRequestProto : public ::google::protobuf::Message {
 public:
  GetListingRequestProto();
  virtual ~GetListingRequestProto();

  GetListingRequestProto(const GetListingRequestProto& from);

  inline GetListingRequestProto& operator=(const GetListingRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetListingRequestProto& default_instance();

  void Swap(GetListingRequestProto* other);

  // implements Message ----------------------------------------------

  GetListingRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetListingRequestProto& from);
  void MergeFrom(const GetListingRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required bytes startAfter = 2;
  inline bool has_startafter() const;
  inline void clear_startafter();
  static const int kStartAfterFieldNumber = 2;
  inline const ::std::string& startafter() const;
  inline void set_startafter(const ::std::string& value);
  inline void set_startafter(const char* value);
  inline void set_startafter(const void* value, size_t size);
  inline ::std::string* mutable_startafter();
  inline ::std::string* release_startafter();
  inline void set_allocated_startafter(::std::string* startafter);

  // required bool needLocation = 3;
  inline bool has_needlocation() const;
  inline void clear_needlocation();
  static const int kNeedLocationFieldNumber = 3;
  inline bool needlocation() const;
  inline void set_needlocation(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetListingRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_startafter();
  inline void clear_has_startafter();
  inline void set_has_needlocation();
  inline void clear_has_needlocation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* startafter_;
  bool needlocation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetListingRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetListingResponseProto : public ::google::protobuf::Message {
 public:
  GetListingResponseProto();
  virtual ~GetListingResponseProto();

  GetListingResponseProto(const GetListingResponseProto& from);

  inline GetListingResponseProto& operator=(const GetListingResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetListingResponseProto& default_instance();

  void Swap(GetListingResponseProto* other);

  // implements Message ----------------------------------------------

  GetListingResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetListingResponseProto& from);
  void MergeFrom(const GetListingResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
  inline bool has_dirlist() const;
  inline void clear_dirlist();
  static const int kDirListFieldNumber = 1;
  inline const ::Hdfs::Internal::DirectoryListingProto& dirlist() const;
  inline ::Hdfs::Internal::DirectoryListingProto* mutable_dirlist();
  inline ::Hdfs::Internal::DirectoryListingProto* release_dirlist();
  inline void set_allocated_dirlist(::Hdfs::Internal::DirectoryListingProto* dirlist);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetListingResponseProto)
 private:
  inline void set_has_dirlist();
  inline void clear_has_dirlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::DirectoryListingProto* dirlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetListingResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetSnapshottableDirListingRequestProto : public ::google::protobuf::Message {
 public:
  GetSnapshottableDirListingRequestProto();
  virtual ~GetSnapshottableDirListingRequestProto();

  GetSnapshottableDirListingRequestProto(const GetSnapshottableDirListingRequestProto& from);

  inline GetSnapshottableDirListingRequestProto& operator=(const GetSnapshottableDirListingRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSnapshottableDirListingRequestProto& default_instance();

  void Swap(GetSnapshottableDirListingRequestProto* other);

  // implements Message ----------------------------------------------

  GetSnapshottableDirListingRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSnapshottableDirListingRequestProto& from);
  void MergeFrom(const GetSnapshottableDirListingRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetSnapshottableDirListingRequestProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetSnapshottableDirListingRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetSnapshottableDirListingResponseProto : public ::google::protobuf::Message {
 public:
  GetSnapshottableDirListingResponseProto();
  virtual ~GetSnapshottableDirListingResponseProto();

  GetSnapshottableDirListingResponseProto(const GetSnapshottableDirListingResponseProto& from);

  inline GetSnapshottableDirListingResponseProto& operator=(const GetSnapshottableDirListingResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSnapshottableDirListingResponseProto& default_instance();

  void Swap(GetSnapshottableDirListingResponseProto* other);

  // implements Message ----------------------------------------------

  GetSnapshottableDirListingResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSnapshottableDirListingResponseProto& from);
  void MergeFrom(const GetSnapshottableDirListingResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Hdfs.Internal.SnapshottableDirectoryListingProto snapshottableDirList = 1;
  inline bool has_snapshottabledirlist() const;
  inline void clear_snapshottabledirlist();
  static const int kSnapshottableDirListFieldNumber = 1;
  inline const ::Hdfs::Internal::SnapshottableDirectoryListingProto& snapshottabledirlist() const;
  inline ::Hdfs::Internal::SnapshottableDirectoryListingProto* mutable_snapshottabledirlist();
  inline ::Hdfs::Internal::SnapshottableDirectoryListingProto* release_snapshottabledirlist();
  inline void set_allocated_snapshottabledirlist(::Hdfs::Internal::SnapshottableDirectoryListingProto* snapshottabledirlist);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetSnapshottableDirListingResponseProto)
 private:
  inline void set_has_snapshottabledirlist();
  inline void clear_has_snapshottabledirlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::SnapshottableDirectoryListingProto* snapshottabledirlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetSnapshottableDirListingResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetSnapshotDiffReportRequestProto : public ::google::protobuf::Message {
 public:
  GetSnapshotDiffReportRequestProto();
  virtual ~GetSnapshotDiffReportRequestProto();

  GetSnapshotDiffReportRequestProto(const GetSnapshotDiffReportRequestProto& from);

  inline GetSnapshotDiffReportRequestProto& operator=(const GetSnapshotDiffReportRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSnapshotDiffReportRequestProto& default_instance();

  void Swap(GetSnapshotDiffReportRequestProto* other);

  // implements Message ----------------------------------------------

  GetSnapshotDiffReportRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSnapshotDiffReportRequestProto& from);
  void MergeFrom(const GetSnapshotDiffReportRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snapshotRoot = 1;
  inline bool has_snapshotroot() const;
  inline void clear_snapshotroot();
  static const int kSnapshotRootFieldNumber = 1;
  inline const ::std::string& snapshotroot() const;
  inline void set_snapshotroot(const ::std::string& value);
  inline void set_snapshotroot(const char* value);
  inline void set_snapshotroot(const char* value, size_t size);
  inline ::std::string* mutable_snapshotroot();
  inline ::std::string* release_snapshotroot();
  inline void set_allocated_snapshotroot(::std::string* snapshotroot);

  // required string fromSnapshot = 2;
  inline bool has_fromsnapshot() const;
  inline void clear_fromsnapshot();
  static const int kFromSnapshotFieldNumber = 2;
  inline const ::std::string& fromsnapshot() const;
  inline void set_fromsnapshot(const ::std::string& value);
  inline void set_fromsnapshot(const char* value);
  inline void set_fromsnapshot(const char* value, size_t size);
  inline ::std::string* mutable_fromsnapshot();
  inline ::std::string* release_fromsnapshot();
  inline void set_allocated_fromsnapshot(::std::string* fromsnapshot);

  // required string toSnapshot = 3;
  inline bool has_tosnapshot() const;
  inline void clear_tosnapshot();
  static const int kToSnapshotFieldNumber = 3;
  inline const ::std::string& tosnapshot() const;
  inline void set_tosnapshot(const ::std::string& value);
  inline void set_tosnapshot(const char* value);
  inline void set_tosnapshot(const char* value, size_t size);
  inline ::std::string* mutable_tosnapshot();
  inline ::std::string* release_tosnapshot();
  inline void set_allocated_tosnapshot(::std::string* tosnapshot);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetSnapshotDiffReportRequestProto)
 private:
  inline void set_has_snapshotroot();
  inline void clear_has_snapshotroot();
  inline void set_has_fromsnapshot();
  inline void clear_has_fromsnapshot();
  inline void set_has_tosnapshot();
  inline void clear_has_tosnapshot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* snapshotroot_;
  ::std::string* fromsnapshot_;
  ::std::string* tosnapshot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetSnapshotDiffReportRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetSnapshotDiffReportResponseProto : public ::google::protobuf::Message {
 public:
  GetSnapshotDiffReportResponseProto();
  virtual ~GetSnapshotDiffReportResponseProto();

  GetSnapshotDiffReportResponseProto(const GetSnapshotDiffReportResponseProto& from);

  inline GetSnapshotDiffReportResponseProto& operator=(const GetSnapshotDiffReportResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSnapshotDiffReportResponseProto& default_instance();

  void Swap(GetSnapshotDiffReportResponseProto* other);

  // implements Message ----------------------------------------------

  GetSnapshotDiffReportResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetSnapshotDiffReportResponseProto& from);
  void MergeFrom(const GetSnapshotDiffReportResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
  inline bool has_diffreport() const;
  inline void clear_diffreport();
  static const int kDiffReportFieldNumber = 1;
  inline const ::Hdfs::Internal::SnapshotDiffReportProto& diffreport() const;
  inline ::Hdfs::Internal::SnapshotDiffReportProto* mutable_diffreport();
  inline ::Hdfs::Internal::SnapshotDiffReportProto* release_diffreport();
  inline void set_allocated_diffreport(::Hdfs::Internal::SnapshotDiffReportProto* diffreport);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetSnapshotDiffReportResponseProto)
 private:
  inline void set_has_diffreport();
  inline void clear_has_diffreport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::SnapshotDiffReportProto* diffreport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetSnapshotDiffReportResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class RenewLeaseRequestProto : public ::google::protobuf::Message {
 public:
  RenewLeaseRequestProto();
  virtual ~RenewLeaseRequestProto();

  RenewLeaseRequestProto(const RenewLeaseRequestProto& from);

  inline RenewLeaseRequestProto& operator=(const RenewLeaseRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenewLeaseRequestProto& default_instance();

  void Swap(RenewLeaseRequestProto* other);

  // implements Message ----------------------------------------------

  RenewLeaseRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenewLeaseRequestProto& from);
  void MergeFrom(const RenewLeaseRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clientName = 1;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 1;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenewLeaseRequestProto)
 private:
  inline void set_has_clientname();
  inline void clear_has_clientname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RenewLeaseRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class RenewLeaseResponseProto : public ::google::protobuf::Message {
 public:
  RenewLeaseResponseProto();
  virtual ~RenewLeaseResponseProto();

  RenewLeaseResponseProto(const RenewLeaseResponseProto& from);

  inline RenewLeaseResponseProto& operator=(const RenewLeaseResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenewLeaseResponseProto& default_instance();

  void Swap(RenewLeaseResponseProto* other);

  // implements Message ----------------------------------------------

  RenewLeaseResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenewLeaseResponseProto& from);
  void MergeFrom(const RenewLeaseResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenewLeaseResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RenewLeaseResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class RecoverLeaseRequestProto : public ::google::protobuf::Message {
 public:
  RecoverLeaseRequestProto();
  virtual ~RecoverLeaseRequestProto();

  RecoverLeaseRequestProto(const RecoverLeaseRequestProto& from);

  inline RecoverLeaseRequestProto& operator=(const RecoverLeaseRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverLeaseRequestProto& default_instance();

  void Swap(RecoverLeaseRequestProto* other);

  // implements Message ----------------------------------------------

  RecoverLeaseRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecoverLeaseRequestProto& from);
  void MergeFrom(const RecoverLeaseRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string clientName = 2;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 2;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RecoverLeaseRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_clientname();
  inline void clear_has_clientname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* clientname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RecoverLeaseRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class RecoverLeaseResponseProto : public ::google::protobuf::Message {
 public:
  RecoverLeaseResponseProto();
  virtual ~RecoverLeaseResponseProto();

  RecoverLeaseResponseProto(const RecoverLeaseResponseProto& from);

  inline RecoverLeaseResponseProto& operator=(const RecoverLeaseResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverLeaseResponseProto& default_instance();

  void Swap(RecoverLeaseResponseProto* other);

  // implements Message ----------------------------------------------

  RecoverLeaseResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecoverLeaseResponseProto& from);
  void MergeFrom(const RecoverLeaseResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RecoverLeaseResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RecoverLeaseResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetFsStatusRequestProto : public ::google::protobuf::Message {
 public:
  GetFsStatusRequestProto();
  virtual ~GetFsStatusRequestProto();

  GetFsStatusRequestProto(const GetFsStatusRequestProto& from);

  inline GetFsStatusRequestProto& operator=(const GetFsStatusRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFsStatusRequestProto& default_instance();

  void Swap(GetFsStatusRequestProto* other);

  // implements Message ----------------------------------------------

  GetFsStatusRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFsStatusRequestProto& from);
  void MergeFrom(const GetFsStatusRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFsStatusRequestProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetFsStatusRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetFsStatsResponseProto : public ::google::protobuf::Message {
 public:
  GetFsStatsResponseProto();
  virtual ~GetFsStatsResponseProto();

  GetFsStatsResponseProto(const GetFsStatsResponseProto& from);

  inline GetFsStatsResponseProto& operator=(const GetFsStatsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFsStatsResponseProto& default_instance();

  void Swap(GetFsStatsResponseProto* other);

  // implements Message ----------------------------------------------

  GetFsStatsResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFsStatsResponseProto& from);
  void MergeFrom(const GetFsStatsResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 capacity = 1;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 1;
  inline ::google::protobuf::uint64 capacity() const;
  inline void set_capacity(::google::protobuf::uint64 value);

  // required uint64 used = 2;
  inline bool has_used() const;
  inline void clear_used();
  static const int kUsedFieldNumber = 2;
  inline ::google::protobuf::uint64 used() const;
  inline void set_used(::google::protobuf::uint64 value);

  // required uint64 remaining = 3;
  inline bool has_remaining() const;
  inline void clear_remaining();
  static const int kRemainingFieldNumber = 3;
  inline ::google::protobuf::uint64 remaining() const;
  inline void set_remaining(::google::protobuf::uint64 value);

  // required uint64 under_replicated = 4;
  inline bool has_under_replicated() const;
  inline void clear_under_replicated();
  static const int kUnderReplicatedFieldNumber = 4;
  inline ::google::protobuf::uint64 under_replicated() const;
  inline void set_under_replicated(::google::protobuf::uint64 value);

  // required uint64 corrupt_blocks = 5;
  inline bool has_corrupt_blocks() const;
  inline void clear_corrupt_blocks();
  static const int kCorruptBlocksFieldNumber = 5;
  inline ::google::protobuf::uint64 corrupt_blocks() const;
  inline void set_corrupt_blocks(::google::protobuf::uint64 value);

  // required uint64 missing_blocks = 6;
  inline bool has_missing_blocks() const;
  inline void clear_missing_blocks();
  static const int kMissingBlocksFieldNumber = 6;
  inline ::google::protobuf::uint64 missing_blocks() const;
  inline void set_missing_blocks(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFsStatsResponseProto)
 private:
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_used();
  inline void clear_has_used();
  inline void set_has_remaining();
  inline void clear_has_remaining();
  inline void set_has_under_replicated();
  inline void clear_has_under_replicated();
  inline void set_has_corrupt_blocks();
  inline void clear_has_corrupt_blocks();
  inline void set_has_missing_blocks();
  inline void clear_has_missing_blocks();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 capacity_;
  ::google::protobuf::uint64 used_;
  ::google::protobuf::uint64 remaining_;
  ::google::protobuf::uint64 under_replicated_;
  ::google::protobuf::uint64 corrupt_blocks_;
  ::google::protobuf::uint64 missing_blocks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetFsStatsResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetDatanodeReportRequestProto : public ::google::protobuf::Message {
 public:
  GetDatanodeReportRequestProto();
  virtual ~GetDatanodeReportRequestProto();

  GetDatanodeReportRequestProto(const GetDatanodeReportRequestProto& from);

  inline GetDatanodeReportRequestProto& operator=(const GetDatanodeReportRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDatanodeReportRequestProto& default_instance();

  void Swap(GetDatanodeReportRequestProto* other);

  // implements Message ----------------------------------------------

  GetDatanodeReportRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDatanodeReportRequestProto& from);
  void MergeFrom(const GetDatanodeReportRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Hdfs::Internal::DatanodeReportTypeProto type() const;
  inline void set_type(::Hdfs::Internal::DatanodeReportTypeProto value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDatanodeReportRequestProto)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetDatanodeReportRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetDatanodeReportResponseProto : public ::google::protobuf::Message {
 public:
  GetDatanodeReportResponseProto();
  virtual ~GetDatanodeReportResponseProto();

  GetDatanodeReportResponseProto(const GetDatanodeReportResponseProto& from);

  inline GetDatanodeReportResponseProto& operator=(const GetDatanodeReportResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDatanodeReportResponseProto& default_instance();

  void Swap(GetDatanodeReportResponseProto* other);

  // implements Message ----------------------------------------------

  GetDatanodeReportResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDatanodeReportResponseProto& from);
  void MergeFrom(const GetDatanodeReportResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
  inline int di_size() const;
  inline void clear_di();
  static const int kDiFieldNumber = 1;
  inline const ::Hdfs::Internal::DatanodeInfoProto& di(int index) const;
  inline ::Hdfs::Internal::DatanodeInfoProto* mutable_di(int index);
  inline ::Hdfs::Internal::DatanodeInfoProto* add_di();
  inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
      di() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
      mutable_di();

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDatanodeReportResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto > di_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetDatanodeReportResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetPreferredBlockSizeRequestProto : public ::google::protobuf::Message {
 public:
  GetPreferredBlockSizeRequestProto();
  virtual ~GetPreferredBlockSizeRequestProto();

  GetPreferredBlockSizeRequestProto(const GetPreferredBlockSizeRequestProto& from);

  inline GetPreferredBlockSizeRequestProto& operator=(const GetPreferredBlockSizeRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPreferredBlockSizeRequestProto& default_instance();

  void Swap(GetPreferredBlockSizeRequestProto* other);

  // implements Message ----------------------------------------------

  GetPreferredBlockSizeRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPreferredBlockSizeRequestProto& from);
  void MergeFrom(const GetPreferredBlockSizeRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetPreferredBlockSizeRequestProto)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetPreferredBlockSizeRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetPreferredBlockSizeResponseProto : public ::google::protobuf::Message {
 public:
  GetPreferredBlockSizeResponseProto();
  virtual ~GetPreferredBlockSizeResponseProto();

  GetPreferredBlockSizeResponseProto(const GetPreferredBlockSizeResponseProto& from);

  inline GetPreferredBlockSizeResponseProto& operator=(const GetPreferredBlockSizeResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPreferredBlockSizeResponseProto& default_instance();

  void Swap(GetPreferredBlockSizeResponseProto* other);

  // implements Message ----------------------------------------------

  GetPreferredBlockSizeResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetPreferredBlockSizeResponseProto& from);
  void MergeFrom(const GetPreferredBlockSizeResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 bsize = 1;
  inline bool has_bsize() const;
  inline void clear_bsize();
  static const int kBsizeFieldNumber = 1;
  inline ::google::protobuf::uint64 bsize() const;
  inline void set_bsize(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetPreferredBlockSizeResponseProto)
 private:
  inline void set_has_bsize();
  inline void clear_has_bsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 bsize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetPreferredBlockSizeResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class SetSafeModeRequestProto : public ::google::protobuf::Message {
 public:
  SetSafeModeRequestProto();
  virtual ~SetSafeModeRequestProto();

  SetSafeModeRequestProto(const SetSafeModeRequestProto& from);

  inline SetSafeModeRequestProto& operator=(const SetSafeModeRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSafeModeRequestProto& default_instance();

  void Swap(SetSafeModeRequestProto* other);

  // implements Message ----------------------------------------------

  SetSafeModeRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetSafeModeRequestProto& from);
  void MergeFrom(const SetSafeModeRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.SafeModeActionProto action = 1;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 1;
  inline ::Hdfs::Internal::SafeModeActionProto action() const;
  inline void set_action(::Hdfs::Internal::SafeModeActionProto value);

  // optional bool checked = 2 [default = false];
  inline bool has_checked() const;
  inline void clear_checked();
  static const int kCheckedFieldNumber = 2;
  inline bool checked() const;
  inline void set_checked(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetSafeModeRequestProto)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_checked();
  inline void clear_has_checked();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int action_;
  bool checked_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetSafeModeRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class SetSafeModeResponseProto : public ::google::protobuf::Message {
 public:
  SetSafeModeResponseProto();
  virtual ~SetSafeModeResponseProto();

  SetSafeModeResponseProto(const SetSafeModeResponseProto& from);

  inline SetSafeModeResponseProto& operator=(const SetSafeModeResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSafeModeResponseProto& default_instance();

  void Swap(SetSafeModeResponseProto* other);

  // implements Message ----------------------------------------------

  SetSafeModeResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetSafeModeResponseProto& from);
  void MergeFrom(const SetSafeModeResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetSafeModeResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetSafeModeResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class SaveNamespaceRequestProto : public ::google::protobuf::Message {
 public:
  SaveNamespaceRequestProto();
  virtual ~SaveNamespaceRequestProto();

  SaveNamespaceRequestProto(const SaveNamespaceRequestProto& from);

  inline SaveNamespaceRequestProto& operator=(const SaveNamespaceRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveNamespaceRequestProto& default_instance();

  void Swap(SaveNamespaceRequestProto* other);

  // implements Message ----------------------------------------------

  SaveNamespaceRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveNamespaceRequestProto& from);
  void MergeFrom(const SaveNamespaceRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SaveNamespaceRequestProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SaveNamespaceRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class SaveNamespaceResponseProto : public ::google::protobuf::Message {
 public:
  SaveNamespaceResponseProto();
  virtual ~SaveNamespaceResponseProto();

  SaveNamespaceResponseProto(const SaveNamespaceResponseProto& from);

  inline SaveNamespaceResponseProto& operator=(const SaveNamespaceResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveNamespaceResponseProto& default_instance();

  void Swap(SaveNamespaceResponseProto* other);

  // implements Message ----------------------------------------------

  SaveNamespaceResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveNamespaceResponseProto& from);
  void MergeFrom(const SaveNamespaceResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SaveNamespaceResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SaveNamespaceResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class RollEditsRequestProto : public ::google::protobuf::Message {
 public:
  RollEditsRequestProto();
  virtual ~RollEditsRequestProto();

  RollEditsRequestProto(const RollEditsRequestProto& from);

  inline RollEditsRequestProto& operator=(const RollEditsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RollEditsRequestProto& default_instance();

  void Swap(RollEditsRequestProto* other);

  // implements Message ----------------------------------------------

  RollEditsRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RollEditsRequestProto& from);
  void MergeFrom(const RollEditsRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RollEditsRequestProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RollEditsRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class RollEditsResponseProto : public ::google::protobuf::Message {
 public:
  RollEditsResponseProto();
  virtual ~RollEditsResponseProto();

  RollEditsResponseProto(const RollEditsResponseProto& from);

  inline RollEditsResponseProto& operator=(const RollEditsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RollEditsResponseProto& default_instance();

  void Swap(RollEditsResponseProto* other);

  // implements Message ----------------------------------------------

  RollEditsResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RollEditsResponseProto& from);
  void MergeFrom(const RollEditsResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 newSegmentTxId = 1;
  inline bool has_newsegmenttxid() const;
  inline void clear_newsegmenttxid();
  static const int kNewSegmentTxIdFieldNumber = 1;
  inline ::google::protobuf::uint64 newsegmenttxid() const;
  inline void set_newsegmenttxid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RollEditsResponseProto)
 private:
  inline void set_has_newsegmenttxid();
  inline void clear_has_newsegmenttxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 newsegmenttxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RollEditsResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class RestoreFailedStorageRequestProto : public ::google::protobuf::Message {
 public:
  RestoreFailedStorageRequestProto();
  virtual ~RestoreFailedStorageRequestProto();

  RestoreFailedStorageRequestProto(const RestoreFailedStorageRequestProto& from);

  inline RestoreFailedStorageRequestProto& operator=(const RestoreFailedStorageRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestoreFailedStorageRequestProto& default_instance();

  void Swap(RestoreFailedStorageRequestProto* other);

  // implements Message ----------------------------------------------

  RestoreFailedStorageRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RestoreFailedStorageRequestProto& from);
  void MergeFrom(const RestoreFailedStorageRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string arg = 1;
  inline bool has_arg() const;
  inline void clear_arg();
  static const int kArgFieldNumber = 1;
  inline const ::std::string& arg() const;
  inline void set_arg(const ::std::string& value);
  inline void set_arg(const char* value);
  inline void set_arg(const char* value, size_t size);
  inline ::std::string* mutable_arg();
  inline ::std::string* release_arg();
  inline void set_allocated_arg(::std::string* arg);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RestoreFailedStorageRequestProto)
 private:
  inline void set_has_arg();
  inline void clear_has_arg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* arg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RestoreFailedStorageRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class RestoreFailedStorageResponseProto : public ::google::protobuf::Message {
 public:
  RestoreFailedStorageResponseProto();
  virtual ~RestoreFailedStorageResponseProto();

  RestoreFailedStorageResponseProto(const RestoreFailedStorageResponseProto& from);

  inline RestoreFailedStorageResponseProto& operator=(const RestoreFailedStorageResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RestoreFailedStorageResponseProto& default_instance();

  void Swap(RestoreFailedStorageResponseProto* other);

  // implements Message ----------------------------------------------

  RestoreFailedStorageResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RestoreFailedStorageResponseProto& from);
  void MergeFrom(const RestoreFailedStorageResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RestoreFailedStorageResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RestoreFailedStorageResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class RefreshNodesRequestProto : public ::google::protobuf::Message {
 public:
  RefreshNodesRequestProto();
  virtual ~RefreshNodesRequestProto();

  RefreshNodesRequestProto(const RefreshNodesRequestProto& from);

  inline RefreshNodesRequestProto& operator=(const RefreshNodesRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshNodesRequestProto& default_instance();

  void Swap(RefreshNodesRequestProto* other);

  // implements Message ----------------------------------------------

  RefreshNodesRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshNodesRequestProto& from);
  void MergeFrom(const RefreshNodesRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RefreshNodesRequestProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RefreshNodesRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class RefreshNodesResponseProto : public ::google::protobuf::Message {
 public:
  RefreshNodesResponseProto();
  virtual ~RefreshNodesResponseProto();

  RefreshNodesResponseProto(const RefreshNodesResponseProto& from);

  inline RefreshNodesResponseProto& operator=(const RefreshNodesResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshNodesResponseProto& default_instance();

  void Swap(RefreshNodesResponseProto* other);

  // implements Message ----------------------------------------------

  RefreshNodesResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshNodesResponseProto& from);
  void MergeFrom(const RefreshNodesResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RefreshNodesResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RefreshNodesResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class FinalizeUpgradeRequestProto : public ::google::protobuf::Message {
 public:
  FinalizeUpgradeRequestProto();
  virtual ~FinalizeUpgradeRequestProto();

  FinalizeUpgradeRequestProto(const FinalizeUpgradeRequestProto& from);

  inline FinalizeUpgradeRequestProto& operator=(const FinalizeUpgradeRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FinalizeUpgradeRequestProto& default_instance();

  void Swap(FinalizeUpgradeRequestProto* other);

  // implements Message ----------------------------------------------

  FinalizeUpgradeRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinalizeUpgradeRequestProto& from);
  void MergeFrom(const FinalizeUpgradeRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.FinalizeUpgradeRequestProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static FinalizeUpgradeRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class FinalizeUpgradeResponseProto : public ::google::protobuf::Message {
 public:
  FinalizeUpgradeResponseProto();
  virtual ~FinalizeUpgradeResponseProto();

  FinalizeUpgradeResponseProto(const FinalizeUpgradeResponseProto& from);

  inline FinalizeUpgradeResponseProto& operator=(const FinalizeUpgradeResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FinalizeUpgradeResponseProto& default_instance();

  void Swap(FinalizeUpgradeResponseProto* other);

  // implements Message ----------------------------------------------

  FinalizeUpgradeResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FinalizeUpgradeResponseProto& from);
  void MergeFrom(const FinalizeUpgradeResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.FinalizeUpgradeResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static FinalizeUpgradeResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class ListCorruptFileBlocksRequestProto : public ::google::protobuf::Message {
 public:
  ListCorruptFileBlocksRequestProto();
  virtual ~ListCorruptFileBlocksRequestProto();

  ListCorruptFileBlocksRequestProto(const ListCorruptFileBlocksRequestProto& from);

  inline ListCorruptFileBlocksRequestProto& operator=(const ListCorruptFileBlocksRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCorruptFileBlocksRequestProto& default_instance();

  void Swap(ListCorruptFileBlocksRequestProto* other);

  // implements Message ----------------------------------------------

  ListCorruptFileBlocksRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListCorruptFileBlocksRequestProto& from);
  void MergeFrom(const ListCorruptFileBlocksRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string cookie = 2;
  inline bool has_cookie() const;
  inline void clear_cookie();
  static const int kCookieFieldNumber = 2;
  inline const ::std::string& cookie() const;
  inline void set_cookie(const ::std::string& value);
  inline void set_cookie(const char* value);
  inline void set_cookie(const char* value, size_t size);
  inline ::std::string* mutable_cookie();
  inline ::std::string* release_cookie();
  inline void set_allocated_cookie(::std::string* cookie);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCorruptFileBlocksRequestProto)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_cookie();
  inline void clear_has_cookie();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::std::string* cookie_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ListCorruptFileBlocksRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class ListCorruptFileBlocksResponseProto : public ::google::protobuf::Message {
 public:
  ListCorruptFileBlocksResponseProto();
  virtual ~ListCorruptFileBlocksResponseProto();

  ListCorruptFileBlocksResponseProto(const ListCorruptFileBlocksResponseProto& from);

  inline ListCorruptFileBlocksResponseProto& operator=(const ListCorruptFileBlocksResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCorruptFileBlocksResponseProto& default_instance();

  void Swap(ListCorruptFileBlocksResponseProto* other);

  // implements Message ----------------------------------------------

  ListCorruptFileBlocksResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListCorruptFileBlocksResponseProto& from);
  void MergeFrom(const ListCorruptFileBlocksResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
  inline bool has_corrupt() const;
  inline void clear_corrupt();
  static const int kCorruptFieldNumber = 1;
  inline const ::Hdfs::Internal::CorruptFileBlocksProto& corrupt() const;
  inline ::Hdfs::Internal::CorruptFileBlocksProto* mutable_corrupt();
  inline ::Hdfs::Internal::CorruptFileBlocksProto* release_corrupt();
  inline void set_allocated_corrupt(::Hdfs::Internal::CorruptFileBlocksProto* corrupt);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCorruptFileBlocksResponseProto)
 private:
  inline void set_has_corrupt();
  inline void clear_has_corrupt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::CorruptFileBlocksProto* corrupt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ListCorruptFileBlocksResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class MetaSaveRequestProto : public ::google::protobuf::Message {
 public:
  MetaSaveRequestProto();
  virtual ~MetaSaveRequestProto();

  MetaSaveRequestProto(const MetaSaveRequestProto& from);

  inline MetaSaveRequestProto& operator=(const MetaSaveRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaSaveRequestProto& default_instance();

  void Swap(MetaSaveRequestProto* other);

  // implements Message ----------------------------------------------

  MetaSaveRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaSaveRequestProto& from);
  void MergeFrom(const MetaSaveRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string filename = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.MetaSaveRequestProto)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static MetaSaveRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class MetaSaveResponseProto : public ::google::protobuf::Message {
 public:
  MetaSaveResponseProto();
  virtual ~MetaSaveResponseProto();

  MetaSaveResponseProto(const MetaSaveResponseProto& from);

  inline MetaSaveResponseProto& operator=(const MetaSaveResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaSaveResponseProto& default_instance();

  void Swap(MetaSaveResponseProto* other);

  // implements Message ----------------------------------------------

  MetaSaveResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaSaveResponseProto& from);
  void MergeFrom(const MetaSaveResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.MetaSaveResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static MetaSaveResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetFileInfoRequestProto : public ::google::protobuf::Message {
 public:
  GetFileInfoRequestProto();
  virtual ~GetFileInfoRequestProto();

  GetFileInfoRequestProto(const GetFileInfoRequestProto& from);

  inline GetFileInfoRequestProto& operator=(const GetFileInfoRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileInfoRequestProto& default_instance();

  void Swap(GetFileInfoRequestProto* other);

  // implements Message ----------------------------------------------

  GetFileInfoRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFileInfoRequestProto& from);
  void MergeFrom(const GetFileInfoRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFileInfoRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetFileInfoRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetFileInfoResponseProto : public ::google::protobuf::Message {
 public:
  GetFileInfoResponseProto();
  virtual ~GetFileInfoResponseProto();

  GetFileInfoResponseProto(const GetFileInfoResponseProto& from);

  inline GetFileInfoResponseProto& operator=(const GetFileInfoResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileInfoResponseProto& default_instance();

  void Swap(GetFileInfoResponseProto* other);

  // implements Message ----------------------------------------------

  GetFileInfoResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFileInfoResponseProto& from);
  void MergeFrom(const GetFileInfoResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  inline bool has_fs() const;
  inline void clear_fs();
  static const int kFsFieldNumber = 1;
  inline const ::Hdfs::Internal::HdfsFileStatusProto& fs() const;
  inline ::Hdfs::Internal::HdfsFileStatusProto* mutable_fs();
  inline ::Hdfs::Internal::HdfsFileStatusProto* release_fs();
  inline void set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFileInfoResponseProto)
 private:
  inline void set_has_fs();
  inline void clear_has_fs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::HdfsFileStatusProto* fs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetFileInfoResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class IsFileClosedRequestProto : public ::google::protobuf::Message {
 public:
  IsFileClosedRequestProto();
  virtual ~IsFileClosedRequestProto();

  IsFileClosedRequestProto(const IsFileClosedRequestProto& from);

  inline IsFileClosedRequestProto& operator=(const IsFileClosedRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsFileClosedRequestProto& default_instance();

  void Swap(IsFileClosedRequestProto* other);

  // implements Message ----------------------------------------------

  IsFileClosedRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsFileClosedRequestProto& from);
  void MergeFrom(const IsFileClosedRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.IsFileClosedRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static IsFileClosedRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class IsFileClosedResponseProto : public ::google::protobuf::Message {
 public:
  IsFileClosedResponseProto();
  virtual ~IsFileClosedResponseProto();

  IsFileClosedResponseProto(const IsFileClosedResponseProto& from);

  inline IsFileClosedResponseProto& operator=(const IsFileClosedResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsFileClosedResponseProto& default_instance();

  void Swap(IsFileClosedResponseProto* other);

  // implements Message ----------------------------------------------

  IsFileClosedResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsFileClosedResponseProto& from);
  void MergeFrom(const IsFileClosedResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.IsFileClosedResponseProto)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static IsFileClosedResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class CacheDirectiveInfoProto : public ::google::protobuf::Message {
 public:
  CacheDirectiveInfoProto();
  virtual ~CacheDirectiveInfoProto();

  CacheDirectiveInfoProto(const CacheDirectiveInfoProto& from);

  inline CacheDirectiveInfoProto& operator=(const CacheDirectiveInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheDirectiveInfoProto& default_instance();

  void Swap(CacheDirectiveInfoProto* other);

  // implements Message ----------------------------------------------

  CacheDirectiveInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheDirectiveInfoProto& from);
  void MergeFrom(const CacheDirectiveInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional uint32 replication = 3;
  inline bool has_replication() const;
  inline void clear_replication();
  static const int kReplicationFieldNumber = 3;
  inline ::google::protobuf::uint32 replication() const;
  inline void set_replication(::google::protobuf::uint32 value);

  // optional string pool = 4;
  inline bool has_pool() const;
  inline void clear_pool();
  static const int kPoolFieldNumber = 4;
  inline const ::std::string& pool() const;
  inline void set_pool(const ::std::string& value);
  inline void set_pool(const char* value);
  inline void set_pool(const char* value, size_t size);
  inline ::std::string* mutable_pool();
  inline ::std::string* release_pool();
  inline void set_allocated_pool(::std::string* pool);

  // optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
  inline bool has_expiration() const;
  inline void clear_expiration();
  static const int kExpirationFieldNumber = 5;
  inline const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto& expiration() const;
  inline ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* mutable_expiration();
  inline ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* release_expiration();
  inline void set_allocated_expiration(::Hdfs::Internal::CacheDirectiveInfoExpirationProto* expiration);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CacheDirectiveInfoProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_replication();
  inline void clear_has_replication();
  inline void set_has_pool();
  inline void clear_has_pool();
  inline void set_has_expiration();
  inline void clear_has_expiration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* path_;
  ::std::string* pool_;
  ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* expiration_;
  ::google::protobuf::uint32 replication_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CacheDirectiveInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class CacheDirectiveInfoExpirationProto : public ::google::protobuf::Message {
 public:
  CacheDirectiveInfoExpirationProto();
  virtual ~CacheDirectiveInfoExpirationProto();

  CacheDirectiveInfoExpirationProto(const CacheDirectiveInfoExpirationProto& from);

  inline CacheDirectiveInfoExpirationProto& operator=(const CacheDirectiveInfoExpirationProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheDirectiveInfoExpirationProto& default_instance();

  void Swap(CacheDirectiveInfoExpirationProto* other);

  // implements Message ----------------------------------------------

  CacheDirectiveInfoExpirationProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheDirectiveInfoExpirationProto& from);
  void MergeFrom(const CacheDirectiveInfoExpirationProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 millis = 1;
  inline bool has_millis() const;
  inline void clear_millis();
  static const int kMillisFieldNumber = 1;
  inline ::google::protobuf::int64 millis() const;
  inline void set_millis(::google::protobuf::int64 value);

  // required bool isRelative = 2;
  inline bool has_isrelative() const;
  inline void clear_isrelative();
  static const int kIsRelativeFieldNumber = 2;
  inline bool isrelative() const;
  inline void set_isrelative(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CacheDirectiveInfoExpirationProto)
 private:
  inline void set_has_millis();
  inline void clear_has_millis();
  inline void set_has_isrelative();
  inline void clear_has_isrelative();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 millis_;
  bool isrelative_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CacheDirectiveInfoExpirationProto* default_instance_;
};
// -------------------------------------------------------------------

class CacheDirectiveStatsProto : public ::google::protobuf::Message {
 public:
  CacheDirectiveStatsProto();
  virtual ~CacheDirectiveStatsProto();

  CacheDirectiveStatsProto(const CacheDirectiveStatsProto& from);

  inline CacheDirectiveStatsProto& operator=(const CacheDirectiveStatsProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheDirectiveStatsProto& default_instance();

  void Swap(CacheDirectiveStatsProto* other);

  // implements Message ----------------------------------------------

  CacheDirectiveStatsProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheDirectiveStatsProto& from);
  void MergeFrom(const CacheDirectiveStatsProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 bytesNeeded = 1;
  inline bool has_bytesneeded() const;
  inline void clear_bytesneeded();
  static const int kBytesNeededFieldNumber = 1;
  inline ::google::protobuf::int64 bytesneeded() const;
  inline void set_bytesneeded(::google::protobuf::int64 value);

  // required int64 bytesCached = 2;
  inline bool has_bytescached() const;
  inline void clear_bytescached();
  static const int kBytesCachedFieldNumber = 2;
  inline ::google::protobuf::int64 bytescached() const;
  inline void set_bytescached(::google::protobuf::int64 value);

  // required int64 filesNeeded = 3;
  inline bool has_filesneeded() const;
  inline void clear_filesneeded();
  static const int kFilesNeededFieldNumber = 3;
  inline ::google::protobuf::int64 filesneeded() const;
  inline void set_filesneeded(::google::protobuf::int64 value);

  // required int64 filesCached = 4;
  inline bool has_filescached() const;
  inline void clear_filescached();
  static const int kFilesCachedFieldNumber = 4;
  inline ::google::protobuf::int64 filescached() const;
  inline void set_filescached(::google::protobuf::int64 value);

  // required bool hasExpired = 5;
  inline bool has_hasexpired() const;
  inline void clear_hasexpired();
  static const int kHasExpiredFieldNumber = 5;
  inline bool hasexpired() const;
  inline void set_hasexpired(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CacheDirectiveStatsProto)
 private:
  inline void set_has_bytesneeded();
  inline void clear_has_bytesneeded();
  inline void set_has_bytescached();
  inline void clear_has_bytescached();
  inline void set_has_filesneeded();
  inline void clear_has_filesneeded();
  inline void set_has_filescached();
  inline void clear_has_filescached();
  inline void set_has_hasexpired();
  inline void clear_has_hasexpired();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bytesneeded_;
  ::google::protobuf::int64 bytescached_;
  ::google::protobuf::int64 filesneeded_;
  ::google::protobuf::int64 filescached_;
  bool hasexpired_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CacheDirectiveStatsProto* default_instance_;
};
// -------------------------------------------------------------------

class AddCacheDirectiveRequestProto : public ::google::protobuf::Message {
 public:
  AddCacheDirectiveRequestProto();
  virtual ~AddCacheDirectiveRequestProto();

  AddCacheDirectiveRequestProto(const AddCacheDirectiveRequestProto& from);

  inline AddCacheDirectiveRequestProto& operator=(const AddCacheDirectiveRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddCacheDirectiveRequestProto& default_instance();

  void Swap(AddCacheDirectiveRequestProto* other);

  // implements Message ----------------------------------------------

  AddCacheDirectiveRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddCacheDirectiveRequestProto& from);
  void MergeFrom(const AddCacheDirectiveRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Hdfs::Internal::CacheDirectiveInfoProto& info() const;
  inline ::Hdfs::Internal::CacheDirectiveInfoProto* mutable_info();
  inline ::Hdfs::Internal::CacheDirectiveInfoProto* release_info();
  inline void set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info);

  // optional uint32 cacheFlags = 2;
  inline bool has_cacheflags() const;
  inline void clear_cacheflags();
  static const int kCacheFlagsFieldNumber = 2;
  inline ::google::protobuf::uint32 cacheflags() const;
  inline void set_cacheflags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddCacheDirectiveRequestProto)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_cacheflags();
  inline void clear_has_cacheflags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::CacheDirectiveInfoProto* info_;
  ::google::protobuf::uint32 cacheflags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AddCacheDirectiveRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class AddCacheDirectiveResponseProto : public ::google::protobuf::Message {
 public:
  AddCacheDirectiveResponseProto();
  virtual ~AddCacheDirectiveResponseProto();

  AddCacheDirectiveResponseProto(const AddCacheDirectiveResponseProto& from);

  inline AddCacheDirectiveResponseProto& operator=(const AddCacheDirectiveResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddCacheDirectiveResponseProto& default_instance();

  void Swap(AddCacheDirectiveResponseProto* other);

  // implements Message ----------------------------------------------

  AddCacheDirectiveResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddCacheDirectiveResponseProto& from);
  void MergeFrom(const AddCacheDirectiveResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddCacheDirectiveResponseProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AddCacheDirectiveResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class ModifyCacheDirectiveRequestProto : public ::google::protobuf::Message {
 public:
  ModifyCacheDirectiveRequestProto();
  virtual ~ModifyCacheDirectiveRequestProto();

  ModifyCacheDirectiveRequestProto(const ModifyCacheDirectiveRequestProto& from);

  inline ModifyCacheDirectiveRequestProto& operator=(const ModifyCacheDirectiveRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyCacheDirectiveRequestProto& default_instance();

  void Swap(ModifyCacheDirectiveRequestProto* other);

  // implements Message ----------------------------------------------

  ModifyCacheDirectiveRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyCacheDirectiveRequestProto& from);
  void MergeFrom(const ModifyCacheDirectiveRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Hdfs::Internal::CacheDirectiveInfoProto& info() const;
  inline ::Hdfs::Internal::CacheDirectiveInfoProto* mutable_info();
  inline ::Hdfs::Internal::CacheDirectiveInfoProto* release_info();
  inline void set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info);

  // optional uint32 cacheFlags = 2;
  inline bool has_cacheflags() const;
  inline void clear_cacheflags();
  static const int kCacheFlagsFieldNumber = 2;
  inline ::google::protobuf::uint32 cacheflags() const;
  inline void set_cacheflags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ModifyCacheDirectiveRequestProto)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_cacheflags();
  inline void clear_has_cacheflags();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::CacheDirectiveInfoProto* info_;
  ::google::protobuf::uint32 cacheflags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ModifyCacheDirectiveRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class ModifyCacheDirectiveResponseProto : public ::google::protobuf::Message {
 public:
  ModifyCacheDirectiveResponseProto();
  virtual ~ModifyCacheDirectiveResponseProto();

  ModifyCacheDirectiveResponseProto(const ModifyCacheDirectiveResponseProto& from);

  inline ModifyCacheDirectiveResponseProto& operator=(const ModifyCacheDirectiveResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyCacheDirectiveResponseProto& default_instance();

  void Swap(ModifyCacheDirectiveResponseProto* other);

  // implements Message ----------------------------------------------

  ModifyCacheDirectiveResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyCacheDirectiveResponseProto& from);
  void MergeFrom(const ModifyCacheDirectiveResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ModifyCacheDirectiveResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ModifyCacheDirectiveResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class RemoveCacheDirectiveRequestProto : public ::google::protobuf::Message {
 public:
  RemoveCacheDirectiveRequestProto();
  virtual ~RemoveCacheDirectiveRequestProto();

  RemoveCacheDirectiveRequestProto(const RemoveCacheDirectiveRequestProto& from);

  inline RemoveCacheDirectiveRequestProto& operator=(const RemoveCacheDirectiveRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveCacheDirectiveRequestProto& default_instance();

  void Swap(RemoveCacheDirectiveRequestProto* other);

  // implements Message ----------------------------------------------

  RemoveCacheDirectiveRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveCacheDirectiveRequestProto& from);
  void MergeFrom(const RemoveCacheDirectiveRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RemoveCacheDirectiveRequestProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RemoveCacheDirectiveRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class RemoveCacheDirectiveResponseProto : public ::google::protobuf::Message {
 public:
  RemoveCacheDirectiveResponseProto();
  virtual ~RemoveCacheDirectiveResponseProto();

  RemoveCacheDirectiveResponseProto(const RemoveCacheDirectiveResponseProto& from);

  inline RemoveCacheDirectiveResponseProto& operator=(const RemoveCacheDirectiveResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveCacheDirectiveResponseProto& default_instance();

  void Swap(RemoveCacheDirectiveResponseProto* other);

  // implements Message ----------------------------------------------

  RemoveCacheDirectiveResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveCacheDirectiveResponseProto& from);
  void MergeFrom(const RemoveCacheDirectiveResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RemoveCacheDirectiveResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RemoveCacheDirectiveResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class ListCacheDirectivesRequestProto : public ::google::protobuf::Message {
 public:
  ListCacheDirectivesRequestProto();
  virtual ~ListCacheDirectivesRequestProto();

  ListCacheDirectivesRequestProto(const ListCacheDirectivesRequestProto& from);

  inline ListCacheDirectivesRequestProto& operator=(const ListCacheDirectivesRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCacheDirectivesRequestProto& default_instance();

  void Swap(ListCacheDirectivesRequestProto* other);

  // implements Message ----------------------------------------------

  ListCacheDirectivesRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListCacheDirectivesRequestProto& from);
  void MergeFrom(const ListCacheDirectivesRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 prevId = 1;
  inline bool has_previd() const;
  inline void clear_previd();
  static const int kPrevIdFieldNumber = 1;
  inline ::google::protobuf::int64 previd() const;
  inline void set_previd(::google::protobuf::int64 value);

  // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 2;
  inline const ::Hdfs::Internal::CacheDirectiveInfoProto& filter() const;
  inline ::Hdfs::Internal::CacheDirectiveInfoProto* mutable_filter();
  inline ::Hdfs::Internal::CacheDirectiveInfoProto* release_filter();
  inline void set_allocated_filter(::Hdfs::Internal::CacheDirectiveInfoProto* filter);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCacheDirectivesRequestProto)
 private:
  inline void set_has_previd();
  inline void clear_has_previd();
  inline void set_has_filter();
  inline void clear_has_filter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 previd_;
  ::Hdfs::Internal::CacheDirectiveInfoProto* filter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ListCacheDirectivesRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class CacheDirectiveEntryProto : public ::google::protobuf::Message {
 public:
  CacheDirectiveEntryProto();
  virtual ~CacheDirectiveEntryProto();

  CacheDirectiveEntryProto(const CacheDirectiveEntryProto& from);

  inline CacheDirectiveEntryProto& operator=(const CacheDirectiveEntryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CacheDirectiveEntryProto& default_instance();

  void Swap(CacheDirectiveEntryProto* other);

  // implements Message ----------------------------------------------

  CacheDirectiveEntryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CacheDirectiveEntryProto& from);
  void MergeFrom(const CacheDirectiveEntryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Hdfs::Internal::CacheDirectiveInfoProto& info() const;
  inline ::Hdfs::Internal::CacheDirectiveInfoProto* mutable_info();
  inline ::Hdfs::Internal::CacheDirectiveInfoProto* release_info();
  inline void set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info);

  // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 2;
  inline const ::Hdfs::Internal::CacheDirectiveStatsProto& stats() const;
  inline ::Hdfs::Internal::CacheDirectiveStatsProto* mutable_stats();
  inline ::Hdfs::Internal::CacheDirectiveStatsProto* release_stats();
  inline void set_allocated_stats(::Hdfs::Internal::CacheDirectiveStatsProto* stats);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CacheDirectiveEntryProto)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_stats();
  inline void clear_has_stats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::CacheDirectiveInfoProto* info_;
  ::Hdfs::Internal::CacheDirectiveStatsProto* stats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CacheDirectiveEntryProto* default_instance_;
};
// -------------------------------------------------------------------

class ListCacheDirectivesResponseProto : public ::google::protobuf::Message {
 public:
  ListCacheDirectivesResponseProto();
  virtual ~ListCacheDirectivesResponseProto();

  ListCacheDirectivesResponseProto(const ListCacheDirectivesResponseProto& from);

  inline ListCacheDirectivesResponseProto& operator=(const ListCacheDirectivesResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCacheDirectivesResponseProto& default_instance();

  void Swap(ListCacheDirectivesResponseProto* other);

  // implements Message ----------------------------------------------

  ListCacheDirectivesResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListCacheDirectivesResponseProto& from);
  void MergeFrom(const ListCacheDirectivesResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
  inline int elements_size() const;
  inline void clear_elements();
  static const int kElementsFieldNumber = 1;
  inline const ::Hdfs::Internal::CacheDirectiveEntryProto& elements(int index) const;
  inline ::Hdfs::Internal::CacheDirectiveEntryProto* mutable_elements(int index);
  inline ::Hdfs::Internal::CacheDirectiveEntryProto* add_elements();
  inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto >&
      elements() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto >*
      mutable_elements();

  // required bool hasMore = 2;
  inline bool has_hasmore() const;
  inline void clear_hasmore();
  static const int kHasMoreFieldNumber = 2;
  inline bool hasmore() const;
  inline void set_hasmore(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCacheDirectivesResponseProto)
 private:
  inline void set_has_hasmore();
  inline void clear_has_hasmore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto > elements_;
  bool hasmore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ListCacheDirectivesResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class CachePoolInfoProto : public ::google::protobuf::Message {
 public:
  CachePoolInfoProto();
  virtual ~CachePoolInfoProto();

  CachePoolInfoProto(const CachePoolInfoProto& from);

  inline CachePoolInfoProto& operator=(const CachePoolInfoProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CachePoolInfoProto& default_instance();

  void Swap(CachePoolInfoProto* other);

  // implements Message ----------------------------------------------

  CachePoolInfoProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CachePoolInfoProto& from);
  void MergeFrom(const CachePoolInfoProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string poolName = 1;
  inline bool has_poolname() const;
  inline void clear_poolname();
  static const int kPoolNameFieldNumber = 1;
  inline const ::std::string& poolname() const;
  inline void set_poolname(const ::std::string& value);
  inline void set_poolname(const char* value);
  inline void set_poolname(const char* value, size_t size);
  inline ::std::string* mutable_poolname();
  inline ::std::string* release_poolname();
  inline void set_allocated_poolname(::std::string* poolname);

  // optional string ownerName = 2;
  inline bool has_ownername() const;
  inline void clear_ownername();
  static const int kOwnerNameFieldNumber = 2;
  inline const ::std::string& ownername() const;
  inline void set_ownername(const ::std::string& value);
  inline void set_ownername(const char* value);
  inline void set_ownername(const char* value, size_t size);
  inline ::std::string* mutable_ownername();
  inline ::std::string* release_ownername();
  inline void set_allocated_ownername(::std::string* ownername);

  // optional string groupName = 3;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupNameFieldNumber = 3;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  inline void set_allocated_groupname(::std::string* groupname);

  // optional int32 mode = 4;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 4;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional int64 limit = 5;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 5;
  inline ::google::protobuf::int64 limit() const;
  inline void set_limit(::google::protobuf::int64 value);

  // optional int64 maxRelativeExpiry = 6;
  inline bool has_maxrelativeexpiry() const;
  inline void clear_maxrelativeexpiry();
  static const int kMaxRelativeExpiryFieldNumber = 6;
  inline ::google::protobuf::int64 maxrelativeexpiry() const;
  inline void set_maxrelativeexpiry(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CachePoolInfoProto)
 private:
  inline void set_has_poolname();
  inline void clear_has_poolname();
  inline void set_has_ownername();
  inline void clear_has_ownername();
  inline void set_has_groupname();
  inline void clear_has_groupname();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_maxrelativeexpiry();
  inline void clear_has_maxrelativeexpiry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* poolname_;
  ::std::string* ownername_;
  ::std::string* groupname_;
  ::google::protobuf::int64 limit_;
  ::google::protobuf::int64 maxrelativeexpiry_;
  ::google::protobuf::int32 mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CachePoolInfoProto* default_instance_;
};
// -------------------------------------------------------------------

class CachePoolStatsProto : public ::google::protobuf::Message {
 public:
  CachePoolStatsProto();
  virtual ~CachePoolStatsProto();

  CachePoolStatsProto(const CachePoolStatsProto& from);

  inline CachePoolStatsProto& operator=(const CachePoolStatsProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CachePoolStatsProto& default_instance();

  void Swap(CachePoolStatsProto* other);

  // implements Message ----------------------------------------------

  CachePoolStatsProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CachePoolStatsProto& from);
  void MergeFrom(const CachePoolStatsProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 bytesNeeded = 1;
  inline bool has_bytesneeded() const;
  inline void clear_bytesneeded();
  static const int kBytesNeededFieldNumber = 1;
  inline ::google::protobuf::int64 bytesneeded() const;
  inline void set_bytesneeded(::google::protobuf::int64 value);

  // required int64 bytesCached = 2;
  inline bool has_bytescached() const;
  inline void clear_bytescached();
  static const int kBytesCachedFieldNumber = 2;
  inline ::google::protobuf::int64 bytescached() const;
  inline void set_bytescached(::google::protobuf::int64 value);

  // required int64 bytesOverlimit = 3;
  inline bool has_bytesoverlimit() const;
  inline void clear_bytesoverlimit();
  static const int kBytesOverlimitFieldNumber = 3;
  inline ::google::protobuf::int64 bytesoverlimit() const;
  inline void set_bytesoverlimit(::google::protobuf::int64 value);

  // required int64 filesNeeded = 4;
  inline bool has_filesneeded() const;
  inline void clear_filesneeded();
  static const int kFilesNeededFieldNumber = 4;
  inline ::google::protobuf::int64 filesneeded() const;
  inline void set_filesneeded(::google::protobuf::int64 value);

  // required int64 filesCached = 5;
  inline bool has_filescached() const;
  inline void clear_filescached();
  static const int kFilesCachedFieldNumber = 5;
  inline ::google::protobuf::int64 filescached() const;
  inline void set_filescached(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CachePoolStatsProto)
 private:
  inline void set_has_bytesneeded();
  inline void clear_has_bytesneeded();
  inline void set_has_bytescached();
  inline void clear_has_bytescached();
  inline void set_has_bytesoverlimit();
  inline void clear_has_bytesoverlimit();
  inline void set_has_filesneeded();
  inline void clear_has_filesneeded();
  inline void set_has_filescached();
  inline void clear_has_filescached();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bytesneeded_;
  ::google::protobuf::int64 bytescached_;
  ::google::protobuf::int64 bytesoverlimit_;
  ::google::protobuf::int64 filesneeded_;
  ::google::protobuf::int64 filescached_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CachePoolStatsProto* default_instance_;
};
// -------------------------------------------------------------------

class AddCachePoolRequestProto : public ::google::protobuf::Message {
 public:
  AddCachePoolRequestProto();
  virtual ~AddCachePoolRequestProto();

  AddCachePoolRequestProto(const AddCachePoolRequestProto& from);

  inline AddCachePoolRequestProto& operator=(const AddCachePoolRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddCachePoolRequestProto& default_instance();

  void Swap(AddCachePoolRequestProto* other);

  // implements Message ----------------------------------------------

  AddCachePoolRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddCachePoolRequestProto& from);
  void MergeFrom(const AddCachePoolRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Hdfs::Internal::CachePoolInfoProto& info() const;
  inline ::Hdfs::Internal::CachePoolInfoProto* mutable_info();
  inline ::Hdfs::Internal::CachePoolInfoProto* release_info();
  inline void set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddCachePoolRequestProto)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::CachePoolInfoProto* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AddCachePoolRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class AddCachePoolResponseProto : public ::google::protobuf::Message {
 public:
  AddCachePoolResponseProto();
  virtual ~AddCachePoolResponseProto();

  AddCachePoolResponseProto(const AddCachePoolResponseProto& from);

  inline AddCachePoolResponseProto& operator=(const AddCachePoolResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddCachePoolResponseProto& default_instance();

  void Swap(AddCachePoolResponseProto* other);

  // implements Message ----------------------------------------------

  AddCachePoolResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddCachePoolResponseProto& from);
  void MergeFrom(const AddCachePoolResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AddCachePoolResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AddCachePoolResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class ModifyCachePoolRequestProto : public ::google::protobuf::Message {
 public:
  ModifyCachePoolRequestProto();
  virtual ~ModifyCachePoolRequestProto();

  ModifyCachePoolRequestProto(const ModifyCachePoolRequestProto& from);

  inline ModifyCachePoolRequestProto& operator=(const ModifyCachePoolRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyCachePoolRequestProto& default_instance();

  void Swap(ModifyCachePoolRequestProto* other);

  // implements Message ----------------------------------------------

  ModifyCachePoolRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyCachePoolRequestProto& from);
  void MergeFrom(const ModifyCachePoolRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Hdfs::Internal::CachePoolInfoProto& info() const;
  inline ::Hdfs::Internal::CachePoolInfoProto* mutable_info();
  inline ::Hdfs::Internal::CachePoolInfoProto* release_info();
  inline void set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ModifyCachePoolRequestProto)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::CachePoolInfoProto* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ModifyCachePoolRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class ModifyCachePoolResponseProto : public ::google::protobuf::Message {
 public:
  ModifyCachePoolResponseProto();
  virtual ~ModifyCachePoolResponseProto();

  ModifyCachePoolResponseProto(const ModifyCachePoolResponseProto& from);

  inline ModifyCachePoolResponseProto& operator=(const ModifyCachePoolResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyCachePoolResponseProto& default_instance();

  void Swap(ModifyCachePoolResponseProto* other);

  // implements Message ----------------------------------------------

  ModifyCachePoolResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ModifyCachePoolResponseProto& from);
  void MergeFrom(const ModifyCachePoolResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ModifyCachePoolResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ModifyCachePoolResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class RemoveCachePoolRequestProto : public ::google::protobuf::Message {
 public:
  RemoveCachePoolRequestProto();
  virtual ~RemoveCachePoolRequestProto();

  RemoveCachePoolRequestProto(const RemoveCachePoolRequestProto& from);

  inline RemoveCachePoolRequestProto& operator=(const RemoveCachePoolRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveCachePoolRequestProto& default_instance();

  void Swap(RemoveCachePoolRequestProto* other);

  // implements Message ----------------------------------------------

  RemoveCachePoolRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveCachePoolRequestProto& from);
  void MergeFrom(const RemoveCachePoolRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string poolName = 1;
  inline bool has_poolname() const;
  inline void clear_poolname();
  static const int kPoolNameFieldNumber = 1;
  inline const ::std::string& poolname() const;
  inline void set_poolname(const ::std::string& value);
  inline void set_poolname(const char* value);
  inline void set_poolname(const char* value, size_t size);
  inline ::std::string* mutable_poolname();
  inline ::std::string* release_poolname();
  inline void set_allocated_poolname(::std::string* poolname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RemoveCachePoolRequestProto)
 private:
  inline void set_has_poolname();
  inline void clear_has_poolname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* poolname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RemoveCachePoolRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class RemoveCachePoolResponseProto : public ::google::protobuf::Message {
 public:
  RemoveCachePoolResponseProto();
  virtual ~RemoveCachePoolResponseProto();

  RemoveCachePoolResponseProto(const RemoveCachePoolResponseProto& from);

  inline RemoveCachePoolResponseProto& operator=(const RemoveCachePoolResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveCachePoolResponseProto& default_instance();

  void Swap(RemoveCachePoolResponseProto* other);

  // implements Message ----------------------------------------------

  RemoveCachePoolResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoveCachePoolResponseProto& from);
  void MergeFrom(const RemoveCachePoolResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RemoveCachePoolResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RemoveCachePoolResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class ListCachePoolsRequestProto : public ::google::protobuf::Message {
 public:
  ListCachePoolsRequestProto();
  virtual ~ListCachePoolsRequestProto();

  ListCachePoolsRequestProto(const ListCachePoolsRequestProto& from);

  inline ListCachePoolsRequestProto& operator=(const ListCachePoolsRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCachePoolsRequestProto& default_instance();

  void Swap(ListCachePoolsRequestProto* other);

  // implements Message ----------------------------------------------

  ListCachePoolsRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListCachePoolsRequestProto& from);
  void MergeFrom(const ListCachePoolsRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string prevPoolName = 1;
  inline bool has_prevpoolname() const;
  inline void clear_prevpoolname();
  static const int kPrevPoolNameFieldNumber = 1;
  inline const ::std::string& prevpoolname() const;
  inline void set_prevpoolname(const ::std::string& value);
  inline void set_prevpoolname(const char* value);
  inline void set_prevpoolname(const char* value, size_t size);
  inline ::std::string* mutable_prevpoolname();
  inline ::std::string* release_prevpoolname();
  inline void set_allocated_prevpoolname(::std::string* prevpoolname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCachePoolsRequestProto)
 private:
  inline void set_has_prevpoolname();
  inline void clear_has_prevpoolname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* prevpoolname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ListCachePoolsRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class ListCachePoolsResponseProto : public ::google::protobuf::Message {
 public:
  ListCachePoolsResponseProto();
  virtual ~ListCachePoolsResponseProto();

  ListCachePoolsResponseProto(const ListCachePoolsResponseProto& from);

  inline ListCachePoolsResponseProto& operator=(const ListCachePoolsResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListCachePoolsResponseProto& default_instance();

  void Swap(ListCachePoolsResponseProto* other);

  // implements Message ----------------------------------------------

  ListCachePoolsResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListCachePoolsResponseProto& from);
  void MergeFrom(const ListCachePoolsResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 1;
  inline const ::Hdfs::Internal::CachePoolEntryProto& entries(int index) const;
  inline ::Hdfs::Internal::CachePoolEntryProto* mutable_entries(int index);
  inline ::Hdfs::Internal::CachePoolEntryProto* add_entries();
  inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto >&
      entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto >*
      mutable_entries();

  // required bool hasMore = 2;
  inline bool has_hasmore() const;
  inline void clear_hasmore();
  static const int kHasMoreFieldNumber = 2;
  inline bool hasmore() const;
  inline void set_hasmore(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.ListCachePoolsResponseProto)
 private:
  inline void set_has_hasmore();
  inline void clear_has_hasmore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto > entries_;
  bool hasmore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static ListCachePoolsResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class CachePoolEntryProto : public ::google::protobuf::Message {
 public:
  CachePoolEntryProto();
  virtual ~CachePoolEntryProto();

  CachePoolEntryProto(const CachePoolEntryProto& from);

  inline CachePoolEntryProto& operator=(const CachePoolEntryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CachePoolEntryProto& default_instance();

  void Swap(CachePoolEntryProto* other);

  // implements Message ----------------------------------------------

  CachePoolEntryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CachePoolEntryProto& from);
  void MergeFrom(const CachePoolEntryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::Hdfs::Internal::CachePoolInfoProto& info() const;
  inline ::Hdfs::Internal::CachePoolInfoProto* mutable_info();
  inline ::Hdfs::Internal::CachePoolInfoProto* release_info();
  inline void set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info);

  // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
  inline bool has_stats() const;
  inline void clear_stats();
  static const int kStatsFieldNumber = 2;
  inline const ::Hdfs::Internal::CachePoolStatsProto& stats() const;
  inline ::Hdfs::Internal::CachePoolStatsProto* mutable_stats();
  inline ::Hdfs::Internal::CachePoolStatsProto* release_stats();
  inline void set_allocated_stats(::Hdfs::Internal::CachePoolStatsProto* stats);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CachePoolEntryProto)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_stats();
  inline void clear_has_stats();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::CachePoolInfoProto* info_;
  ::Hdfs::Internal::CachePoolStatsProto* stats_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CachePoolEntryProto* default_instance_;
};
// -------------------------------------------------------------------

class GetFileLinkInfoRequestProto : public ::google::protobuf::Message {
 public:
  GetFileLinkInfoRequestProto();
  virtual ~GetFileLinkInfoRequestProto();

  GetFileLinkInfoRequestProto(const GetFileLinkInfoRequestProto& from);

  inline GetFileLinkInfoRequestProto& operator=(const GetFileLinkInfoRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileLinkInfoRequestProto& default_instance();

  void Swap(GetFileLinkInfoRequestProto* other);

  // implements Message ----------------------------------------------

  GetFileLinkInfoRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFileLinkInfoRequestProto& from);
  void MergeFrom(const GetFileLinkInfoRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFileLinkInfoRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetFileLinkInfoRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetFileLinkInfoResponseProto : public ::google::protobuf::Message {
 public:
  GetFileLinkInfoResponseProto();
  virtual ~GetFileLinkInfoResponseProto();

  GetFileLinkInfoResponseProto(const GetFileLinkInfoResponseProto& from);

  inline GetFileLinkInfoResponseProto& operator=(const GetFileLinkInfoResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileLinkInfoResponseProto& default_instance();

  void Swap(GetFileLinkInfoResponseProto* other);

  // implements Message ----------------------------------------------

  GetFileLinkInfoResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFileLinkInfoResponseProto& from);
  void MergeFrom(const GetFileLinkInfoResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  inline bool has_fs() const;
  inline void clear_fs();
  static const int kFsFieldNumber = 1;
  inline const ::Hdfs::Internal::HdfsFileStatusProto& fs() const;
  inline ::Hdfs::Internal::HdfsFileStatusProto* mutable_fs();
  inline ::Hdfs::Internal::HdfsFileStatusProto* release_fs();
  inline void set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetFileLinkInfoResponseProto)
 private:
  inline void set_has_fs();
  inline void clear_has_fs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::HdfsFileStatusProto* fs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetFileLinkInfoResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetContentSummaryRequestProto : public ::google::protobuf::Message {
 public:
  GetContentSummaryRequestProto();
  virtual ~GetContentSummaryRequestProto();

  GetContentSummaryRequestProto(const GetContentSummaryRequestProto& from);

  inline GetContentSummaryRequestProto& operator=(const GetContentSummaryRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContentSummaryRequestProto& default_instance();

  void Swap(GetContentSummaryRequestProto* other);

  // implements Message ----------------------------------------------

  GetContentSummaryRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetContentSummaryRequestProto& from);
  void MergeFrom(const GetContentSummaryRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetContentSummaryRequestProto)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetContentSummaryRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetContentSummaryResponseProto : public ::google::protobuf::Message {
 public:
  GetContentSummaryResponseProto();
  virtual ~GetContentSummaryResponseProto();

  GetContentSummaryResponseProto(const GetContentSummaryResponseProto& from);

  inline GetContentSummaryResponseProto& operator=(const GetContentSummaryResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetContentSummaryResponseProto& default_instance();

  void Swap(GetContentSummaryResponseProto* other);

  // implements Message ----------------------------------------------

  GetContentSummaryResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetContentSummaryResponseProto& from);
  void MergeFrom(const GetContentSummaryResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.ContentSummaryProto summary = 1;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 1;
  inline const ::Hdfs::Internal::ContentSummaryProto& summary() const;
  inline ::Hdfs::Internal::ContentSummaryProto* mutable_summary();
  inline ::Hdfs::Internal::ContentSummaryProto* release_summary();
  inline void set_allocated_summary(::Hdfs::Internal::ContentSummaryProto* summary);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetContentSummaryResponseProto)
 private:
  inline void set_has_summary();
  inline void clear_has_summary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::ContentSummaryProto* summary_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetContentSummaryResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class SetQuotaRequestProto : public ::google::protobuf::Message {
 public:
  SetQuotaRequestProto();
  virtual ~SetQuotaRequestProto();

  SetQuotaRequestProto(const SetQuotaRequestProto& from);

  inline SetQuotaRequestProto& operator=(const SetQuotaRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetQuotaRequestProto& default_instance();

  void Swap(SetQuotaRequestProto* other);

  // implements Message ----------------------------------------------

  SetQuotaRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetQuotaRequestProto& from);
  void MergeFrom(const SetQuotaRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // required uint64 namespaceQuota = 2;
  inline bool has_namespacequota() const;
  inline void clear_namespacequota();
  static const int kNamespaceQuotaFieldNumber = 2;
  inline ::google::protobuf::uint64 namespacequota() const;
  inline void set_namespacequota(::google::protobuf::uint64 value);

  // required uint64 diskspaceQuota = 3;
  inline bool has_diskspacequota() const;
  inline void clear_diskspacequota();
  static const int kDiskspaceQuotaFieldNumber = 3;
  inline ::google::protobuf::uint64 diskspacequota() const;
  inline void set_diskspacequota(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetQuotaRequestProto)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_namespacequota();
  inline void clear_has_namespacequota();
  inline void set_has_diskspacequota();
  inline void clear_has_diskspacequota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::google::protobuf::uint64 namespacequota_;
  ::google::protobuf::uint64 diskspacequota_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetQuotaRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class SetQuotaResponseProto : public ::google::protobuf::Message {
 public:
  SetQuotaResponseProto();
  virtual ~SetQuotaResponseProto();

  SetQuotaResponseProto(const SetQuotaResponseProto& from);

  inline SetQuotaResponseProto& operator=(const SetQuotaResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetQuotaResponseProto& default_instance();

  void Swap(SetQuotaResponseProto* other);

  // implements Message ----------------------------------------------

  SetQuotaResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetQuotaResponseProto& from);
  void MergeFrom(const SetQuotaResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetQuotaResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetQuotaResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class FsyncRequestProto : public ::google::protobuf::Message {
 public:
  FsyncRequestProto();
  virtual ~FsyncRequestProto();

  FsyncRequestProto(const FsyncRequestProto& from);

  inline FsyncRequestProto& operator=(const FsyncRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FsyncRequestProto& default_instance();

  void Swap(FsyncRequestProto* other);

  // implements Message ----------------------------------------------

  FsyncRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FsyncRequestProto& from);
  void MergeFrom(const FsyncRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string client = 2;
  inline bool has_client() const;
  inline void clear_client();
  static const int kClientFieldNumber = 2;
  inline const ::std::string& client() const;
  inline void set_client(const ::std::string& value);
  inline void set_client(const char* value);
  inline void set_client(const char* value, size_t size);
  inline ::std::string* mutable_client();
  inline ::std::string* release_client();
  inline void set_allocated_client(::std::string* client);

  // optional sint64 lastBlockLength = 3 [default = -1];
  inline bool has_lastblocklength() const;
  inline void clear_lastblocklength();
  static const int kLastBlockLengthFieldNumber = 3;
  inline ::google::protobuf::int64 lastblocklength() const;
  inline void set_lastblocklength(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.FsyncRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_client();
  inline void clear_has_client();
  inline void set_has_lastblocklength();
  inline void clear_has_lastblocklength();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::std::string* client_;
  ::google::protobuf::int64 lastblocklength_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static FsyncRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class FsyncResponseProto : public ::google::protobuf::Message {
 public:
  FsyncResponseProto();
  virtual ~FsyncResponseProto();

  FsyncResponseProto(const FsyncResponseProto& from);

  inline FsyncResponseProto& operator=(const FsyncResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FsyncResponseProto& default_instance();

  void Swap(FsyncResponseProto* other);

  // implements Message ----------------------------------------------

  FsyncResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FsyncResponseProto& from);
  void MergeFrom(const FsyncResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.FsyncResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static FsyncResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class SetTimesRequestProto : public ::google::protobuf::Message {
 public:
  SetTimesRequestProto();
  virtual ~SetTimesRequestProto();

  SetTimesRequestProto(const SetTimesRequestProto& from);

  inline SetTimesRequestProto& operator=(const SetTimesRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTimesRequestProto& default_instance();

  void Swap(SetTimesRequestProto* other);

  // implements Message ----------------------------------------------

  SetTimesRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetTimesRequestProto& from);
  void MergeFrom(const SetTimesRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required uint64 mtime = 2;
  inline bool has_mtime() const;
  inline void clear_mtime();
  static const int kMtimeFieldNumber = 2;
  inline ::google::protobuf::uint64 mtime() const;
  inline void set_mtime(::google::protobuf::uint64 value);

  // required uint64 atime = 3;
  inline bool has_atime() const;
  inline void clear_atime();
  static const int kAtimeFieldNumber = 3;
  inline ::google::protobuf::uint64 atime() const;
  inline void set_atime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetTimesRequestProto)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_mtime();
  inline void clear_has_mtime();
  inline void set_has_atime();
  inline void clear_has_atime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* src_;
  ::google::protobuf::uint64 mtime_;
  ::google::protobuf::uint64 atime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetTimesRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class SetTimesResponseProto : public ::google::protobuf::Message {
 public:
  SetTimesResponseProto();
  virtual ~SetTimesResponseProto();

  SetTimesResponseProto(const SetTimesResponseProto& from);

  inline SetTimesResponseProto& operator=(const SetTimesResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTimesResponseProto& default_instance();

  void Swap(SetTimesResponseProto* other);

  // implements Message ----------------------------------------------

  SetTimesResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetTimesResponseProto& from);
  void MergeFrom(const SetTimesResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetTimesResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetTimesResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class CreateSymlinkRequestProto : public ::google::protobuf::Message {
 public:
  CreateSymlinkRequestProto();
  virtual ~CreateSymlinkRequestProto();

  CreateSymlinkRequestProto(const CreateSymlinkRequestProto& from);

  inline CreateSymlinkRequestProto& operator=(const CreateSymlinkRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSymlinkRequestProto& default_instance();

  void Swap(CreateSymlinkRequestProto* other);

  // implements Message ----------------------------------------------

  CreateSymlinkRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSymlinkRequestProto& from);
  void MergeFrom(const CreateSymlinkRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string target = 1;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 1;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // required string link = 2;
  inline bool has_link() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 2;
  inline const ::std::string& link() const;
  inline void set_link(const ::std::string& value);
  inline void set_link(const char* value);
  inline void set_link(const char* value, size_t size);
  inline ::std::string* mutable_link();
  inline ::std::string* release_link();
  inline void set_allocated_link(::std::string* link);

  // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
  inline bool has_dirperm() const;
  inline void clear_dirperm();
  static const int kDirPermFieldNumber = 3;
  inline const ::Hdfs::Internal::FsPermissionProto& dirperm() const;
  inline ::Hdfs::Internal::FsPermissionProto* mutable_dirperm();
  inline ::Hdfs::Internal::FsPermissionProto* release_dirperm();
  inline void set_allocated_dirperm(::Hdfs::Internal::FsPermissionProto* dirperm);

  // required bool createParent = 4;
  inline bool has_createparent() const;
  inline void clear_createparent();
  static const int kCreateParentFieldNumber = 4;
  inline bool createparent() const;
  inline void set_createparent(bool value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateSymlinkRequestProto)
 private:
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_link();
  inline void clear_has_link();
  inline void set_has_dirperm();
  inline void clear_has_dirperm();
  inline void set_has_createparent();
  inline void clear_has_createparent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* target_;
  ::std::string* link_;
  ::Hdfs::Internal::FsPermissionProto* dirperm_;
  bool createparent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CreateSymlinkRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class CreateSymlinkResponseProto : public ::google::protobuf::Message {
 public:
  CreateSymlinkResponseProto();
  virtual ~CreateSymlinkResponseProto();

  CreateSymlinkResponseProto(const CreateSymlinkResponseProto& from);

  inline CreateSymlinkResponseProto& operator=(const CreateSymlinkResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSymlinkResponseProto& default_instance();

  void Swap(CreateSymlinkResponseProto* other);

  // implements Message ----------------------------------------------

  CreateSymlinkResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSymlinkResponseProto& from);
  void MergeFrom(const CreateSymlinkResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateSymlinkResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CreateSymlinkResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetLinkTargetRequestProto : public ::google::protobuf::Message {
 public:
  GetLinkTargetRequestProto();
  virtual ~GetLinkTargetRequestProto();

  GetLinkTargetRequestProto(const GetLinkTargetRequestProto& from);

  inline GetLinkTargetRequestProto& operator=(const GetLinkTargetRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLinkTargetRequestProto& default_instance();

  void Swap(GetLinkTargetRequestProto* other);

  // implements Message ----------------------------------------------

  GetLinkTargetRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLinkTargetRequestProto& from);
  void MergeFrom(const GetLinkTargetRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetLinkTargetRequestProto)
 private:
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetLinkTargetRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetLinkTargetResponseProto : public ::google::protobuf::Message {
 public:
  GetLinkTargetResponseProto();
  virtual ~GetLinkTargetResponseProto();

  GetLinkTargetResponseProto(const GetLinkTargetResponseProto& from);

  inline GetLinkTargetResponseProto& operator=(const GetLinkTargetResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetLinkTargetResponseProto& default_instance();

  void Swap(GetLinkTargetResponseProto* other);

  // implements Message ----------------------------------------------

  GetLinkTargetResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetLinkTargetResponseProto& from);
  void MergeFrom(const GetLinkTargetResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string targetPath = 1;
  inline bool has_targetpath() const;
  inline void clear_targetpath();
  static const int kTargetPathFieldNumber = 1;
  inline const ::std::string& targetpath() const;
  inline void set_targetpath(const ::std::string& value);
  inline void set_targetpath(const char* value);
  inline void set_targetpath(const char* value, size_t size);
  inline ::std::string* mutable_targetpath();
  inline ::std::string* release_targetpath();
  inline void set_allocated_targetpath(::std::string* targetpath);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetLinkTargetResponseProto)
 private:
  inline void set_has_targetpath();
  inline void clear_has_targetpath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* targetpath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetLinkTargetResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class UpdateBlockForPipelineRequestProto : public ::google::protobuf::Message {
 public:
  UpdateBlockForPipelineRequestProto();
  virtual ~UpdateBlockForPipelineRequestProto();

  UpdateBlockForPipelineRequestProto(const UpdateBlockForPipelineRequestProto& from);

  inline UpdateBlockForPipelineRequestProto& operator=(const UpdateBlockForPipelineRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateBlockForPipelineRequestProto& default_instance();

  void Swap(UpdateBlockForPipelineRequestProto* other);

  // implements Message ----------------------------------------------

  UpdateBlockForPipelineRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateBlockForPipelineRequestProto& from);
  void MergeFrom(const UpdateBlockForPipelineRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.ExtendedBlockProto block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::Hdfs::Internal::ExtendedBlockProto& block() const;
  inline ::Hdfs::Internal::ExtendedBlockProto* mutable_block();
  inline ::Hdfs::Internal::ExtendedBlockProto* release_block();
  inline void set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block);

  // required string clientName = 2;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 2;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.UpdateBlockForPipelineRequestProto)
 private:
  inline void set_has_block();
  inline void clear_has_block();
  inline void set_has_clientname();
  inline void clear_has_clientname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::ExtendedBlockProto* block_;
  ::std::string* clientname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static UpdateBlockForPipelineRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class UpdateBlockForPipelineResponseProto : public ::google::protobuf::Message {
 public:
  UpdateBlockForPipelineResponseProto();
  virtual ~UpdateBlockForPipelineResponseProto();

  UpdateBlockForPipelineResponseProto(const UpdateBlockForPipelineResponseProto& from);

  inline UpdateBlockForPipelineResponseProto& operator=(const UpdateBlockForPipelineResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateBlockForPipelineResponseProto& default_instance();

  void Swap(UpdateBlockForPipelineResponseProto* other);

  // implements Message ----------------------------------------------

  UpdateBlockForPipelineResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateBlockForPipelineResponseProto& from);
  void MergeFrom(const UpdateBlockForPipelineResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::Hdfs::Internal::LocatedBlockProto& block() const;
  inline ::Hdfs::Internal::LocatedBlockProto* mutable_block();
  inline ::Hdfs::Internal::LocatedBlockProto* release_block();
  inline void set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.UpdateBlockForPipelineResponseProto)
 private:
  inline void set_has_block();
  inline void clear_has_block();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::LocatedBlockProto* block_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static UpdateBlockForPipelineResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePipelineRequestProto : public ::google::protobuf::Message {
 public:
  UpdatePipelineRequestProto();
  virtual ~UpdatePipelineRequestProto();

  UpdatePipelineRequestProto(const UpdatePipelineRequestProto& from);

  inline UpdatePipelineRequestProto& operator=(const UpdatePipelineRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePipelineRequestProto& default_instance();

  void Swap(UpdatePipelineRequestProto* other);

  // implements Message ----------------------------------------------

  UpdatePipelineRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePipelineRequestProto& from);
  void MergeFrom(const UpdatePipelineRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string clientName = 1;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 1;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  inline void set_allocated_clientname(::std::string* clientname);

  // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
  inline bool has_oldblock() const;
  inline void clear_oldblock();
  static const int kOldBlockFieldNumber = 2;
  inline const ::Hdfs::Internal::ExtendedBlockProto& oldblock() const;
  inline ::Hdfs::Internal::ExtendedBlockProto* mutable_oldblock();
  inline ::Hdfs::Internal::ExtendedBlockProto* release_oldblock();
  inline void set_allocated_oldblock(::Hdfs::Internal::ExtendedBlockProto* oldblock);

  // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
  inline bool has_newblock() const;
  inline void clear_newblock();
  static const int kNewBlockFieldNumber = 3;
  inline const ::Hdfs::Internal::ExtendedBlockProto& newblock() const;
  inline ::Hdfs::Internal::ExtendedBlockProto* mutable_newblock();
  inline ::Hdfs::Internal::ExtendedBlockProto* release_newblock();
  inline void set_allocated_newblock(::Hdfs::Internal::ExtendedBlockProto* newblock);

  // repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
  inline int newnodes_size() const;
  inline void clear_newnodes();
  static const int kNewNodesFieldNumber = 4;
  inline const ::Hdfs::Internal::DatanodeIDProto& newnodes(int index) const;
  inline ::Hdfs::Internal::DatanodeIDProto* mutable_newnodes(int index);
  inline ::Hdfs::Internal::DatanodeIDProto* add_newnodes();
  inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto >&
      newnodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto >*
      mutable_newnodes();

  // repeated string storageIDs = 5;
  inline int storageids_size() const;
  inline void clear_storageids();
  static const int kStorageIDsFieldNumber = 5;
  inline const ::std::string& storageids(int index) const;
  inline ::std::string* mutable_storageids(int index);
  inline void set_storageids(int index, const ::std::string& value);
  inline void set_storageids(int index, const char* value);
  inline void set_storageids(int index, const char* value, size_t size);
  inline ::std::string* add_storageids();
  inline void add_storageids(const ::std::string& value);
  inline void add_storageids(const char* value);
  inline void add_storageids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& storageids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_storageids();

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.UpdatePipelineRequestProto)
 private:
  inline void set_has_clientname();
  inline void clear_has_clientname();
  inline void set_has_oldblock();
  inline void clear_has_oldblock();
  inline void set_has_newblock();
  inline void clear_has_newblock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientname_;
  ::Hdfs::Internal::ExtendedBlockProto* oldblock_;
  ::Hdfs::Internal::ExtendedBlockProto* newblock_;
  ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto > newnodes_;
  ::google::protobuf::RepeatedPtrField< ::std::string> storageids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static UpdatePipelineRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePipelineResponseProto : public ::google::protobuf::Message {
 public:
  UpdatePipelineResponseProto();
  virtual ~UpdatePipelineResponseProto();

  UpdatePipelineResponseProto(const UpdatePipelineResponseProto& from);

  inline UpdatePipelineResponseProto& operator=(const UpdatePipelineResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePipelineResponseProto& default_instance();

  void Swap(UpdatePipelineResponseProto* other);

  // implements Message ----------------------------------------------

  UpdatePipelineResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePipelineResponseProto& from);
  void MergeFrom(const UpdatePipelineResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.UpdatePipelineResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static UpdatePipelineResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class SetBalancerBandwidthRequestProto : public ::google::protobuf::Message {
 public:
  SetBalancerBandwidthRequestProto();
  virtual ~SetBalancerBandwidthRequestProto();

  SetBalancerBandwidthRequestProto(const SetBalancerBandwidthRequestProto& from);

  inline SetBalancerBandwidthRequestProto& operator=(const SetBalancerBandwidthRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBalancerBandwidthRequestProto& default_instance();

  void Swap(SetBalancerBandwidthRequestProto* other);

  // implements Message ----------------------------------------------

  SetBalancerBandwidthRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetBalancerBandwidthRequestProto& from);
  void MergeFrom(const SetBalancerBandwidthRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 bandwidth = 1;
  inline bool has_bandwidth() const;
  inline void clear_bandwidth();
  static const int kBandwidthFieldNumber = 1;
  inline ::google::protobuf::int64 bandwidth() const;
  inline void set_bandwidth(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetBalancerBandwidthRequestProto)
 private:
  inline void set_has_bandwidth();
  inline void clear_has_bandwidth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bandwidth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetBalancerBandwidthRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class SetBalancerBandwidthResponseProto : public ::google::protobuf::Message {
 public:
  SetBalancerBandwidthResponseProto();
  virtual ~SetBalancerBandwidthResponseProto();

  SetBalancerBandwidthResponseProto(const SetBalancerBandwidthResponseProto& from);

  inline SetBalancerBandwidthResponseProto& operator=(const SetBalancerBandwidthResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetBalancerBandwidthResponseProto& default_instance();

  void Swap(SetBalancerBandwidthResponseProto* other);

  // implements Message ----------------------------------------------

  SetBalancerBandwidthResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetBalancerBandwidthResponseProto& from);
  void MergeFrom(const SetBalancerBandwidthResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.SetBalancerBandwidthResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetBalancerBandwidthResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class GetDataEncryptionKeyRequestProto : public ::google::protobuf::Message {
 public:
  GetDataEncryptionKeyRequestProto();
  virtual ~GetDataEncryptionKeyRequestProto();

  GetDataEncryptionKeyRequestProto(const GetDataEncryptionKeyRequestProto& from);

  inline GetDataEncryptionKeyRequestProto& operator=(const GetDataEncryptionKeyRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDataEncryptionKeyRequestProto& default_instance();

  void Swap(GetDataEncryptionKeyRequestProto* other);

  // implements Message ----------------------------------------------

  GetDataEncryptionKeyRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDataEncryptionKeyRequestProto& from);
  void MergeFrom(const GetDataEncryptionKeyRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDataEncryptionKeyRequestProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetDataEncryptionKeyRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class GetDataEncryptionKeyResponseProto : public ::google::protobuf::Message {
 public:
  GetDataEncryptionKeyResponseProto();
  virtual ~GetDataEncryptionKeyResponseProto();

  GetDataEncryptionKeyResponseProto(const GetDataEncryptionKeyResponseProto& from);

  inline GetDataEncryptionKeyResponseProto& operator=(const GetDataEncryptionKeyResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDataEncryptionKeyResponseProto& default_instance();

  void Swap(GetDataEncryptionKeyResponseProto* other);

  // implements Message ----------------------------------------------

  GetDataEncryptionKeyResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDataEncryptionKeyResponseProto& from);
  void MergeFrom(const GetDataEncryptionKeyResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
  inline bool has_dataencryptionkey() const;
  inline void clear_dataencryptionkey();
  static const int kDataEncryptionKeyFieldNumber = 1;
  inline const ::Hdfs::Internal::DataEncryptionKeyProto& dataencryptionkey() const;
  inline ::Hdfs::Internal::DataEncryptionKeyProto* mutable_dataencryptionkey();
  inline ::Hdfs::Internal::DataEncryptionKeyProto* release_dataencryptionkey();
  inline void set_allocated_dataencryptionkey(::Hdfs::Internal::DataEncryptionKeyProto* dataencryptionkey);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.GetDataEncryptionKeyResponseProto)
 private:
  inline void set_has_dataencryptionkey();
  inline void clear_has_dataencryptionkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Hdfs::Internal::DataEncryptionKeyProto* dataencryptionkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static GetDataEncryptionKeyResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class CreateSnapshotRequestProto : public ::google::protobuf::Message {
 public:
  CreateSnapshotRequestProto();
  virtual ~CreateSnapshotRequestProto();

  CreateSnapshotRequestProto(const CreateSnapshotRequestProto& from);

  inline CreateSnapshotRequestProto& operator=(const CreateSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSnapshotRequestProto& default_instance();

  void Swap(CreateSnapshotRequestProto* other);

  // implements Message ----------------------------------------------

  CreateSnapshotRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSnapshotRequestProto& from);
  void MergeFrom(const CreateSnapshotRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snapshotRoot = 1;
  inline bool has_snapshotroot() const;
  inline void clear_snapshotroot();
  static const int kSnapshotRootFieldNumber = 1;
  inline const ::std::string& snapshotroot() const;
  inline void set_snapshotroot(const ::std::string& value);
  inline void set_snapshotroot(const char* value);
  inline void set_snapshotroot(const char* value, size_t size);
  inline ::std::string* mutable_snapshotroot();
  inline ::std::string* release_snapshotroot();
  inline void set_allocated_snapshotroot(::std::string* snapshotroot);

  // optional string snapshotName = 2;
  inline bool has_snapshotname() const;
  inline void clear_snapshotname();
  static const int kSnapshotNameFieldNumber = 2;
  inline const ::std::string& snapshotname() const;
  inline void set_snapshotname(const ::std::string& value);
  inline void set_snapshotname(const char* value);
  inline void set_snapshotname(const char* value, size_t size);
  inline ::std::string* mutable_snapshotname();
  inline ::std::string* release_snapshotname();
  inline void set_allocated_snapshotname(::std::string* snapshotname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateSnapshotRequestProto)
 private:
  inline void set_has_snapshotroot();
  inline void clear_has_snapshotroot();
  inline void set_has_snapshotname();
  inline void clear_has_snapshotname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* snapshotroot_;
  ::std::string* snapshotname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CreateSnapshotRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class CreateSnapshotResponseProto : public ::google::protobuf::Message {
 public:
  CreateSnapshotResponseProto();
  virtual ~CreateSnapshotResponseProto();

  CreateSnapshotResponseProto(const CreateSnapshotResponseProto& from);

  inline CreateSnapshotResponseProto& operator=(const CreateSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSnapshotResponseProto& default_instance();

  void Swap(CreateSnapshotResponseProto* other);

  // implements Message ----------------------------------------------

  CreateSnapshotResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateSnapshotResponseProto& from);
  void MergeFrom(const CreateSnapshotResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snapshotPath = 1;
  inline bool has_snapshotpath() const;
  inline void clear_snapshotpath();
  static const int kSnapshotPathFieldNumber = 1;
  inline const ::std::string& snapshotpath() const;
  inline void set_snapshotpath(const ::std::string& value);
  inline void set_snapshotpath(const char* value);
  inline void set_snapshotpath(const char* value, size_t size);
  inline ::std::string* mutable_snapshotpath();
  inline ::std::string* release_snapshotpath();
  inline void set_allocated_snapshotpath(::std::string* snapshotpath);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.CreateSnapshotResponseProto)
 private:
  inline void set_has_snapshotpath();
  inline void clear_has_snapshotpath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* snapshotpath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static CreateSnapshotResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class RenameSnapshotRequestProto : public ::google::protobuf::Message {
 public:
  RenameSnapshotRequestProto();
  virtual ~RenameSnapshotRequestProto();

  RenameSnapshotRequestProto(const RenameSnapshotRequestProto& from);

  inline RenameSnapshotRequestProto& operator=(const RenameSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenameSnapshotRequestProto& default_instance();

  void Swap(RenameSnapshotRequestProto* other);

  // implements Message ----------------------------------------------

  RenameSnapshotRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenameSnapshotRequestProto& from);
  void MergeFrom(const RenameSnapshotRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snapshotRoot = 1;
  inline bool has_snapshotroot() const;
  inline void clear_snapshotroot();
  static const int kSnapshotRootFieldNumber = 1;
  inline const ::std::string& snapshotroot() const;
  inline void set_snapshotroot(const ::std::string& value);
  inline void set_snapshotroot(const char* value);
  inline void set_snapshotroot(const char* value, size_t size);
  inline ::std::string* mutable_snapshotroot();
  inline ::std::string* release_snapshotroot();
  inline void set_allocated_snapshotroot(::std::string* snapshotroot);

  // required string snapshotOldName = 2;
  inline bool has_snapshotoldname() const;
  inline void clear_snapshotoldname();
  static const int kSnapshotOldNameFieldNumber = 2;
  inline const ::std::string& snapshotoldname() const;
  inline void set_snapshotoldname(const ::std::string& value);
  inline void set_snapshotoldname(const char* value);
  inline void set_snapshotoldname(const char* value, size_t size);
  inline ::std::string* mutable_snapshotoldname();
  inline ::std::string* release_snapshotoldname();
  inline void set_allocated_snapshotoldname(::std::string* snapshotoldname);

  // required string snapshotNewName = 3;
  inline bool has_snapshotnewname() const;
  inline void clear_snapshotnewname();
  static const int kSnapshotNewNameFieldNumber = 3;
  inline const ::std::string& snapshotnewname() const;
  inline void set_snapshotnewname(const ::std::string& value);
  inline void set_snapshotnewname(const char* value);
  inline void set_snapshotnewname(const char* value, size_t size);
  inline ::std::string* mutable_snapshotnewname();
  inline ::std::string* release_snapshotnewname();
  inline void set_allocated_snapshotnewname(::std::string* snapshotnewname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenameSnapshotRequestProto)
 private:
  inline void set_has_snapshotroot();
  inline void clear_has_snapshotroot();
  inline void set_has_snapshotoldname();
  inline void clear_has_snapshotoldname();
  inline void set_has_snapshotnewname();
  inline void clear_has_snapshotnewname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* snapshotroot_;
  ::std::string* snapshotoldname_;
  ::std::string* snapshotnewname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RenameSnapshotRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class RenameSnapshotResponseProto : public ::google::protobuf::Message {
 public:
  RenameSnapshotResponseProto();
  virtual ~RenameSnapshotResponseProto();

  RenameSnapshotResponseProto(const RenameSnapshotResponseProto& from);

  inline RenameSnapshotResponseProto& operator=(const RenameSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RenameSnapshotResponseProto& default_instance();

  void Swap(RenameSnapshotResponseProto* other);

  // implements Message ----------------------------------------------

  RenameSnapshotResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RenameSnapshotResponseProto& from);
  void MergeFrom(const RenameSnapshotResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.RenameSnapshotResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static RenameSnapshotResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class AllowSnapshotRequestProto : public ::google::protobuf::Message {
 public:
  AllowSnapshotRequestProto();
  virtual ~AllowSnapshotRequestProto();

  AllowSnapshotRequestProto(const AllowSnapshotRequestProto& from);

  inline AllowSnapshotRequestProto& operator=(const AllowSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllowSnapshotRequestProto& default_instance();

  void Swap(AllowSnapshotRequestProto* other);

  // implements Message ----------------------------------------------

  AllowSnapshotRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllowSnapshotRequestProto& from);
  void MergeFrom(const AllowSnapshotRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snapshotRoot = 1;
  inline bool has_snapshotroot() const;
  inline void clear_snapshotroot();
  static const int kSnapshotRootFieldNumber = 1;
  inline const ::std::string& snapshotroot() const;
  inline void set_snapshotroot(const ::std::string& value);
  inline void set_snapshotroot(const char* value);
  inline void set_snapshotroot(const char* value, size_t size);
  inline ::std::string* mutable_snapshotroot();
  inline ::std::string* release_snapshotroot();
  inline void set_allocated_snapshotroot(::std::string* snapshotroot);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AllowSnapshotRequestProto)
 private:
  inline void set_has_snapshotroot();
  inline void clear_has_snapshotroot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* snapshotroot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllowSnapshotRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class AllowSnapshotResponseProto : public ::google::protobuf::Message {
 public:
  AllowSnapshotResponseProto();
  virtual ~AllowSnapshotResponseProto();

  AllowSnapshotResponseProto(const AllowSnapshotResponseProto& from);

  inline AllowSnapshotResponseProto& operator=(const AllowSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllowSnapshotResponseProto& default_instance();

  void Swap(AllowSnapshotResponseProto* other);

  // implements Message ----------------------------------------------

  AllowSnapshotResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllowSnapshotResponseProto& from);
  void MergeFrom(const AllowSnapshotResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.AllowSnapshotResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static AllowSnapshotResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class DisallowSnapshotRequestProto : public ::google::protobuf::Message {
 public:
  DisallowSnapshotRequestProto();
  virtual ~DisallowSnapshotRequestProto();

  DisallowSnapshotRequestProto(const DisallowSnapshotRequestProto& from);

  inline DisallowSnapshotRequestProto& operator=(const DisallowSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisallowSnapshotRequestProto& default_instance();

  void Swap(DisallowSnapshotRequestProto* other);

  // implements Message ----------------------------------------------

  DisallowSnapshotRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisallowSnapshotRequestProto& from);
  void MergeFrom(const DisallowSnapshotRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snapshotRoot = 1;
  inline bool has_snapshotroot() const;
  inline void clear_snapshotroot();
  static const int kSnapshotRootFieldNumber = 1;
  inline const ::std::string& snapshotroot() const;
  inline void set_snapshotroot(const ::std::string& value);
  inline void set_snapshotroot(const char* value);
  inline void set_snapshotroot(const char* value, size_t size);
  inline ::std::string* mutable_snapshotroot();
  inline ::std::string* release_snapshotroot();
  inline void set_allocated_snapshotroot(::std::string* snapshotroot);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DisallowSnapshotRequestProto)
 private:
  inline void set_has_snapshotroot();
  inline void clear_has_snapshotroot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* snapshotroot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static DisallowSnapshotRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class DisallowSnapshotResponseProto : public ::google::protobuf::Message {
 public:
  DisallowSnapshotResponseProto();
  virtual ~DisallowSnapshotResponseProto();

  DisallowSnapshotResponseProto(const DisallowSnapshotResponseProto& from);

  inline DisallowSnapshotResponseProto& operator=(const DisallowSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisallowSnapshotResponseProto& default_instance();

  void Swap(DisallowSnapshotResponseProto* other);

  // implements Message ----------------------------------------------

  DisallowSnapshotResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisallowSnapshotResponseProto& from);
  void MergeFrom(const DisallowSnapshotResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DisallowSnapshotResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static DisallowSnapshotResponseProto* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSnapshotRequestProto : public ::google::protobuf::Message {
 public:
  DeleteSnapshotRequestProto();
  virtual ~DeleteSnapshotRequestProto();

  DeleteSnapshotRequestProto(const DeleteSnapshotRequestProto& from);

  inline DeleteSnapshotRequestProto& operator=(const DeleteSnapshotRequestProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSnapshotRequestProto& default_instance();

  void Swap(DeleteSnapshotRequestProto* other);

  // implements Message ----------------------------------------------

  DeleteSnapshotRequestProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSnapshotRequestProto& from);
  void MergeFrom(const DeleteSnapshotRequestProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string snapshotRoot = 1;
  inline bool has_snapshotroot() const;
  inline void clear_snapshotroot();
  static const int kSnapshotRootFieldNumber = 1;
  inline const ::std::string& snapshotroot() const;
  inline void set_snapshotroot(const ::std::string& value);
  inline void set_snapshotroot(const char* value);
  inline void set_snapshotroot(const char* value, size_t size);
  inline ::std::string* mutable_snapshotroot();
  inline ::std::string* release_snapshotroot();
  inline void set_allocated_snapshotroot(::std::string* snapshotroot);

  // required string snapshotName = 2;
  inline bool has_snapshotname() const;
  inline void clear_snapshotname();
  static const int kSnapshotNameFieldNumber = 2;
  inline const ::std::string& snapshotname() const;
  inline void set_snapshotname(const ::std::string& value);
  inline void set_snapshotname(const char* value);
  inline void set_snapshotname(const char* value, size_t size);
  inline ::std::string* mutable_snapshotname();
  inline ::std::string* release_snapshotname();
  inline void set_allocated_snapshotname(::std::string* snapshotname);

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteSnapshotRequestProto)
 private:
  inline void set_has_snapshotroot();
  inline void clear_has_snapshotroot();
  inline void set_has_snapshotname();
  inline void clear_has_snapshotname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* snapshotroot_;
  ::std::string* snapshotname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static DeleteSnapshotRequestProto* default_instance_;
};
// -------------------------------------------------------------------

class DeleteSnapshotResponseProto : public ::google::protobuf::Message {
 public:
  DeleteSnapshotResponseProto();
  virtual ~DeleteSnapshotResponseProto();

  DeleteSnapshotResponseProto(const DeleteSnapshotResponseProto& from);

  inline DeleteSnapshotResponseProto& operator=(const DeleteSnapshotResponseProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSnapshotResponseProto& default_instance();

  void Swap(DeleteSnapshotResponseProto* other);

  // implements Message ----------------------------------------------

  DeleteSnapshotResponseProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteSnapshotResponseProto& from);
  void MergeFrom(const DeleteSnapshotResponseProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Hdfs.Internal.DeleteSnapshotResponseProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto();
  friend void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto();

  void InitAsDefaultInstance();
  static DeleteSnapshotResponseProto* default_instance_;
};
// ===================================================================

class ClientNamenodeProtocol_Stub;

class ClientNamenodeProtocol : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ClientNamenodeProtocol() {};
 public:
  virtual ~ClientNamenodeProtocol();

  typedef ClientNamenodeProtocol_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void getBlockLocations(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetBlockLocationsRequestProto* request,
                       ::Hdfs::Internal::GetBlockLocationsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getServerDefaults(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetServerDefaultsRequestProto* request,
                       ::Hdfs::Internal::GetServerDefaultsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void create(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CreateRequestProto* request,
                       ::Hdfs::Internal::CreateResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void append(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AppendRequestProto* request,
                       ::Hdfs::Internal::AppendResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setReplication(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetReplicationRequestProto* request,
                       ::Hdfs::Internal::SetReplicationResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setPermission(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetPermissionRequestProto* request,
                       ::Hdfs::Internal::SetPermissionResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setOwner(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetOwnerRequestProto* request,
                       ::Hdfs::Internal::SetOwnerResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void abandonBlock(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AbandonBlockRequestProto* request,
                       ::Hdfs::Internal::AbandonBlockResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void addBlock(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AddBlockRequestProto* request,
                       ::Hdfs::Internal::AddBlockResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getAdditionalDatanode(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto* request,
                       ::Hdfs::Internal::GetAdditionalDatanodeResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void complete(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CompleteRequestProto* request,
                       ::Hdfs::Internal::CompleteResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void reportBadBlocks(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ReportBadBlocksRequestProto* request,
                       ::Hdfs::Internal::ReportBadBlocksResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void concat(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ConcatRequestProto* request,
                       ::Hdfs::Internal::ConcatResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void truncate(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::TruncateRequestProto* request,
                       ::Hdfs::Internal::TruncateResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getLease(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetLeaseRequestProto* request,
                       ::Hdfs::Internal::GetLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void releaseLease(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ReleaseLeaseRequestProto* request,
                       ::Hdfs::Internal::ReleaseLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void rename(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RenameRequestProto* request,
                       ::Hdfs::Internal::RenameResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void rename2(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::Rename2RequestProto* request,
                       ::Hdfs::Internal::Rename2ResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void deleteFile(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::DeleteRequestProto* request,
                       ::Hdfs::Internal::DeleteResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void mkdirs(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::MkdirsRequestProto* request,
                       ::Hdfs::Internal::MkdirsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getListing(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetListingRequestProto* request,
                       ::Hdfs::Internal::GetListingResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void renewLease(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RenewLeaseRequestProto* request,
                       ::Hdfs::Internal::RenewLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void recoverLease(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RecoverLeaseRequestProto* request,
                       ::Hdfs::Internal::RecoverLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getFsStats(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetFsStatusRequestProto* request,
                       ::Hdfs::Internal::GetFsStatsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getDatanodeReport(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetDatanodeReportRequestProto* request,
                       ::Hdfs::Internal::GetDatanodeReportResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getPreferredBlockSize(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto* request,
                       ::Hdfs::Internal::GetPreferredBlockSizeResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setSafeMode(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetSafeModeRequestProto* request,
                       ::Hdfs::Internal::SetSafeModeResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void saveNamespace(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SaveNamespaceRequestProto* request,
                       ::Hdfs::Internal::SaveNamespaceResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void rollEdits(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RollEditsRequestProto* request,
                       ::Hdfs::Internal::RollEditsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void restoreFailedStorage(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RestoreFailedStorageRequestProto* request,
                       ::Hdfs::Internal::RestoreFailedStorageResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void refreshNodes(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RefreshNodesRequestProto* request,
                       ::Hdfs::Internal::RefreshNodesResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void finalizeUpgrade(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::FinalizeUpgradeRequestProto* request,
                       ::Hdfs::Internal::FinalizeUpgradeResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void listCorruptFileBlocks(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto* request,
                       ::Hdfs::Internal::ListCorruptFileBlocksResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void metaSave(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::MetaSaveRequestProto* request,
                       ::Hdfs::Internal::MetaSaveResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getFileInfo(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetFileInfoRequestProto* request,
                       ::Hdfs::Internal::GetFileInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void addCacheDirective(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AddCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::AddCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void modifyCacheDirective(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::ModifyCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void removeCacheDirective(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::RemoveCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void listCacheDirectives(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ListCacheDirectivesRequestProto* request,
                       ::Hdfs::Internal::ListCacheDirectivesResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void addCachePool(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AddCachePoolRequestProto* request,
                       ::Hdfs::Internal::AddCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void modifyCachePool(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ModifyCachePoolRequestProto* request,
                       ::Hdfs::Internal::ModifyCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void removeCachePool(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RemoveCachePoolRequestProto* request,
                       ::Hdfs::Internal::RemoveCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void listCachePools(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ListCachePoolsRequestProto* request,
                       ::Hdfs::Internal::ListCachePoolsResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getFileLinkInfo(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetFileLinkInfoRequestProto* request,
                       ::Hdfs::Internal::GetFileLinkInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getContentSummary(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetContentSummaryRequestProto* request,
                       ::Hdfs::Internal::GetContentSummaryResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setQuota(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetQuotaRequestProto* request,
                       ::Hdfs::Internal::SetQuotaResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void fsync(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::FsyncRequestProto* request,
                       ::Hdfs::Internal::FsyncResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setTimes(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetTimesRequestProto* request,
                       ::Hdfs::Internal::SetTimesResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void createSymlink(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CreateSymlinkRequestProto* request,
                       ::Hdfs::Internal::CreateSymlinkResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getLinkTarget(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetLinkTargetRequestProto* request,
                       ::Hdfs::Internal::GetLinkTargetResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void updateBlockForPipeline(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto* request,
                       ::Hdfs::Internal::UpdateBlockForPipelineResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void updatePipeline(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::UpdatePipelineRequestProto* request,
                       ::Hdfs::Internal::UpdatePipelineResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getDelegationToken(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::GetDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void renewDelegationToken(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RenewDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::RenewDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void cancelDelegationToken(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CancelDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::CancelDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void setBalancerBandwidth(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetBalancerBandwidthRequestProto* request,
                       ::Hdfs::Internal::SetBalancerBandwidthResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getDataEncryptionKey(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto* request,
                       ::Hdfs::Internal::GetDataEncryptionKeyResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void createSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CreateSnapshotRequestProto* request,
                       ::Hdfs::Internal::CreateSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void renameSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RenameSnapshotRequestProto* request,
                       ::Hdfs::Internal::RenameSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void allowSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AllowSnapshotRequestProto* request,
                       ::Hdfs::Internal::AllowSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void disallowSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::DisallowSnapshotRequestProto* request,
                       ::Hdfs::Internal::DisallowSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getSnapshottableDirListing(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto* request,
                       ::Hdfs::Internal::GetSnapshottableDirListingResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void deleteSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::DeleteSnapshotRequestProto* request,
                       ::Hdfs::Internal::DeleteSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getSnapshotDiffReport(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto* request,
                       ::Hdfs::Internal::GetSnapshotDiffReportResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void isFileClosed(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::IsFileClosedRequestProto* request,
                       ::Hdfs::Internal::IsFileClosedResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void createEncryptionZone(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CreateEncryptionZoneRequestProto* request,
                       ::Hdfs::Internal::CreateEncryptionZoneResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void listEncryptionZones(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ListEncryptionZonesRequestProto* request,
                       ::Hdfs::Internal::ListEncryptionZonesResponseProto* response,
                       ::google::protobuf::Closure* done);
  virtual void getEZForPath(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetEZForPathRequestProto* request,
                       ::Hdfs::Internal::GetEZForPathResponseProto* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientNamenodeProtocol);
};

class ClientNamenodeProtocol_Stub : public ClientNamenodeProtocol {
 public:
  ClientNamenodeProtocol_Stub(::google::protobuf::RpcChannel* channel);
  ClientNamenodeProtocol_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ClientNamenodeProtocol_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements ClientNamenodeProtocol ------------------------------------------

  void getBlockLocations(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetBlockLocationsRequestProto* request,
                       ::Hdfs::Internal::GetBlockLocationsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getServerDefaults(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetServerDefaultsRequestProto* request,
                       ::Hdfs::Internal::GetServerDefaultsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void create(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CreateRequestProto* request,
                       ::Hdfs::Internal::CreateResponseProto* response,
                       ::google::protobuf::Closure* done);
  void append(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AppendRequestProto* request,
                       ::Hdfs::Internal::AppendResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setReplication(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetReplicationRequestProto* request,
                       ::Hdfs::Internal::SetReplicationResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setPermission(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetPermissionRequestProto* request,
                       ::Hdfs::Internal::SetPermissionResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setOwner(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetOwnerRequestProto* request,
                       ::Hdfs::Internal::SetOwnerResponseProto* response,
                       ::google::protobuf::Closure* done);
  void abandonBlock(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AbandonBlockRequestProto* request,
                       ::Hdfs::Internal::AbandonBlockResponseProto* response,
                       ::google::protobuf::Closure* done);
  void addBlock(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AddBlockRequestProto* request,
                       ::Hdfs::Internal::AddBlockResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getAdditionalDatanode(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto* request,
                       ::Hdfs::Internal::GetAdditionalDatanodeResponseProto* response,
                       ::google::protobuf::Closure* done);
  void complete(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CompleteRequestProto* request,
                       ::Hdfs::Internal::CompleteResponseProto* response,
                       ::google::protobuf::Closure* done);
  void reportBadBlocks(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ReportBadBlocksRequestProto* request,
                       ::Hdfs::Internal::ReportBadBlocksResponseProto* response,
                       ::google::protobuf::Closure* done);
  void concat(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ConcatRequestProto* request,
                       ::Hdfs::Internal::ConcatResponseProto* response,
                       ::google::protobuf::Closure* done);
  void truncate(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::TruncateRequestProto* request,
                       ::Hdfs::Internal::TruncateResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getLease(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetLeaseRequestProto* request,
                       ::Hdfs::Internal::GetLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  void releaseLease(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ReleaseLeaseRequestProto* request,
                       ::Hdfs::Internal::ReleaseLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  void rename(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RenameRequestProto* request,
                       ::Hdfs::Internal::RenameResponseProto* response,
                       ::google::protobuf::Closure* done);
  void rename2(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::Rename2RequestProto* request,
                       ::Hdfs::Internal::Rename2ResponseProto* response,
                       ::google::protobuf::Closure* done);
  void deleteFile(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::DeleteRequestProto* request,
                       ::Hdfs::Internal::DeleteResponseProto* response,
                       ::google::protobuf::Closure* done);
  void mkdirs(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::MkdirsRequestProto* request,
                       ::Hdfs::Internal::MkdirsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getListing(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetListingRequestProto* request,
                       ::Hdfs::Internal::GetListingResponseProto* response,
                       ::google::protobuf::Closure* done);
  void renewLease(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RenewLeaseRequestProto* request,
                       ::Hdfs::Internal::RenewLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  void recoverLease(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RecoverLeaseRequestProto* request,
                       ::Hdfs::Internal::RecoverLeaseResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getFsStats(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetFsStatusRequestProto* request,
                       ::Hdfs::Internal::GetFsStatsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getDatanodeReport(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetDatanodeReportRequestProto* request,
                       ::Hdfs::Internal::GetDatanodeReportResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getPreferredBlockSize(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto* request,
                       ::Hdfs::Internal::GetPreferredBlockSizeResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setSafeMode(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetSafeModeRequestProto* request,
                       ::Hdfs::Internal::SetSafeModeResponseProto* response,
                       ::google::protobuf::Closure* done);
  void saveNamespace(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SaveNamespaceRequestProto* request,
                       ::Hdfs::Internal::SaveNamespaceResponseProto* response,
                       ::google::protobuf::Closure* done);
  void rollEdits(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RollEditsRequestProto* request,
                       ::Hdfs::Internal::RollEditsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void restoreFailedStorage(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RestoreFailedStorageRequestProto* request,
                       ::Hdfs::Internal::RestoreFailedStorageResponseProto* response,
                       ::google::protobuf::Closure* done);
  void refreshNodes(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RefreshNodesRequestProto* request,
                       ::Hdfs::Internal::RefreshNodesResponseProto* response,
                       ::google::protobuf::Closure* done);
  void finalizeUpgrade(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::FinalizeUpgradeRequestProto* request,
                       ::Hdfs::Internal::FinalizeUpgradeResponseProto* response,
                       ::google::protobuf::Closure* done);
  void listCorruptFileBlocks(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto* request,
                       ::Hdfs::Internal::ListCorruptFileBlocksResponseProto* response,
                       ::google::protobuf::Closure* done);
  void metaSave(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::MetaSaveRequestProto* request,
                       ::Hdfs::Internal::MetaSaveResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getFileInfo(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetFileInfoRequestProto* request,
                       ::Hdfs::Internal::GetFileInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  void addCacheDirective(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AddCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::AddCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  void modifyCacheDirective(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::ModifyCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  void removeCacheDirective(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto* request,
                       ::Hdfs::Internal::RemoveCacheDirectiveResponseProto* response,
                       ::google::protobuf::Closure* done);
  void listCacheDirectives(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ListCacheDirectivesRequestProto* request,
                       ::Hdfs::Internal::ListCacheDirectivesResponseProto* response,
                       ::google::protobuf::Closure* done);
  void addCachePool(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AddCachePoolRequestProto* request,
                       ::Hdfs::Internal::AddCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  void modifyCachePool(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ModifyCachePoolRequestProto* request,
                       ::Hdfs::Internal::ModifyCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  void removeCachePool(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RemoveCachePoolRequestProto* request,
                       ::Hdfs::Internal::RemoveCachePoolResponseProto* response,
                       ::google::protobuf::Closure* done);
  void listCachePools(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ListCachePoolsRequestProto* request,
                       ::Hdfs::Internal::ListCachePoolsResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getFileLinkInfo(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetFileLinkInfoRequestProto* request,
                       ::Hdfs::Internal::GetFileLinkInfoResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getContentSummary(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetContentSummaryRequestProto* request,
                       ::Hdfs::Internal::GetContentSummaryResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setQuota(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetQuotaRequestProto* request,
                       ::Hdfs::Internal::SetQuotaResponseProto* response,
                       ::google::protobuf::Closure* done);
  void fsync(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::FsyncRequestProto* request,
                       ::Hdfs::Internal::FsyncResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setTimes(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetTimesRequestProto* request,
                       ::Hdfs::Internal::SetTimesResponseProto* response,
                       ::google::protobuf::Closure* done);
  void createSymlink(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CreateSymlinkRequestProto* request,
                       ::Hdfs::Internal::CreateSymlinkResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getLinkTarget(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetLinkTargetRequestProto* request,
                       ::Hdfs::Internal::GetLinkTargetResponseProto* response,
                       ::google::protobuf::Closure* done);
  void updateBlockForPipeline(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto* request,
                       ::Hdfs::Internal::UpdateBlockForPipelineResponseProto* response,
                       ::google::protobuf::Closure* done);
  void updatePipeline(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::UpdatePipelineRequestProto* request,
                       ::Hdfs::Internal::UpdatePipelineResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getDelegationToken(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::GetDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  void renewDelegationToken(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RenewDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::RenewDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  void cancelDelegationToken(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CancelDelegationTokenRequestProto* request,
                       ::Hdfs::Internal::CancelDelegationTokenResponseProto* response,
                       ::google::protobuf::Closure* done);
  void setBalancerBandwidth(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::SetBalancerBandwidthRequestProto* request,
                       ::Hdfs::Internal::SetBalancerBandwidthResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getDataEncryptionKey(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto* request,
                       ::Hdfs::Internal::GetDataEncryptionKeyResponseProto* response,
                       ::google::protobuf::Closure* done);
  void createSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CreateSnapshotRequestProto* request,
                       ::Hdfs::Internal::CreateSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void renameSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::RenameSnapshotRequestProto* request,
                       ::Hdfs::Internal::RenameSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void allowSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::AllowSnapshotRequestProto* request,
                       ::Hdfs::Internal::AllowSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void disallowSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::DisallowSnapshotRequestProto* request,
                       ::Hdfs::Internal::DisallowSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getSnapshottableDirListing(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto* request,
                       ::Hdfs::Internal::GetSnapshottableDirListingResponseProto* response,
                       ::google::protobuf::Closure* done);
  void deleteSnapshot(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::DeleteSnapshotRequestProto* request,
                       ::Hdfs::Internal::DeleteSnapshotResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getSnapshotDiffReport(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto* request,
                       ::Hdfs::Internal::GetSnapshotDiffReportResponseProto* response,
                       ::google::protobuf::Closure* done);
  void isFileClosed(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::IsFileClosedRequestProto* request,
                       ::Hdfs::Internal::IsFileClosedResponseProto* response,
                       ::google::protobuf::Closure* done);
  void createEncryptionZone(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::CreateEncryptionZoneRequestProto* request,
                       ::Hdfs::Internal::CreateEncryptionZoneResponseProto* response,
                       ::google::protobuf::Closure* done);
  void listEncryptionZones(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::ListEncryptionZonesRequestProto* request,
                       ::Hdfs::Internal::ListEncryptionZonesResponseProto* response,
                       ::google::protobuf::Closure* done);
  void getEZForPath(::google::protobuf::RpcController* controller,
                       const ::Hdfs::Internal::GetEZForPathRequestProto* request,
                       ::Hdfs::Internal::GetEZForPathResponseProto* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ClientNamenodeProtocol_Stub);
};


// ===================================================================


// ===================================================================

// GetBlockLocationsRequestProto

// required string src = 1;
inline bool GetBlockLocationsRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBlockLocationsRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBlockLocationsRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBlockLocationsRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& GetBlockLocationsRequestProto::src() const {
  return *src_;
}
inline void GetBlockLocationsRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetBlockLocationsRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetBlockLocationsRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetBlockLocationsRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* GetBlockLocationsRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetBlockLocationsRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 offset = 2;
inline bool GetBlockLocationsRequestProto::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetBlockLocationsRequestProto::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetBlockLocationsRequestProto::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetBlockLocationsRequestProto::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 GetBlockLocationsRequestProto::offset() const {
  return offset_;
}
inline void GetBlockLocationsRequestProto::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
}

// required uint64 length = 3;
inline bool GetBlockLocationsRequestProto::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetBlockLocationsRequestProto::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetBlockLocationsRequestProto::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetBlockLocationsRequestProto::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
  clear_has_length();
}
inline ::google::protobuf::uint64 GetBlockLocationsRequestProto::length() const {
  return length_;
}
inline void GetBlockLocationsRequestProto::set_length(::google::protobuf::uint64 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// GetBlockLocationsResponseProto

// optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
inline bool GetBlockLocationsResponseProto::has_locations() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetBlockLocationsResponseProto::set_has_locations() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetBlockLocationsResponseProto::clear_has_locations() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetBlockLocationsResponseProto::clear_locations() {
  if (locations_ != NULL) locations_->::Hdfs::Internal::LocatedBlocksProto::Clear();
  clear_has_locations();
}
inline const ::Hdfs::Internal::LocatedBlocksProto& GetBlockLocationsResponseProto::locations() const {
  return locations_ != NULL ? *locations_ : *default_instance_->locations_;
}
inline ::Hdfs::Internal::LocatedBlocksProto* GetBlockLocationsResponseProto::mutable_locations() {
  set_has_locations();
  if (locations_ == NULL) locations_ = new ::Hdfs::Internal::LocatedBlocksProto;
  return locations_;
}
inline ::Hdfs::Internal::LocatedBlocksProto* GetBlockLocationsResponseProto::release_locations() {
  clear_has_locations();
  ::Hdfs::Internal::LocatedBlocksProto* temp = locations_;
  locations_ = NULL;
  return temp;
}
inline void GetBlockLocationsResponseProto::set_allocated_locations(::Hdfs::Internal::LocatedBlocksProto* locations) {
  delete locations_;
  locations_ = locations;
  if (locations) {
    set_has_locations();
  } else {
    clear_has_locations();
  }
}

// -------------------------------------------------------------------

// GetServerDefaultsRequestProto

// -------------------------------------------------------------------

// GetServerDefaultsResponseProto

// required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
inline bool GetServerDefaultsResponseProto::has_serverdefaults() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetServerDefaultsResponseProto::set_has_serverdefaults() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetServerDefaultsResponseProto::clear_has_serverdefaults() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetServerDefaultsResponseProto::clear_serverdefaults() {
  if (serverdefaults_ != NULL) serverdefaults_->::Hdfs::Internal::FsServerDefaultsProto::Clear();
  clear_has_serverdefaults();
}
inline const ::Hdfs::Internal::FsServerDefaultsProto& GetServerDefaultsResponseProto::serverdefaults() const {
  return serverdefaults_ != NULL ? *serverdefaults_ : *default_instance_->serverdefaults_;
}
inline ::Hdfs::Internal::FsServerDefaultsProto* GetServerDefaultsResponseProto::mutable_serverdefaults() {
  set_has_serverdefaults();
  if (serverdefaults_ == NULL) serverdefaults_ = new ::Hdfs::Internal::FsServerDefaultsProto;
  return serverdefaults_;
}
inline ::Hdfs::Internal::FsServerDefaultsProto* GetServerDefaultsResponseProto::release_serverdefaults() {
  clear_has_serverdefaults();
  ::Hdfs::Internal::FsServerDefaultsProto* temp = serverdefaults_;
  serverdefaults_ = NULL;
  return temp;
}
inline void GetServerDefaultsResponseProto::set_allocated_serverdefaults(::Hdfs::Internal::FsServerDefaultsProto* serverdefaults) {
  delete serverdefaults_;
  serverdefaults_ = serverdefaults;
  if (serverdefaults) {
    set_has_serverdefaults();
  } else {
    clear_has_serverdefaults();
  }
}

// -------------------------------------------------------------------

// CreateRequestProto

// required string src = 1;
inline bool CreateRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& CreateRequestProto::src() const {
  return *src_;
}
inline void CreateRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void CreateRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void CreateRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* CreateRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Hdfs.Internal.FsPermissionProto masked = 2;
inline bool CreateRequestProto::has_masked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRequestProto::set_has_masked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRequestProto::clear_has_masked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRequestProto::clear_masked() {
  if (masked_ != NULL) masked_->::Hdfs::Internal::FsPermissionProto::Clear();
  clear_has_masked();
}
inline const ::Hdfs::Internal::FsPermissionProto& CreateRequestProto::masked() const {
  return masked_ != NULL ? *masked_ : *default_instance_->masked_;
}
inline ::Hdfs::Internal::FsPermissionProto* CreateRequestProto::mutable_masked() {
  set_has_masked();
  if (masked_ == NULL) masked_ = new ::Hdfs::Internal::FsPermissionProto;
  return masked_;
}
inline ::Hdfs::Internal::FsPermissionProto* CreateRequestProto::release_masked() {
  clear_has_masked();
  ::Hdfs::Internal::FsPermissionProto* temp = masked_;
  masked_ = NULL;
  return temp;
}
inline void CreateRequestProto::set_allocated_masked(::Hdfs::Internal::FsPermissionProto* masked) {
  delete masked_;
  masked_ = masked;
  if (masked) {
    set_has_masked();
  } else {
    clear_has_masked();
  }
}

// required string clientName = 3;
inline bool CreateRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& CreateRequestProto::clientname() const {
  return *clientname_;
}
inline void CreateRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void CreateRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void CreateRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* CreateRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 createFlag = 4;
inline bool CreateRequestProto::has_createflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateRequestProto::set_has_createflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateRequestProto::clear_has_createflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateRequestProto::clear_createflag() {
  createflag_ = 0u;
  clear_has_createflag();
}
inline ::google::protobuf::uint32 CreateRequestProto::createflag() const {
  return createflag_;
}
inline void CreateRequestProto::set_createflag(::google::protobuf::uint32 value) {
  set_has_createflag();
  createflag_ = value;
}

// required bool createParent = 5;
inline bool CreateRequestProto::has_createparent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateRequestProto::set_has_createparent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateRequestProto::clear_has_createparent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateRequestProto::clear_createparent() {
  createparent_ = false;
  clear_has_createparent();
}
inline bool CreateRequestProto::createparent() const {
  return createparent_;
}
inline void CreateRequestProto::set_createparent(bool value) {
  set_has_createparent();
  createparent_ = value;
}

// required uint32 replication = 6;
inline bool CreateRequestProto::has_replication() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateRequestProto::set_has_replication() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateRequestProto::clear_has_replication() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateRequestProto::clear_replication() {
  replication_ = 0u;
  clear_has_replication();
}
inline ::google::protobuf::uint32 CreateRequestProto::replication() const {
  return replication_;
}
inline void CreateRequestProto::set_replication(::google::protobuf::uint32 value) {
  set_has_replication();
  replication_ = value;
}

// required uint64 blockSize = 7;
inline bool CreateRequestProto::has_blocksize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateRequestProto::set_has_blocksize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateRequestProto::clear_has_blocksize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateRequestProto::clear_blocksize() {
  blocksize_ = GOOGLE_ULONGLONG(0);
  clear_has_blocksize();
}
inline ::google::protobuf::uint64 CreateRequestProto::blocksize() const {
  return blocksize_;
}
inline void CreateRequestProto::set_blocksize(::google::protobuf::uint64 value) {
  set_has_blocksize();
  blocksize_ = value;
}

// repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 8;
inline int CreateRequestProto::cryptoprotocolversion_size() const {
  return cryptoprotocolversion_.size();
}
inline void CreateRequestProto::clear_cryptoprotocolversion() {
  cryptoprotocolversion_.Clear();
}
inline ::Hdfs::Internal::CryptoProtocolVersionProto CreateRequestProto::cryptoprotocolversion(int index) const {
  return static_cast< ::Hdfs::Internal::CryptoProtocolVersionProto >(cryptoprotocolversion_.Get(index));
}
inline void CreateRequestProto::set_cryptoprotocolversion(int index, ::Hdfs::Internal::CryptoProtocolVersionProto value) {
  assert(::Hdfs::Internal::CryptoProtocolVersionProto_IsValid(value));
  cryptoprotocolversion_.Set(index, value);
}
inline void CreateRequestProto::add_cryptoprotocolversion(::Hdfs::Internal::CryptoProtocolVersionProto value) {
  assert(::Hdfs::Internal::CryptoProtocolVersionProto_IsValid(value));
  cryptoprotocolversion_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
CreateRequestProto::cryptoprotocolversion() const {
  return cryptoprotocolversion_;
}
inline ::google::protobuf::RepeatedField<int>*
CreateRequestProto::mutable_cryptoprotocolversion() {
  return &cryptoprotocolversion_;
}

// -------------------------------------------------------------------

// CreateResponseProto

// optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
inline bool CreateResponseProto::has_fs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateResponseProto::set_has_fs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateResponseProto::clear_has_fs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateResponseProto::clear_fs() {
  if (fs_ != NULL) fs_->::Hdfs::Internal::HdfsFileStatusProto::Clear();
  clear_has_fs();
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& CreateResponseProto::fs() const {
  return fs_ != NULL ? *fs_ : *default_instance_->fs_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* CreateResponseProto::mutable_fs() {
  set_has_fs();
  if (fs_ == NULL) fs_ = new ::Hdfs::Internal::HdfsFileStatusProto;
  return fs_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* CreateResponseProto::release_fs() {
  clear_has_fs();
  ::Hdfs::Internal::HdfsFileStatusProto* temp = fs_;
  fs_ = NULL;
  return temp;
}
inline void CreateResponseProto::set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs) {
  delete fs_;
  fs_ = fs;
  if (fs) {
    set_has_fs();
  } else {
    clear_has_fs();
  }
}

// -------------------------------------------------------------------

// AppendRequestProto

// required string src = 1;
inline bool AppendRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& AppendRequestProto::src() const {
  return *src_;
}
inline void AppendRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void AppendRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void AppendRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppendRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* AppendRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppendRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string clientName = 2;
inline bool AppendRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& AppendRequestProto::clientname() const {
  return *clientname_;
}
inline void AppendRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void AppendRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void AppendRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppendRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* AppendRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppendRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AppendResponseProto

// optional .Hdfs.Internal.LocatedBlockProto block = 1;
inline bool AppendResponseProto::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppendResponseProto::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppendResponseProto::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppendResponseProto::clear_block() {
  if (block_ != NULL) block_->::Hdfs::Internal::LocatedBlockProto::Clear();
  clear_has_block();
}
inline const ::Hdfs::Internal::LocatedBlockProto& AppendResponseProto::block() const {
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* AppendResponseProto::mutable_block() {
  set_has_block();
  if (block_ == NULL) block_ = new ::Hdfs::Internal::LocatedBlockProto;
  return block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* AppendResponseProto::release_block() {
  clear_has_block();
  ::Hdfs::Internal::LocatedBlockProto* temp = block_;
  block_ = NULL;
  return temp;
}
inline void AppendResponseProto::set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
}

// optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
inline bool AppendResponseProto::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppendResponseProto::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppendResponseProto::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppendResponseProto::clear_stat() {
  if (stat_ != NULL) stat_->::Hdfs::Internal::HdfsFileStatusProto::Clear();
  clear_has_stat();
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& AppendResponseProto::stat() const {
  return stat_ != NULL ? *stat_ : *default_instance_->stat_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* AppendResponseProto::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) stat_ = new ::Hdfs::Internal::HdfsFileStatusProto;
  return stat_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* AppendResponseProto::release_stat() {
  clear_has_stat();
  ::Hdfs::Internal::HdfsFileStatusProto* temp = stat_;
  stat_ = NULL;
  return temp;
}
inline void AppendResponseProto::set_allocated_stat(::Hdfs::Internal::HdfsFileStatusProto* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
}

// -------------------------------------------------------------------

// SetReplicationRequestProto

// required string src = 1;
inline bool SetReplicationRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetReplicationRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetReplicationRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetReplicationRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& SetReplicationRequestProto::src() const {
  return *src_;
}
inline void SetReplicationRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SetReplicationRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SetReplicationRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetReplicationRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* SetReplicationRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetReplicationRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 replication = 2;
inline bool SetReplicationRequestProto::has_replication() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetReplicationRequestProto::set_has_replication() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetReplicationRequestProto::clear_has_replication() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetReplicationRequestProto::clear_replication() {
  replication_ = 0u;
  clear_has_replication();
}
inline ::google::protobuf::uint32 SetReplicationRequestProto::replication() const {
  return replication_;
}
inline void SetReplicationRequestProto::set_replication(::google::protobuf::uint32 value) {
  set_has_replication();
  replication_ = value;
}

// -------------------------------------------------------------------

// SetReplicationResponseProto

// required bool result = 1;
inline bool SetReplicationResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetReplicationResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetReplicationResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetReplicationResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool SetReplicationResponseProto::result() const {
  return result_;
}
inline void SetReplicationResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SetPermissionRequestProto

// required string src = 1;
inline bool SetPermissionRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetPermissionRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetPermissionRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetPermissionRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& SetPermissionRequestProto::src() const {
  return *src_;
}
inline void SetPermissionRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SetPermissionRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SetPermissionRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetPermissionRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* SetPermissionRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetPermissionRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Hdfs.Internal.FsPermissionProto permission = 2;
inline bool SetPermissionRequestProto::has_permission() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetPermissionRequestProto::set_has_permission() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetPermissionRequestProto::clear_has_permission() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetPermissionRequestProto::clear_permission() {
  if (permission_ != NULL) permission_->::Hdfs::Internal::FsPermissionProto::Clear();
  clear_has_permission();
}
inline const ::Hdfs::Internal::FsPermissionProto& SetPermissionRequestProto::permission() const {
  return permission_ != NULL ? *permission_ : *default_instance_->permission_;
}
inline ::Hdfs::Internal::FsPermissionProto* SetPermissionRequestProto::mutable_permission() {
  set_has_permission();
  if (permission_ == NULL) permission_ = new ::Hdfs::Internal::FsPermissionProto;
  return permission_;
}
inline ::Hdfs::Internal::FsPermissionProto* SetPermissionRequestProto::release_permission() {
  clear_has_permission();
  ::Hdfs::Internal::FsPermissionProto* temp = permission_;
  permission_ = NULL;
  return temp;
}
inline void SetPermissionRequestProto::set_allocated_permission(::Hdfs::Internal::FsPermissionProto* permission) {
  delete permission_;
  permission_ = permission;
  if (permission) {
    set_has_permission();
  } else {
    clear_has_permission();
  }
}

// -------------------------------------------------------------------

// SetPermissionResponseProto

// -------------------------------------------------------------------

// SetOwnerRequestProto

// required string src = 1;
inline bool SetOwnerRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetOwnerRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetOwnerRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetOwnerRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& SetOwnerRequestProto::src() const {
  return *src_;
}
inline void SetOwnerRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SetOwnerRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SetOwnerRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetOwnerRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* SetOwnerRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetOwnerRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string username = 2;
inline bool SetOwnerRequestProto::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetOwnerRequestProto::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetOwnerRequestProto::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetOwnerRequestProto::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& SetOwnerRequestProto::username() const {
  return *username_;
}
inline void SetOwnerRequestProto::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void SetOwnerRequestProto::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void SetOwnerRequestProto::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetOwnerRequestProto::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* SetOwnerRequestProto::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetOwnerRequestProto::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string groupname = 3;
inline bool SetOwnerRequestProto::has_groupname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetOwnerRequestProto::set_has_groupname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetOwnerRequestProto::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetOwnerRequestProto::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& SetOwnerRequestProto::groupname() const {
  return *groupname_;
}
inline void SetOwnerRequestProto::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void SetOwnerRequestProto::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void SetOwnerRequestProto::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetOwnerRequestProto::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* SetOwnerRequestProto::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetOwnerRequestProto::set_allocated_groupname(::std::string* groupname) {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (groupname) {
    set_has_groupname();
    groupname_ = groupname;
  } else {
    clear_has_groupname();
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetOwnerResponseProto

// -------------------------------------------------------------------

// AbandonBlockRequestProto

// required .Hdfs.Internal.ExtendedBlockProto b = 1;
inline bool AbandonBlockRequestProto::has_b() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AbandonBlockRequestProto::set_has_b() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AbandonBlockRequestProto::clear_has_b() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AbandonBlockRequestProto::clear_b() {
  if (b_ != NULL) b_->::Hdfs::Internal::ExtendedBlockProto::Clear();
  clear_has_b();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& AbandonBlockRequestProto::b() const {
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* AbandonBlockRequestProto::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::Hdfs::Internal::ExtendedBlockProto;
  return b_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* AbandonBlockRequestProto::release_b() {
  clear_has_b();
  ::Hdfs::Internal::ExtendedBlockProto* temp = b_;
  b_ = NULL;
  return temp;
}
inline void AbandonBlockRequestProto::set_allocated_b(::Hdfs::Internal::ExtendedBlockProto* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
}

// required string src = 2;
inline bool AbandonBlockRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AbandonBlockRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AbandonBlockRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AbandonBlockRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& AbandonBlockRequestProto::src() const {
  return *src_;
}
inline void AbandonBlockRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void AbandonBlockRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void AbandonBlockRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbandonBlockRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* AbandonBlockRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AbandonBlockRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string holder = 3;
inline bool AbandonBlockRequestProto::has_holder() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AbandonBlockRequestProto::set_has_holder() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AbandonBlockRequestProto::clear_has_holder() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AbandonBlockRequestProto::clear_holder() {
  if (holder_ != &::google::protobuf::internal::kEmptyString) {
    holder_->clear();
  }
  clear_has_holder();
}
inline const ::std::string& AbandonBlockRequestProto::holder() const {
  return *holder_;
}
inline void AbandonBlockRequestProto::set_holder(const ::std::string& value) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(value);
}
inline void AbandonBlockRequestProto::set_holder(const char* value) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(value);
}
inline void AbandonBlockRequestProto::set_holder(const char* value, size_t size) {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  holder_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AbandonBlockRequestProto::mutable_holder() {
  set_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    holder_ = new ::std::string;
  }
  return holder_;
}
inline ::std::string* AbandonBlockRequestProto::release_holder() {
  clear_has_holder();
  if (holder_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = holder_;
    holder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AbandonBlockRequestProto::set_allocated_holder(::std::string* holder) {
  if (holder_ != &::google::protobuf::internal::kEmptyString) {
    delete holder_;
  }
  if (holder) {
    set_has_holder();
    holder_ = holder;
  } else {
    clear_has_holder();
    holder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AbandonBlockResponseProto

// -------------------------------------------------------------------

// AddBlockRequestProto

// required string src = 1;
inline bool AddBlockRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddBlockRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddBlockRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddBlockRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& AddBlockRequestProto::src() const {
  return *src_;
}
inline void AddBlockRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void AddBlockRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void AddBlockRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddBlockRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* AddBlockRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddBlockRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string clientName = 2;
inline bool AddBlockRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddBlockRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddBlockRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddBlockRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& AddBlockRequestProto::clientname() const {
  return *clientname_;
}
inline void AddBlockRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void AddBlockRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void AddBlockRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddBlockRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* AddBlockRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddBlockRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
inline bool AddBlockRequestProto::has_previous() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddBlockRequestProto::set_has_previous() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddBlockRequestProto::clear_has_previous() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddBlockRequestProto::clear_previous() {
  if (previous_ != NULL) previous_->::Hdfs::Internal::ExtendedBlockProto::Clear();
  clear_has_previous();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& AddBlockRequestProto::previous() const {
  return previous_ != NULL ? *previous_ : *default_instance_->previous_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* AddBlockRequestProto::mutable_previous() {
  set_has_previous();
  if (previous_ == NULL) previous_ = new ::Hdfs::Internal::ExtendedBlockProto;
  return previous_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* AddBlockRequestProto::release_previous() {
  clear_has_previous();
  ::Hdfs::Internal::ExtendedBlockProto* temp = previous_;
  previous_ = NULL;
  return temp;
}
inline void AddBlockRequestProto::set_allocated_previous(::Hdfs::Internal::ExtendedBlockProto* previous) {
  delete previous_;
  previous_ = previous;
  if (previous) {
    set_has_previous();
  } else {
    clear_has_previous();
  }
}

// repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
inline int AddBlockRequestProto::excludenodes_size() const {
  return excludenodes_.size();
}
inline void AddBlockRequestProto::clear_excludenodes() {
  excludenodes_.Clear();
}
inline const ::Hdfs::Internal::DatanodeInfoProto& AddBlockRequestProto::excludenodes(int index) const {
  return excludenodes_.Get(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* AddBlockRequestProto::mutable_excludenodes(int index) {
  return excludenodes_.Mutable(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* AddBlockRequestProto::add_excludenodes() {
  return excludenodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
AddBlockRequestProto::excludenodes() const {
  return excludenodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
AddBlockRequestProto::mutable_excludenodes() {
  return &excludenodes_;
}

// optional uint64 fileId = 5 [default = 0];
inline bool AddBlockRequestProto::has_fileid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddBlockRequestProto::set_has_fileid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddBlockRequestProto::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddBlockRequestProto::clear_fileid() {
  fileid_ = GOOGLE_ULONGLONG(0);
  clear_has_fileid();
}
inline ::google::protobuf::uint64 AddBlockRequestProto::fileid() const {
  return fileid_;
}
inline void AddBlockRequestProto::set_fileid(::google::protobuf::uint64 value) {
  set_has_fileid();
  fileid_ = value;
}

// repeated string favoredNodes = 6;
inline int AddBlockRequestProto::favorednodes_size() const {
  return favorednodes_.size();
}
inline void AddBlockRequestProto::clear_favorednodes() {
  favorednodes_.Clear();
}
inline const ::std::string& AddBlockRequestProto::favorednodes(int index) const {
  return favorednodes_.Get(index);
}
inline ::std::string* AddBlockRequestProto::mutable_favorednodes(int index) {
  return favorednodes_.Mutable(index);
}
inline void AddBlockRequestProto::set_favorednodes(int index, const ::std::string& value) {
  favorednodes_.Mutable(index)->assign(value);
}
inline void AddBlockRequestProto::set_favorednodes(int index, const char* value) {
  favorednodes_.Mutable(index)->assign(value);
}
inline void AddBlockRequestProto::set_favorednodes(int index, const char* value, size_t size) {
  favorednodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddBlockRequestProto::add_favorednodes() {
  return favorednodes_.Add();
}
inline void AddBlockRequestProto::add_favorednodes(const ::std::string& value) {
  favorednodes_.Add()->assign(value);
}
inline void AddBlockRequestProto::add_favorednodes(const char* value) {
  favorednodes_.Add()->assign(value);
}
inline void AddBlockRequestProto::add_favorednodes(const char* value, size_t size) {
  favorednodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddBlockRequestProto::favorednodes() const {
  return favorednodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddBlockRequestProto::mutable_favorednodes() {
  return &favorednodes_;
}

// -------------------------------------------------------------------

// AddBlockResponseProto

// required .Hdfs.Internal.LocatedBlockProto block = 1;
inline bool AddBlockResponseProto::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddBlockResponseProto::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddBlockResponseProto::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddBlockResponseProto::clear_block() {
  if (block_ != NULL) block_->::Hdfs::Internal::LocatedBlockProto::Clear();
  clear_has_block();
}
inline const ::Hdfs::Internal::LocatedBlockProto& AddBlockResponseProto::block() const {
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* AddBlockResponseProto::mutable_block() {
  set_has_block();
  if (block_ == NULL) block_ = new ::Hdfs::Internal::LocatedBlockProto;
  return block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* AddBlockResponseProto::release_block() {
  clear_has_block();
  ::Hdfs::Internal::LocatedBlockProto* temp = block_;
  block_ = NULL;
  return temp;
}
inline void AddBlockResponseProto::set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
}

// -------------------------------------------------------------------

// GetAdditionalDatanodeRequestProto

// required string src = 1;
inline bool GetAdditionalDatanodeRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAdditionalDatanodeRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAdditionalDatanodeRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAdditionalDatanodeRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& GetAdditionalDatanodeRequestProto::src() const {
  return *src_;
}
inline void GetAdditionalDatanodeRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetAdditionalDatanodeRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetAdditionalDatanodeRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAdditionalDatanodeRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* GetAdditionalDatanodeRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAdditionalDatanodeRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Hdfs.Internal.ExtendedBlockProto blk = 2;
inline bool GetAdditionalDatanodeRequestProto::has_blk() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetAdditionalDatanodeRequestProto::set_has_blk() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetAdditionalDatanodeRequestProto::clear_has_blk() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetAdditionalDatanodeRequestProto::clear_blk() {
  if (blk_ != NULL) blk_->::Hdfs::Internal::ExtendedBlockProto::Clear();
  clear_has_blk();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& GetAdditionalDatanodeRequestProto::blk() const {
  return blk_ != NULL ? *blk_ : *default_instance_->blk_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetAdditionalDatanodeRequestProto::mutable_blk() {
  set_has_blk();
  if (blk_ == NULL) blk_ = new ::Hdfs::Internal::ExtendedBlockProto;
  return blk_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* GetAdditionalDatanodeRequestProto::release_blk() {
  clear_has_blk();
  ::Hdfs::Internal::ExtendedBlockProto* temp = blk_;
  blk_ = NULL;
  return temp;
}
inline void GetAdditionalDatanodeRequestProto::set_allocated_blk(::Hdfs::Internal::ExtendedBlockProto* blk) {
  delete blk_;
  blk_ = blk;
  if (blk) {
    set_has_blk();
  } else {
    clear_has_blk();
  }
}

// repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
inline int GetAdditionalDatanodeRequestProto::existings_size() const {
  return existings_.size();
}
inline void GetAdditionalDatanodeRequestProto::clear_existings() {
  existings_.Clear();
}
inline const ::Hdfs::Internal::DatanodeInfoProto& GetAdditionalDatanodeRequestProto::existings(int index) const {
  return existings_.Get(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::mutable_existings(int index) {
  return existings_.Mutable(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::add_existings() {
  return existings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
GetAdditionalDatanodeRequestProto::existings() const {
  return existings_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
GetAdditionalDatanodeRequestProto::mutable_existings() {
  return &existings_;
}

// repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
inline int GetAdditionalDatanodeRequestProto::excludes_size() const {
  return excludes_.size();
}
inline void GetAdditionalDatanodeRequestProto::clear_excludes() {
  excludes_.Clear();
}
inline const ::Hdfs::Internal::DatanodeInfoProto& GetAdditionalDatanodeRequestProto::excludes(int index) const {
  return excludes_.Get(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::mutable_excludes(int index) {
  return excludes_.Mutable(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetAdditionalDatanodeRequestProto::add_excludes() {
  return excludes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
GetAdditionalDatanodeRequestProto::excludes() const {
  return excludes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
GetAdditionalDatanodeRequestProto::mutable_excludes() {
  return &excludes_;
}

// required uint32 numAdditionalNodes = 5;
inline bool GetAdditionalDatanodeRequestProto::has_numadditionalnodes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetAdditionalDatanodeRequestProto::set_has_numadditionalnodes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetAdditionalDatanodeRequestProto::clear_has_numadditionalnodes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetAdditionalDatanodeRequestProto::clear_numadditionalnodes() {
  numadditionalnodes_ = 0u;
  clear_has_numadditionalnodes();
}
inline ::google::protobuf::uint32 GetAdditionalDatanodeRequestProto::numadditionalnodes() const {
  return numadditionalnodes_;
}
inline void GetAdditionalDatanodeRequestProto::set_numadditionalnodes(::google::protobuf::uint32 value) {
  set_has_numadditionalnodes();
  numadditionalnodes_ = value;
}

// required string clientName = 6;
inline bool GetAdditionalDatanodeRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetAdditionalDatanodeRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetAdditionalDatanodeRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetAdditionalDatanodeRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& GetAdditionalDatanodeRequestProto::clientname() const {
  return *clientname_;
}
inline void GetAdditionalDatanodeRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void GetAdditionalDatanodeRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void GetAdditionalDatanodeRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAdditionalDatanodeRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* GetAdditionalDatanodeRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetAdditionalDatanodeRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string existingStorageUuids = 7;
inline int GetAdditionalDatanodeRequestProto::existingstorageuuids_size() const {
  return existingstorageuuids_.size();
}
inline void GetAdditionalDatanodeRequestProto::clear_existingstorageuuids() {
  existingstorageuuids_.Clear();
}
inline const ::std::string& GetAdditionalDatanodeRequestProto::existingstorageuuids(int index) const {
  return existingstorageuuids_.Get(index);
}
inline ::std::string* GetAdditionalDatanodeRequestProto::mutable_existingstorageuuids(int index) {
  return existingstorageuuids_.Mutable(index);
}
inline void GetAdditionalDatanodeRequestProto::set_existingstorageuuids(int index, const ::std::string& value) {
  existingstorageuuids_.Mutable(index)->assign(value);
}
inline void GetAdditionalDatanodeRequestProto::set_existingstorageuuids(int index, const char* value) {
  existingstorageuuids_.Mutable(index)->assign(value);
}
inline void GetAdditionalDatanodeRequestProto::set_existingstorageuuids(int index, const char* value, size_t size) {
  existingstorageuuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetAdditionalDatanodeRequestProto::add_existingstorageuuids() {
  return existingstorageuuids_.Add();
}
inline void GetAdditionalDatanodeRequestProto::add_existingstorageuuids(const ::std::string& value) {
  existingstorageuuids_.Add()->assign(value);
}
inline void GetAdditionalDatanodeRequestProto::add_existingstorageuuids(const char* value) {
  existingstorageuuids_.Add()->assign(value);
}
inline void GetAdditionalDatanodeRequestProto::add_existingstorageuuids(const char* value, size_t size) {
  existingstorageuuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetAdditionalDatanodeRequestProto::existingstorageuuids() const {
  return existingstorageuuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetAdditionalDatanodeRequestProto::mutable_existingstorageuuids() {
  return &existingstorageuuids_;
}

// -------------------------------------------------------------------

// GetAdditionalDatanodeResponseProto

// required .Hdfs.Internal.LocatedBlockProto block = 1;
inline bool GetAdditionalDatanodeResponseProto::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAdditionalDatanodeResponseProto::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAdditionalDatanodeResponseProto::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAdditionalDatanodeResponseProto::clear_block() {
  if (block_ != NULL) block_->::Hdfs::Internal::LocatedBlockProto::Clear();
  clear_has_block();
}
inline const ::Hdfs::Internal::LocatedBlockProto& GetAdditionalDatanodeResponseProto::block() const {
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* GetAdditionalDatanodeResponseProto::mutable_block() {
  set_has_block();
  if (block_ == NULL) block_ = new ::Hdfs::Internal::LocatedBlockProto;
  return block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* GetAdditionalDatanodeResponseProto::release_block() {
  clear_has_block();
  ::Hdfs::Internal::LocatedBlockProto* temp = block_;
  block_ = NULL;
  return temp;
}
inline void GetAdditionalDatanodeResponseProto::set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
}

// -------------------------------------------------------------------

// CompleteRequestProto

// required string src = 1;
inline bool CompleteRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompleteRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompleteRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompleteRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& CompleteRequestProto::src() const {
  return *src_;
}
inline void CompleteRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void CompleteRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void CompleteRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompleteRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* CompleteRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CompleteRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string clientName = 2;
inline bool CompleteRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CompleteRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CompleteRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CompleteRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& CompleteRequestProto::clientname() const {
  return *clientname_;
}
inline void CompleteRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void CompleteRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void CompleteRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CompleteRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* CompleteRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CompleteRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Hdfs.Internal.ExtendedBlockProto last = 3;
inline bool CompleteRequestProto::has_last() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CompleteRequestProto::set_has_last() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CompleteRequestProto::clear_has_last() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CompleteRequestProto::clear_last() {
  if (last_ != NULL) last_->::Hdfs::Internal::ExtendedBlockProto::Clear();
  clear_has_last();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& CompleteRequestProto::last() const {
  return last_ != NULL ? *last_ : *default_instance_->last_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* CompleteRequestProto::mutable_last() {
  set_has_last();
  if (last_ == NULL) last_ = new ::Hdfs::Internal::ExtendedBlockProto;
  return last_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* CompleteRequestProto::release_last() {
  clear_has_last();
  ::Hdfs::Internal::ExtendedBlockProto* temp = last_;
  last_ = NULL;
  return temp;
}
inline void CompleteRequestProto::set_allocated_last(::Hdfs::Internal::ExtendedBlockProto* last) {
  delete last_;
  last_ = last;
  if (last) {
    set_has_last();
  } else {
    clear_has_last();
  }
}

// optional uint64 fileId = 4 [default = 0];
inline bool CompleteRequestProto::has_fileid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CompleteRequestProto::set_has_fileid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CompleteRequestProto::clear_has_fileid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CompleteRequestProto::clear_fileid() {
  fileid_ = GOOGLE_ULONGLONG(0);
  clear_has_fileid();
}
inline ::google::protobuf::uint64 CompleteRequestProto::fileid() const {
  return fileid_;
}
inline void CompleteRequestProto::set_fileid(::google::protobuf::uint64 value) {
  set_has_fileid();
  fileid_ = value;
}

// -------------------------------------------------------------------

// CompleteResponseProto

// required bool result = 1;
inline bool CompleteResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CompleteResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CompleteResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CompleteResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool CompleteResponseProto::result() const {
  return result_;
}
inline void CompleteResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ReportBadBlocksRequestProto

// repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
inline int ReportBadBlocksRequestProto::blocks_size() const {
  return blocks_.size();
}
inline void ReportBadBlocksRequestProto::clear_blocks() {
  blocks_.Clear();
}
inline const ::Hdfs::Internal::LocatedBlockProto& ReportBadBlocksRequestProto::blocks(int index) const {
  return blocks_.Get(index);
}
inline ::Hdfs::Internal::LocatedBlockProto* ReportBadBlocksRequestProto::mutable_blocks(int index) {
  return blocks_.Mutable(index);
}
inline ::Hdfs::Internal::LocatedBlockProto* ReportBadBlocksRequestProto::add_blocks() {
  return blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto >&
ReportBadBlocksRequestProto::blocks() const {
  return blocks_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::LocatedBlockProto >*
ReportBadBlocksRequestProto::mutable_blocks() {
  return &blocks_;
}

// -------------------------------------------------------------------

// ReportBadBlocksResponseProto

// -------------------------------------------------------------------

// ConcatRequestProto

// required string trg = 1;
inline bool ConcatRequestProto::has_trg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConcatRequestProto::set_has_trg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConcatRequestProto::clear_has_trg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConcatRequestProto::clear_trg() {
  if (trg_ != &::google::protobuf::internal::kEmptyString) {
    trg_->clear();
  }
  clear_has_trg();
}
inline const ::std::string& ConcatRequestProto::trg() const {
  return *trg_;
}
inline void ConcatRequestProto::set_trg(const ::std::string& value) {
  set_has_trg();
  if (trg_ == &::google::protobuf::internal::kEmptyString) {
    trg_ = new ::std::string;
  }
  trg_->assign(value);
}
inline void ConcatRequestProto::set_trg(const char* value) {
  set_has_trg();
  if (trg_ == &::google::protobuf::internal::kEmptyString) {
    trg_ = new ::std::string;
  }
  trg_->assign(value);
}
inline void ConcatRequestProto::set_trg(const char* value, size_t size) {
  set_has_trg();
  if (trg_ == &::google::protobuf::internal::kEmptyString) {
    trg_ = new ::std::string;
  }
  trg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConcatRequestProto::mutable_trg() {
  set_has_trg();
  if (trg_ == &::google::protobuf::internal::kEmptyString) {
    trg_ = new ::std::string;
  }
  return trg_;
}
inline ::std::string* ConcatRequestProto::release_trg() {
  clear_has_trg();
  if (trg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trg_;
    trg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConcatRequestProto::set_allocated_trg(::std::string* trg) {
  if (trg_ != &::google::protobuf::internal::kEmptyString) {
    delete trg_;
  }
  if (trg) {
    set_has_trg();
    trg_ = trg;
  } else {
    clear_has_trg();
    trg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string srcs = 2;
inline int ConcatRequestProto::srcs_size() const {
  return srcs_.size();
}
inline void ConcatRequestProto::clear_srcs() {
  srcs_.Clear();
}
inline const ::std::string& ConcatRequestProto::srcs(int index) const {
  return srcs_.Get(index);
}
inline ::std::string* ConcatRequestProto::mutable_srcs(int index) {
  return srcs_.Mutable(index);
}
inline void ConcatRequestProto::set_srcs(int index, const ::std::string& value) {
  srcs_.Mutable(index)->assign(value);
}
inline void ConcatRequestProto::set_srcs(int index, const char* value) {
  srcs_.Mutable(index)->assign(value);
}
inline void ConcatRequestProto::set_srcs(int index, const char* value, size_t size) {
  srcs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConcatRequestProto::add_srcs() {
  return srcs_.Add();
}
inline void ConcatRequestProto::add_srcs(const ::std::string& value) {
  srcs_.Add()->assign(value);
}
inline void ConcatRequestProto::add_srcs(const char* value) {
  srcs_.Add()->assign(value);
}
inline void ConcatRequestProto::add_srcs(const char* value, size_t size) {
  srcs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ConcatRequestProto::srcs() const {
  return srcs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ConcatRequestProto::mutable_srcs() {
  return &srcs_;
}

// -------------------------------------------------------------------

// ConcatResponseProto

// -------------------------------------------------------------------

// TruncateRequestProto

// required string src = 1;
inline bool TruncateRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TruncateRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TruncateRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TruncateRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& TruncateRequestProto::src() const {
  return *src_;
}
inline void TruncateRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void TruncateRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void TruncateRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TruncateRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* TruncateRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TruncateRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 newLength = 2;
inline bool TruncateRequestProto::has_newlength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TruncateRequestProto::set_has_newlength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TruncateRequestProto::clear_has_newlength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TruncateRequestProto::clear_newlength() {
  newlength_ = GOOGLE_ULONGLONG(0);
  clear_has_newlength();
}
inline ::google::protobuf::uint64 TruncateRequestProto::newlength() const {
  return newlength_;
}
inline void TruncateRequestProto::set_newlength(::google::protobuf::uint64 value) {
  set_has_newlength();
  newlength_ = value;
}

// required string clientName = 3;
inline bool TruncateRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TruncateRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TruncateRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TruncateRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& TruncateRequestProto::clientname() const {
  return *clientname_;
}
inline void TruncateRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void TruncateRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void TruncateRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TruncateRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* TruncateRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TruncateRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TruncateResponseProto

// required bool result = 1;
inline bool TruncateResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TruncateResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TruncateResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TruncateResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool TruncateResponseProto::result() const {
  return result_;
}
inline void TruncateResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GetLeaseRequestProto

// required string src = 1;
inline bool GetLeaseRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLeaseRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLeaseRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLeaseRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& GetLeaseRequestProto::src() const {
  return *src_;
}
inline void GetLeaseRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetLeaseRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetLeaseRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLeaseRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* GetLeaseRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetLeaseRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string clientName = 2;
inline bool GetLeaseRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLeaseRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLeaseRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLeaseRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& GetLeaseRequestProto::clientname() const {
  return *clientname_;
}
inline void GetLeaseRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void GetLeaseRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void GetLeaseRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLeaseRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* GetLeaseRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetLeaseRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetLeaseResponseProto

// -------------------------------------------------------------------

// ReleaseLeaseRequestProto

// required string src = 1;
inline bool ReleaseLeaseRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReleaseLeaseRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReleaseLeaseRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReleaseLeaseRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& ReleaseLeaseRequestProto::src() const {
  return *src_;
}
inline void ReleaseLeaseRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void ReleaseLeaseRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void ReleaseLeaseRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReleaseLeaseRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* ReleaseLeaseRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReleaseLeaseRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string clientName = 2;
inline bool ReleaseLeaseRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReleaseLeaseRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReleaseLeaseRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReleaseLeaseRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& ReleaseLeaseRequestProto::clientname() const {
  return *clientname_;
}
inline void ReleaseLeaseRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void ReleaseLeaseRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void ReleaseLeaseRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReleaseLeaseRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* ReleaseLeaseRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReleaseLeaseRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReleaseLeaseResponseProto

// -------------------------------------------------------------------

// RenameRequestProto

// required string src = 1;
inline bool RenameRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RenameRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RenameRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RenameRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& RenameRequestProto::src() const {
  return *src_;
}
inline void RenameRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void RenameRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void RenameRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RenameRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* RenameRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RenameRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool RenameRequestProto::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RenameRequestProto::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RenameRequestProto::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RenameRequestProto::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& RenameRequestProto::dst() const {
  return *dst_;
}
inline void RenameRequestProto::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void RenameRequestProto::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void RenameRequestProto::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RenameRequestProto::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* RenameRequestProto::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RenameRequestProto::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RenameResponseProto

// required bool result = 1;
inline bool RenameResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RenameResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RenameResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RenameResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool RenameResponseProto::result() const {
  return result_;
}
inline void RenameResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Rename2RequestProto

// required string src = 1;
inline bool Rename2RequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rename2RequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rename2RequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rename2RequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& Rename2RequestProto::src() const {
  return *src_;
}
inline void Rename2RequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void Rename2RequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void Rename2RequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rename2RequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* Rename2RequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rename2RequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string dst = 2;
inline bool Rename2RequestProto::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rename2RequestProto::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rename2RequestProto::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rename2RequestProto::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& Rename2RequestProto::dst() const {
  return *dst_;
}
inline void Rename2RequestProto::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void Rename2RequestProto::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void Rename2RequestProto::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Rename2RequestProto::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* Rename2RequestProto::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Rename2RequestProto::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool overwriteDest = 3;
inline bool Rename2RequestProto::has_overwritedest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rename2RequestProto::set_has_overwritedest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rename2RequestProto::clear_has_overwritedest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rename2RequestProto::clear_overwritedest() {
  overwritedest_ = false;
  clear_has_overwritedest();
}
inline bool Rename2RequestProto::overwritedest() const {
  return overwritedest_;
}
inline void Rename2RequestProto::set_overwritedest(bool value) {
  set_has_overwritedest();
  overwritedest_ = value;
}

// -------------------------------------------------------------------

// Rename2ResponseProto

// -------------------------------------------------------------------

// DeleteRequestProto

// required string src = 1;
inline bool DeleteRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& DeleteRequestProto::src() const {
  return *src_;
}
inline void DeleteRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void DeleteRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void DeleteRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* DeleteRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeleteRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool recursive = 2;
inline bool DeleteRequestProto::has_recursive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteRequestProto::set_has_recursive() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteRequestProto::clear_has_recursive() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteRequestProto::clear_recursive() {
  recursive_ = false;
  clear_has_recursive();
}
inline bool DeleteRequestProto::recursive() const {
  return recursive_;
}
inline void DeleteRequestProto::set_recursive(bool value) {
  set_has_recursive();
  recursive_ = value;
}

// -------------------------------------------------------------------

// DeleteResponseProto

// required bool result = 1;
inline bool DeleteResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool DeleteResponseProto::result() const {
  return result_;
}
inline void DeleteResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// MkdirsRequestProto

// required string src = 1;
inline bool MkdirsRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MkdirsRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MkdirsRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MkdirsRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& MkdirsRequestProto::src() const {
  return *src_;
}
inline void MkdirsRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void MkdirsRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void MkdirsRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MkdirsRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* MkdirsRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MkdirsRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Hdfs.Internal.FsPermissionProto masked = 2;
inline bool MkdirsRequestProto::has_masked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MkdirsRequestProto::set_has_masked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MkdirsRequestProto::clear_has_masked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MkdirsRequestProto::clear_masked() {
  if (masked_ != NULL) masked_->::Hdfs::Internal::FsPermissionProto::Clear();
  clear_has_masked();
}
inline const ::Hdfs::Internal::FsPermissionProto& MkdirsRequestProto::masked() const {
  return masked_ != NULL ? *masked_ : *default_instance_->masked_;
}
inline ::Hdfs::Internal::FsPermissionProto* MkdirsRequestProto::mutable_masked() {
  set_has_masked();
  if (masked_ == NULL) masked_ = new ::Hdfs::Internal::FsPermissionProto;
  return masked_;
}
inline ::Hdfs::Internal::FsPermissionProto* MkdirsRequestProto::release_masked() {
  clear_has_masked();
  ::Hdfs::Internal::FsPermissionProto* temp = masked_;
  masked_ = NULL;
  return temp;
}
inline void MkdirsRequestProto::set_allocated_masked(::Hdfs::Internal::FsPermissionProto* masked) {
  delete masked_;
  masked_ = masked;
  if (masked) {
    set_has_masked();
  } else {
    clear_has_masked();
  }
}

// required bool createParent = 3;
inline bool MkdirsRequestProto::has_createparent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MkdirsRequestProto::set_has_createparent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MkdirsRequestProto::clear_has_createparent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MkdirsRequestProto::clear_createparent() {
  createparent_ = false;
  clear_has_createparent();
}
inline bool MkdirsRequestProto::createparent() const {
  return createparent_;
}
inline void MkdirsRequestProto::set_createparent(bool value) {
  set_has_createparent();
  createparent_ = value;
}

// -------------------------------------------------------------------

// MkdirsResponseProto

// required bool result = 1;
inline bool MkdirsResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MkdirsResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MkdirsResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MkdirsResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool MkdirsResponseProto::result() const {
  return result_;
}
inline void MkdirsResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GetListingRequestProto

// required string src = 1;
inline bool GetListingRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetListingRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetListingRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetListingRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& GetListingRequestProto::src() const {
  return *src_;
}
inline void GetListingRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetListingRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetListingRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetListingRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* GetListingRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetListingRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes startAfter = 2;
inline bool GetListingRequestProto::has_startafter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetListingRequestProto::set_has_startafter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetListingRequestProto::clear_has_startafter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetListingRequestProto::clear_startafter() {
  if (startafter_ != &::google::protobuf::internal::kEmptyString) {
    startafter_->clear();
  }
  clear_has_startafter();
}
inline const ::std::string& GetListingRequestProto::startafter() const {
  return *startafter_;
}
inline void GetListingRequestProto::set_startafter(const ::std::string& value) {
  set_has_startafter();
  if (startafter_ == &::google::protobuf::internal::kEmptyString) {
    startafter_ = new ::std::string;
  }
  startafter_->assign(value);
}
inline void GetListingRequestProto::set_startafter(const char* value) {
  set_has_startafter();
  if (startafter_ == &::google::protobuf::internal::kEmptyString) {
    startafter_ = new ::std::string;
  }
  startafter_->assign(value);
}
inline void GetListingRequestProto::set_startafter(const void* value, size_t size) {
  set_has_startafter();
  if (startafter_ == &::google::protobuf::internal::kEmptyString) {
    startafter_ = new ::std::string;
  }
  startafter_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetListingRequestProto::mutable_startafter() {
  set_has_startafter();
  if (startafter_ == &::google::protobuf::internal::kEmptyString) {
    startafter_ = new ::std::string;
  }
  return startafter_;
}
inline ::std::string* GetListingRequestProto::release_startafter() {
  clear_has_startafter();
  if (startafter_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = startafter_;
    startafter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetListingRequestProto::set_allocated_startafter(::std::string* startafter) {
  if (startafter_ != &::google::protobuf::internal::kEmptyString) {
    delete startafter_;
  }
  if (startafter) {
    set_has_startafter();
    startafter_ = startafter;
  } else {
    clear_has_startafter();
    startafter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bool needLocation = 3;
inline bool GetListingRequestProto::has_needlocation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetListingRequestProto::set_has_needlocation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetListingRequestProto::clear_has_needlocation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetListingRequestProto::clear_needlocation() {
  needlocation_ = false;
  clear_has_needlocation();
}
inline bool GetListingRequestProto::needlocation() const {
  return needlocation_;
}
inline void GetListingRequestProto::set_needlocation(bool value) {
  set_has_needlocation();
  needlocation_ = value;
}

// -------------------------------------------------------------------

// GetListingResponseProto

// optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
inline bool GetListingResponseProto::has_dirlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetListingResponseProto::set_has_dirlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetListingResponseProto::clear_has_dirlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetListingResponseProto::clear_dirlist() {
  if (dirlist_ != NULL) dirlist_->::Hdfs::Internal::DirectoryListingProto::Clear();
  clear_has_dirlist();
}
inline const ::Hdfs::Internal::DirectoryListingProto& GetListingResponseProto::dirlist() const {
  return dirlist_ != NULL ? *dirlist_ : *default_instance_->dirlist_;
}
inline ::Hdfs::Internal::DirectoryListingProto* GetListingResponseProto::mutable_dirlist() {
  set_has_dirlist();
  if (dirlist_ == NULL) dirlist_ = new ::Hdfs::Internal::DirectoryListingProto;
  return dirlist_;
}
inline ::Hdfs::Internal::DirectoryListingProto* GetListingResponseProto::release_dirlist() {
  clear_has_dirlist();
  ::Hdfs::Internal::DirectoryListingProto* temp = dirlist_;
  dirlist_ = NULL;
  return temp;
}
inline void GetListingResponseProto::set_allocated_dirlist(::Hdfs::Internal::DirectoryListingProto* dirlist) {
  delete dirlist_;
  dirlist_ = dirlist;
  if (dirlist) {
    set_has_dirlist();
  } else {
    clear_has_dirlist();
  }
}

// -------------------------------------------------------------------

// GetSnapshottableDirListingRequestProto

// -------------------------------------------------------------------

// GetSnapshottableDirListingResponseProto

// optional .Hdfs.Internal.SnapshottableDirectoryListingProto snapshottableDirList = 1;
inline bool GetSnapshottableDirListingResponseProto::has_snapshottabledirlist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSnapshottableDirListingResponseProto::set_has_snapshottabledirlist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSnapshottableDirListingResponseProto::clear_has_snapshottabledirlist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSnapshottableDirListingResponseProto::clear_snapshottabledirlist() {
  if (snapshottabledirlist_ != NULL) snapshottabledirlist_->::Hdfs::Internal::SnapshottableDirectoryListingProto::Clear();
  clear_has_snapshottabledirlist();
}
inline const ::Hdfs::Internal::SnapshottableDirectoryListingProto& GetSnapshottableDirListingResponseProto::snapshottabledirlist() const {
  return snapshottabledirlist_ != NULL ? *snapshottabledirlist_ : *default_instance_->snapshottabledirlist_;
}
inline ::Hdfs::Internal::SnapshottableDirectoryListingProto* GetSnapshottableDirListingResponseProto::mutable_snapshottabledirlist() {
  set_has_snapshottabledirlist();
  if (snapshottabledirlist_ == NULL) snapshottabledirlist_ = new ::Hdfs::Internal::SnapshottableDirectoryListingProto;
  return snapshottabledirlist_;
}
inline ::Hdfs::Internal::SnapshottableDirectoryListingProto* GetSnapshottableDirListingResponseProto::release_snapshottabledirlist() {
  clear_has_snapshottabledirlist();
  ::Hdfs::Internal::SnapshottableDirectoryListingProto* temp = snapshottabledirlist_;
  snapshottabledirlist_ = NULL;
  return temp;
}
inline void GetSnapshottableDirListingResponseProto::set_allocated_snapshottabledirlist(::Hdfs::Internal::SnapshottableDirectoryListingProto* snapshottabledirlist) {
  delete snapshottabledirlist_;
  snapshottabledirlist_ = snapshottabledirlist;
  if (snapshottabledirlist) {
    set_has_snapshottabledirlist();
  } else {
    clear_has_snapshottabledirlist();
  }
}

// -------------------------------------------------------------------

// GetSnapshotDiffReportRequestProto

// required string snapshotRoot = 1;
inline bool GetSnapshotDiffReportRequestProto::has_snapshotroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSnapshotDiffReportRequestProto::set_has_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSnapshotDiffReportRequestProto::clear_has_snapshotroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSnapshotDiffReportRequestProto::clear_snapshotroot() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    snapshotroot_->clear();
  }
  clear_has_snapshotroot();
}
inline const ::std::string& GetSnapshotDiffReportRequestProto::snapshotroot() const {
  return *snapshotroot_;
}
inline void GetSnapshotDiffReportRequestProto::set_snapshotroot(const ::std::string& value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void GetSnapshotDiffReportRequestProto::set_snapshotroot(const char* value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void GetSnapshotDiffReportRequestProto::set_snapshotroot(const char* value, size_t size) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSnapshotDiffReportRequestProto::mutable_snapshotroot() {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  return snapshotroot_;
}
inline ::std::string* GetSnapshotDiffReportRequestProto::release_snapshotroot() {
  clear_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotroot_;
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetSnapshotDiffReportRequestProto::set_allocated_snapshotroot(::std::string* snapshotroot) {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (snapshotroot) {
    set_has_snapshotroot();
    snapshotroot_ = snapshotroot;
  } else {
    clear_has_snapshotroot();
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string fromSnapshot = 2;
inline bool GetSnapshotDiffReportRequestProto::has_fromsnapshot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetSnapshotDiffReportRequestProto::set_has_fromsnapshot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetSnapshotDiffReportRequestProto::clear_has_fromsnapshot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetSnapshotDiffReportRequestProto::clear_fromsnapshot() {
  if (fromsnapshot_ != &::google::protobuf::internal::kEmptyString) {
    fromsnapshot_->clear();
  }
  clear_has_fromsnapshot();
}
inline const ::std::string& GetSnapshotDiffReportRequestProto::fromsnapshot() const {
  return *fromsnapshot_;
}
inline void GetSnapshotDiffReportRequestProto::set_fromsnapshot(const ::std::string& value) {
  set_has_fromsnapshot();
  if (fromsnapshot_ == &::google::protobuf::internal::kEmptyString) {
    fromsnapshot_ = new ::std::string;
  }
  fromsnapshot_->assign(value);
}
inline void GetSnapshotDiffReportRequestProto::set_fromsnapshot(const char* value) {
  set_has_fromsnapshot();
  if (fromsnapshot_ == &::google::protobuf::internal::kEmptyString) {
    fromsnapshot_ = new ::std::string;
  }
  fromsnapshot_->assign(value);
}
inline void GetSnapshotDiffReportRequestProto::set_fromsnapshot(const char* value, size_t size) {
  set_has_fromsnapshot();
  if (fromsnapshot_ == &::google::protobuf::internal::kEmptyString) {
    fromsnapshot_ = new ::std::string;
  }
  fromsnapshot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSnapshotDiffReportRequestProto::mutable_fromsnapshot() {
  set_has_fromsnapshot();
  if (fromsnapshot_ == &::google::protobuf::internal::kEmptyString) {
    fromsnapshot_ = new ::std::string;
  }
  return fromsnapshot_;
}
inline ::std::string* GetSnapshotDiffReportRequestProto::release_fromsnapshot() {
  clear_has_fromsnapshot();
  if (fromsnapshot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fromsnapshot_;
    fromsnapshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetSnapshotDiffReportRequestProto::set_allocated_fromsnapshot(::std::string* fromsnapshot) {
  if (fromsnapshot_ != &::google::protobuf::internal::kEmptyString) {
    delete fromsnapshot_;
  }
  if (fromsnapshot) {
    set_has_fromsnapshot();
    fromsnapshot_ = fromsnapshot;
  } else {
    clear_has_fromsnapshot();
    fromsnapshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string toSnapshot = 3;
inline bool GetSnapshotDiffReportRequestProto::has_tosnapshot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetSnapshotDiffReportRequestProto::set_has_tosnapshot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetSnapshotDiffReportRequestProto::clear_has_tosnapshot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetSnapshotDiffReportRequestProto::clear_tosnapshot() {
  if (tosnapshot_ != &::google::protobuf::internal::kEmptyString) {
    tosnapshot_->clear();
  }
  clear_has_tosnapshot();
}
inline const ::std::string& GetSnapshotDiffReportRequestProto::tosnapshot() const {
  return *tosnapshot_;
}
inline void GetSnapshotDiffReportRequestProto::set_tosnapshot(const ::std::string& value) {
  set_has_tosnapshot();
  if (tosnapshot_ == &::google::protobuf::internal::kEmptyString) {
    tosnapshot_ = new ::std::string;
  }
  tosnapshot_->assign(value);
}
inline void GetSnapshotDiffReportRequestProto::set_tosnapshot(const char* value) {
  set_has_tosnapshot();
  if (tosnapshot_ == &::google::protobuf::internal::kEmptyString) {
    tosnapshot_ = new ::std::string;
  }
  tosnapshot_->assign(value);
}
inline void GetSnapshotDiffReportRequestProto::set_tosnapshot(const char* value, size_t size) {
  set_has_tosnapshot();
  if (tosnapshot_ == &::google::protobuf::internal::kEmptyString) {
    tosnapshot_ = new ::std::string;
  }
  tosnapshot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetSnapshotDiffReportRequestProto::mutable_tosnapshot() {
  set_has_tosnapshot();
  if (tosnapshot_ == &::google::protobuf::internal::kEmptyString) {
    tosnapshot_ = new ::std::string;
  }
  return tosnapshot_;
}
inline ::std::string* GetSnapshotDiffReportRequestProto::release_tosnapshot() {
  clear_has_tosnapshot();
  if (tosnapshot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tosnapshot_;
    tosnapshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetSnapshotDiffReportRequestProto::set_allocated_tosnapshot(::std::string* tosnapshot) {
  if (tosnapshot_ != &::google::protobuf::internal::kEmptyString) {
    delete tosnapshot_;
  }
  if (tosnapshot) {
    set_has_tosnapshot();
    tosnapshot_ = tosnapshot;
  } else {
    clear_has_tosnapshot();
    tosnapshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetSnapshotDiffReportResponseProto

// required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
inline bool GetSnapshotDiffReportResponseProto::has_diffreport() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetSnapshotDiffReportResponseProto::set_has_diffreport() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetSnapshotDiffReportResponseProto::clear_has_diffreport() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetSnapshotDiffReportResponseProto::clear_diffreport() {
  if (diffreport_ != NULL) diffreport_->::Hdfs::Internal::SnapshotDiffReportProto::Clear();
  clear_has_diffreport();
}
inline const ::Hdfs::Internal::SnapshotDiffReportProto& GetSnapshotDiffReportResponseProto::diffreport() const {
  return diffreport_ != NULL ? *diffreport_ : *default_instance_->diffreport_;
}
inline ::Hdfs::Internal::SnapshotDiffReportProto* GetSnapshotDiffReportResponseProto::mutable_diffreport() {
  set_has_diffreport();
  if (diffreport_ == NULL) diffreport_ = new ::Hdfs::Internal::SnapshotDiffReportProto;
  return diffreport_;
}
inline ::Hdfs::Internal::SnapshotDiffReportProto* GetSnapshotDiffReportResponseProto::release_diffreport() {
  clear_has_diffreport();
  ::Hdfs::Internal::SnapshotDiffReportProto* temp = diffreport_;
  diffreport_ = NULL;
  return temp;
}
inline void GetSnapshotDiffReportResponseProto::set_allocated_diffreport(::Hdfs::Internal::SnapshotDiffReportProto* diffreport) {
  delete diffreport_;
  diffreport_ = diffreport;
  if (diffreport) {
    set_has_diffreport();
  } else {
    clear_has_diffreport();
  }
}

// -------------------------------------------------------------------

// RenewLeaseRequestProto

// required string clientName = 1;
inline bool RenewLeaseRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RenewLeaseRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RenewLeaseRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RenewLeaseRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& RenewLeaseRequestProto::clientname() const {
  return *clientname_;
}
inline void RenewLeaseRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void RenewLeaseRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void RenewLeaseRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RenewLeaseRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* RenewLeaseRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RenewLeaseRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RenewLeaseResponseProto

// -------------------------------------------------------------------

// RecoverLeaseRequestProto

// required string src = 1;
inline bool RecoverLeaseRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecoverLeaseRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecoverLeaseRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecoverLeaseRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& RecoverLeaseRequestProto::src() const {
  return *src_;
}
inline void RecoverLeaseRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void RecoverLeaseRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void RecoverLeaseRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecoverLeaseRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* RecoverLeaseRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RecoverLeaseRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string clientName = 2;
inline bool RecoverLeaseRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecoverLeaseRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecoverLeaseRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecoverLeaseRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& RecoverLeaseRequestProto::clientname() const {
  return *clientname_;
}
inline void RecoverLeaseRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void RecoverLeaseRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void RecoverLeaseRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecoverLeaseRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* RecoverLeaseRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RecoverLeaseRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RecoverLeaseResponseProto

// required bool result = 1;
inline bool RecoverLeaseResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecoverLeaseResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecoverLeaseResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecoverLeaseResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool RecoverLeaseResponseProto::result() const {
  return result_;
}
inline void RecoverLeaseResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GetFsStatusRequestProto

// -------------------------------------------------------------------

// GetFsStatsResponseProto

// required uint64 capacity = 1;
inline bool GetFsStatsResponseProto::has_capacity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFsStatsResponseProto::set_has_capacity() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFsStatsResponseProto::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFsStatsResponseProto::clear_capacity() {
  capacity_ = GOOGLE_ULONGLONG(0);
  clear_has_capacity();
}
inline ::google::protobuf::uint64 GetFsStatsResponseProto::capacity() const {
  return capacity_;
}
inline void GetFsStatsResponseProto::set_capacity(::google::protobuf::uint64 value) {
  set_has_capacity();
  capacity_ = value;
}

// required uint64 used = 2;
inline bool GetFsStatsResponseProto::has_used() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFsStatsResponseProto::set_has_used() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetFsStatsResponseProto::clear_has_used() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetFsStatsResponseProto::clear_used() {
  used_ = GOOGLE_ULONGLONG(0);
  clear_has_used();
}
inline ::google::protobuf::uint64 GetFsStatsResponseProto::used() const {
  return used_;
}
inline void GetFsStatsResponseProto::set_used(::google::protobuf::uint64 value) {
  set_has_used();
  used_ = value;
}

// required uint64 remaining = 3;
inline bool GetFsStatsResponseProto::has_remaining() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetFsStatsResponseProto::set_has_remaining() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetFsStatsResponseProto::clear_has_remaining() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetFsStatsResponseProto::clear_remaining() {
  remaining_ = GOOGLE_ULONGLONG(0);
  clear_has_remaining();
}
inline ::google::protobuf::uint64 GetFsStatsResponseProto::remaining() const {
  return remaining_;
}
inline void GetFsStatsResponseProto::set_remaining(::google::protobuf::uint64 value) {
  set_has_remaining();
  remaining_ = value;
}

// required uint64 under_replicated = 4;
inline bool GetFsStatsResponseProto::has_under_replicated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetFsStatsResponseProto::set_has_under_replicated() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetFsStatsResponseProto::clear_has_under_replicated() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetFsStatsResponseProto::clear_under_replicated() {
  under_replicated_ = GOOGLE_ULONGLONG(0);
  clear_has_under_replicated();
}
inline ::google::protobuf::uint64 GetFsStatsResponseProto::under_replicated() const {
  return under_replicated_;
}
inline void GetFsStatsResponseProto::set_under_replicated(::google::protobuf::uint64 value) {
  set_has_under_replicated();
  under_replicated_ = value;
}

// required uint64 corrupt_blocks = 5;
inline bool GetFsStatsResponseProto::has_corrupt_blocks() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetFsStatsResponseProto::set_has_corrupt_blocks() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetFsStatsResponseProto::clear_has_corrupt_blocks() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetFsStatsResponseProto::clear_corrupt_blocks() {
  corrupt_blocks_ = GOOGLE_ULONGLONG(0);
  clear_has_corrupt_blocks();
}
inline ::google::protobuf::uint64 GetFsStatsResponseProto::corrupt_blocks() const {
  return corrupt_blocks_;
}
inline void GetFsStatsResponseProto::set_corrupt_blocks(::google::protobuf::uint64 value) {
  set_has_corrupt_blocks();
  corrupt_blocks_ = value;
}

// required uint64 missing_blocks = 6;
inline bool GetFsStatsResponseProto::has_missing_blocks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetFsStatsResponseProto::set_has_missing_blocks() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetFsStatsResponseProto::clear_has_missing_blocks() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetFsStatsResponseProto::clear_missing_blocks() {
  missing_blocks_ = GOOGLE_ULONGLONG(0);
  clear_has_missing_blocks();
}
inline ::google::protobuf::uint64 GetFsStatsResponseProto::missing_blocks() const {
  return missing_blocks_;
}
inline void GetFsStatsResponseProto::set_missing_blocks(::google::protobuf::uint64 value) {
  set_has_missing_blocks();
  missing_blocks_ = value;
}

// -------------------------------------------------------------------

// GetDatanodeReportRequestProto

// required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
inline bool GetDatanodeReportRequestProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDatanodeReportRequestProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDatanodeReportRequestProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDatanodeReportRequestProto::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Hdfs::Internal::DatanodeReportTypeProto GetDatanodeReportRequestProto::type() const {
  return static_cast< ::Hdfs::Internal::DatanodeReportTypeProto >(type_);
}
inline void GetDatanodeReportRequestProto::set_type(::Hdfs::Internal::DatanodeReportTypeProto value) {
  assert(::Hdfs::Internal::DatanodeReportTypeProto_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// GetDatanodeReportResponseProto

// repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
inline int GetDatanodeReportResponseProto::di_size() const {
  return di_.size();
}
inline void GetDatanodeReportResponseProto::clear_di() {
  di_.Clear();
}
inline const ::Hdfs::Internal::DatanodeInfoProto& GetDatanodeReportResponseProto::di(int index) const {
  return di_.Get(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetDatanodeReportResponseProto::mutable_di(int index) {
  return di_.Mutable(index);
}
inline ::Hdfs::Internal::DatanodeInfoProto* GetDatanodeReportResponseProto::add_di() {
  return di_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >&
GetDatanodeReportResponseProto::di() const {
  return di_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeInfoProto >*
GetDatanodeReportResponseProto::mutable_di() {
  return &di_;
}

// -------------------------------------------------------------------

// GetPreferredBlockSizeRequestProto

// required string filename = 1;
inline bool GetPreferredBlockSizeRequestProto::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPreferredBlockSizeRequestProto::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPreferredBlockSizeRequestProto::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPreferredBlockSizeRequestProto::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& GetPreferredBlockSizeRequestProto::filename() const {
  return *filename_;
}
inline void GetPreferredBlockSizeRequestProto::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void GetPreferredBlockSizeRequestProto::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void GetPreferredBlockSizeRequestProto::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetPreferredBlockSizeRequestProto::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* GetPreferredBlockSizeRequestProto::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetPreferredBlockSizeRequestProto::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetPreferredBlockSizeResponseProto

// required uint64 bsize = 1;
inline bool GetPreferredBlockSizeResponseProto::has_bsize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPreferredBlockSizeResponseProto::set_has_bsize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPreferredBlockSizeResponseProto::clear_has_bsize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPreferredBlockSizeResponseProto::clear_bsize() {
  bsize_ = GOOGLE_ULONGLONG(0);
  clear_has_bsize();
}
inline ::google::protobuf::uint64 GetPreferredBlockSizeResponseProto::bsize() const {
  return bsize_;
}
inline void GetPreferredBlockSizeResponseProto::set_bsize(::google::protobuf::uint64 value) {
  set_has_bsize();
  bsize_ = value;
}

// -------------------------------------------------------------------

// SetSafeModeRequestProto

// required .Hdfs.Internal.SafeModeActionProto action = 1;
inline bool SetSafeModeRequestProto::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetSafeModeRequestProto::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetSafeModeRequestProto::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetSafeModeRequestProto::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::Hdfs::Internal::SafeModeActionProto SetSafeModeRequestProto::action() const {
  return static_cast< ::Hdfs::Internal::SafeModeActionProto >(action_);
}
inline void SetSafeModeRequestProto::set_action(::Hdfs::Internal::SafeModeActionProto value) {
  assert(::Hdfs::Internal::SafeModeActionProto_IsValid(value));
  set_has_action();
  action_ = value;
}

// optional bool checked = 2 [default = false];
inline bool SetSafeModeRequestProto::has_checked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetSafeModeRequestProto::set_has_checked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetSafeModeRequestProto::clear_has_checked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetSafeModeRequestProto::clear_checked() {
  checked_ = false;
  clear_has_checked();
}
inline bool SetSafeModeRequestProto::checked() const {
  return checked_;
}
inline void SetSafeModeRequestProto::set_checked(bool value) {
  set_has_checked();
  checked_ = value;
}

// -------------------------------------------------------------------

// SetSafeModeResponseProto

// required bool result = 1;
inline bool SetSafeModeResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetSafeModeResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetSafeModeResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetSafeModeResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool SetSafeModeResponseProto::result() const {
  return result_;
}
inline void SetSafeModeResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SaveNamespaceRequestProto

// -------------------------------------------------------------------

// SaveNamespaceResponseProto

// -------------------------------------------------------------------

// RollEditsRequestProto

// -------------------------------------------------------------------

// RollEditsResponseProto

// required uint64 newSegmentTxId = 1;
inline bool RollEditsResponseProto::has_newsegmenttxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RollEditsResponseProto::set_has_newsegmenttxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RollEditsResponseProto::clear_has_newsegmenttxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RollEditsResponseProto::clear_newsegmenttxid() {
  newsegmenttxid_ = GOOGLE_ULONGLONG(0);
  clear_has_newsegmenttxid();
}
inline ::google::protobuf::uint64 RollEditsResponseProto::newsegmenttxid() const {
  return newsegmenttxid_;
}
inline void RollEditsResponseProto::set_newsegmenttxid(::google::protobuf::uint64 value) {
  set_has_newsegmenttxid();
  newsegmenttxid_ = value;
}

// -------------------------------------------------------------------

// RestoreFailedStorageRequestProto

// required string arg = 1;
inline bool RestoreFailedStorageRequestProto::has_arg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestoreFailedStorageRequestProto::set_has_arg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RestoreFailedStorageRequestProto::clear_has_arg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RestoreFailedStorageRequestProto::clear_arg() {
  if (arg_ != &::google::protobuf::internal::kEmptyString) {
    arg_->clear();
  }
  clear_has_arg();
}
inline const ::std::string& RestoreFailedStorageRequestProto::arg() const {
  return *arg_;
}
inline void RestoreFailedStorageRequestProto::set_arg(const ::std::string& value) {
  set_has_arg();
  if (arg_ == &::google::protobuf::internal::kEmptyString) {
    arg_ = new ::std::string;
  }
  arg_->assign(value);
}
inline void RestoreFailedStorageRequestProto::set_arg(const char* value) {
  set_has_arg();
  if (arg_ == &::google::protobuf::internal::kEmptyString) {
    arg_ = new ::std::string;
  }
  arg_->assign(value);
}
inline void RestoreFailedStorageRequestProto::set_arg(const char* value, size_t size) {
  set_has_arg();
  if (arg_ == &::google::protobuf::internal::kEmptyString) {
    arg_ = new ::std::string;
  }
  arg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RestoreFailedStorageRequestProto::mutable_arg() {
  set_has_arg();
  if (arg_ == &::google::protobuf::internal::kEmptyString) {
    arg_ = new ::std::string;
  }
  return arg_;
}
inline ::std::string* RestoreFailedStorageRequestProto::release_arg() {
  clear_has_arg();
  if (arg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = arg_;
    arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RestoreFailedStorageRequestProto::set_allocated_arg(::std::string* arg) {
  if (arg_ != &::google::protobuf::internal::kEmptyString) {
    delete arg_;
  }
  if (arg) {
    set_has_arg();
    arg_ = arg;
  } else {
    clear_has_arg();
    arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RestoreFailedStorageResponseProto

// required bool result = 1;
inline bool RestoreFailedStorageResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RestoreFailedStorageResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RestoreFailedStorageResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RestoreFailedStorageResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool RestoreFailedStorageResponseProto::result() const {
  return result_;
}
inline void RestoreFailedStorageResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// RefreshNodesRequestProto

// -------------------------------------------------------------------

// RefreshNodesResponseProto

// -------------------------------------------------------------------

// FinalizeUpgradeRequestProto

// -------------------------------------------------------------------

// FinalizeUpgradeResponseProto

// -------------------------------------------------------------------

// ListCorruptFileBlocksRequestProto

// required string path = 1;
inline bool ListCorruptFileBlocksRequestProto::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListCorruptFileBlocksRequestProto::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListCorruptFileBlocksRequestProto::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListCorruptFileBlocksRequestProto::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ListCorruptFileBlocksRequestProto::path() const {
  return *path_;
}
inline void ListCorruptFileBlocksRequestProto::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ListCorruptFileBlocksRequestProto::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ListCorruptFileBlocksRequestProto::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListCorruptFileBlocksRequestProto::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ListCorruptFileBlocksRequestProto::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListCorruptFileBlocksRequestProto::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string cookie = 2;
inline bool ListCorruptFileBlocksRequestProto::has_cookie() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListCorruptFileBlocksRequestProto::set_has_cookie() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListCorruptFileBlocksRequestProto::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListCorruptFileBlocksRequestProto::clear_cookie() {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    cookie_->clear();
  }
  clear_has_cookie();
}
inline const ::std::string& ListCorruptFileBlocksRequestProto::cookie() const {
  return *cookie_;
}
inline void ListCorruptFileBlocksRequestProto::set_cookie(const ::std::string& value) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::kEmptyString) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(value);
}
inline void ListCorruptFileBlocksRequestProto::set_cookie(const char* value) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::kEmptyString) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(value);
}
inline void ListCorruptFileBlocksRequestProto::set_cookie(const char* value, size_t size) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::kEmptyString) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListCorruptFileBlocksRequestProto::mutable_cookie() {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::kEmptyString) {
    cookie_ = new ::std::string;
  }
  return cookie_;
}
inline ::std::string* ListCorruptFileBlocksRequestProto::release_cookie() {
  clear_has_cookie();
  if (cookie_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cookie_;
    cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListCorruptFileBlocksRequestProto::set_allocated_cookie(::std::string* cookie) {
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (cookie) {
    set_has_cookie();
    cookie_ = cookie;
  } else {
    clear_has_cookie();
    cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ListCorruptFileBlocksResponseProto

// required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
inline bool ListCorruptFileBlocksResponseProto::has_corrupt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListCorruptFileBlocksResponseProto::set_has_corrupt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListCorruptFileBlocksResponseProto::clear_has_corrupt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListCorruptFileBlocksResponseProto::clear_corrupt() {
  if (corrupt_ != NULL) corrupt_->::Hdfs::Internal::CorruptFileBlocksProto::Clear();
  clear_has_corrupt();
}
inline const ::Hdfs::Internal::CorruptFileBlocksProto& ListCorruptFileBlocksResponseProto::corrupt() const {
  return corrupt_ != NULL ? *corrupt_ : *default_instance_->corrupt_;
}
inline ::Hdfs::Internal::CorruptFileBlocksProto* ListCorruptFileBlocksResponseProto::mutable_corrupt() {
  set_has_corrupt();
  if (corrupt_ == NULL) corrupt_ = new ::Hdfs::Internal::CorruptFileBlocksProto;
  return corrupt_;
}
inline ::Hdfs::Internal::CorruptFileBlocksProto* ListCorruptFileBlocksResponseProto::release_corrupt() {
  clear_has_corrupt();
  ::Hdfs::Internal::CorruptFileBlocksProto* temp = corrupt_;
  corrupt_ = NULL;
  return temp;
}
inline void ListCorruptFileBlocksResponseProto::set_allocated_corrupt(::Hdfs::Internal::CorruptFileBlocksProto* corrupt) {
  delete corrupt_;
  corrupt_ = corrupt;
  if (corrupt) {
    set_has_corrupt();
  } else {
    clear_has_corrupt();
  }
}

// -------------------------------------------------------------------

// MetaSaveRequestProto

// required string filename = 1;
inline bool MetaSaveRequestProto::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetaSaveRequestProto::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MetaSaveRequestProto::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MetaSaveRequestProto::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& MetaSaveRequestProto::filename() const {
  return *filename_;
}
inline void MetaSaveRequestProto::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void MetaSaveRequestProto::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void MetaSaveRequestProto::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MetaSaveRequestProto::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* MetaSaveRequestProto::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MetaSaveRequestProto::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MetaSaveResponseProto

// -------------------------------------------------------------------

// GetFileInfoRequestProto

// required string src = 1;
inline bool GetFileInfoRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileInfoRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFileInfoRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFileInfoRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& GetFileInfoRequestProto::src() const {
  return *src_;
}
inline void GetFileInfoRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetFileInfoRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetFileInfoRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFileInfoRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* GetFileInfoRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetFileInfoRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetFileInfoResponseProto

// optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
inline bool GetFileInfoResponseProto::has_fs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileInfoResponseProto::set_has_fs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFileInfoResponseProto::clear_has_fs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFileInfoResponseProto::clear_fs() {
  if (fs_ != NULL) fs_->::Hdfs::Internal::HdfsFileStatusProto::Clear();
  clear_has_fs();
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& GetFileInfoResponseProto::fs() const {
  return fs_ != NULL ? *fs_ : *default_instance_->fs_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileInfoResponseProto::mutable_fs() {
  set_has_fs();
  if (fs_ == NULL) fs_ = new ::Hdfs::Internal::HdfsFileStatusProto;
  return fs_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileInfoResponseProto::release_fs() {
  clear_has_fs();
  ::Hdfs::Internal::HdfsFileStatusProto* temp = fs_;
  fs_ = NULL;
  return temp;
}
inline void GetFileInfoResponseProto::set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs) {
  delete fs_;
  fs_ = fs;
  if (fs) {
    set_has_fs();
  } else {
    clear_has_fs();
  }
}

// -------------------------------------------------------------------

// IsFileClosedRequestProto

// required string src = 1;
inline bool IsFileClosedRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsFileClosedRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsFileClosedRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsFileClosedRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& IsFileClosedRequestProto::src() const {
  return *src_;
}
inline void IsFileClosedRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void IsFileClosedRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void IsFileClosedRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IsFileClosedRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* IsFileClosedRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void IsFileClosedRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// IsFileClosedResponseProto

// required bool result = 1;
inline bool IsFileClosedResponseProto::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IsFileClosedResponseProto::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IsFileClosedResponseProto::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IsFileClosedResponseProto::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool IsFileClosedResponseProto::result() const {
  return result_;
}
inline void IsFileClosedResponseProto::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CacheDirectiveInfoProto

// optional int64 id = 1;
inline bool CacheDirectiveInfoProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheDirectiveInfoProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheDirectiveInfoProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheDirectiveInfoProto::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 CacheDirectiveInfoProto::id() const {
  return id_;
}
inline void CacheDirectiveInfoProto::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string path = 2;
inline bool CacheDirectiveInfoProto::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheDirectiveInfoProto::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheDirectiveInfoProto::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheDirectiveInfoProto::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& CacheDirectiveInfoProto::path() const {
  return *path_;
}
inline void CacheDirectiveInfoProto::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CacheDirectiveInfoProto::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CacheDirectiveInfoProto::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheDirectiveInfoProto::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* CacheDirectiveInfoProto::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheDirectiveInfoProto::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 replication = 3;
inline bool CacheDirectiveInfoProto::has_replication() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheDirectiveInfoProto::set_has_replication() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheDirectiveInfoProto::clear_has_replication() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheDirectiveInfoProto::clear_replication() {
  replication_ = 0u;
  clear_has_replication();
}
inline ::google::protobuf::uint32 CacheDirectiveInfoProto::replication() const {
  return replication_;
}
inline void CacheDirectiveInfoProto::set_replication(::google::protobuf::uint32 value) {
  set_has_replication();
  replication_ = value;
}

// optional string pool = 4;
inline bool CacheDirectiveInfoProto::has_pool() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheDirectiveInfoProto::set_has_pool() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheDirectiveInfoProto::clear_has_pool() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheDirectiveInfoProto::clear_pool() {
  if (pool_ != &::google::protobuf::internal::kEmptyString) {
    pool_->clear();
  }
  clear_has_pool();
}
inline const ::std::string& CacheDirectiveInfoProto::pool() const {
  return *pool_;
}
inline void CacheDirectiveInfoProto::set_pool(const ::std::string& value) {
  set_has_pool();
  if (pool_ == &::google::protobuf::internal::kEmptyString) {
    pool_ = new ::std::string;
  }
  pool_->assign(value);
}
inline void CacheDirectiveInfoProto::set_pool(const char* value) {
  set_has_pool();
  if (pool_ == &::google::protobuf::internal::kEmptyString) {
    pool_ = new ::std::string;
  }
  pool_->assign(value);
}
inline void CacheDirectiveInfoProto::set_pool(const char* value, size_t size) {
  set_has_pool();
  if (pool_ == &::google::protobuf::internal::kEmptyString) {
    pool_ = new ::std::string;
  }
  pool_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CacheDirectiveInfoProto::mutable_pool() {
  set_has_pool();
  if (pool_ == &::google::protobuf::internal::kEmptyString) {
    pool_ = new ::std::string;
  }
  return pool_;
}
inline ::std::string* CacheDirectiveInfoProto::release_pool() {
  clear_has_pool();
  if (pool_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pool_;
    pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CacheDirectiveInfoProto::set_allocated_pool(::std::string* pool) {
  if (pool_ != &::google::protobuf::internal::kEmptyString) {
    delete pool_;
  }
  if (pool) {
    set_has_pool();
    pool_ = pool;
  } else {
    clear_has_pool();
    pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
inline bool CacheDirectiveInfoProto::has_expiration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CacheDirectiveInfoProto::set_has_expiration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CacheDirectiveInfoProto::clear_has_expiration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CacheDirectiveInfoProto::clear_expiration() {
  if (expiration_ != NULL) expiration_->::Hdfs::Internal::CacheDirectiveInfoExpirationProto::Clear();
  clear_has_expiration();
}
inline const ::Hdfs::Internal::CacheDirectiveInfoExpirationProto& CacheDirectiveInfoProto::expiration() const {
  return expiration_ != NULL ? *expiration_ : *default_instance_->expiration_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* CacheDirectiveInfoProto::mutable_expiration() {
  set_has_expiration();
  if (expiration_ == NULL) expiration_ = new ::Hdfs::Internal::CacheDirectiveInfoExpirationProto;
  return expiration_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* CacheDirectiveInfoProto::release_expiration() {
  clear_has_expiration();
  ::Hdfs::Internal::CacheDirectiveInfoExpirationProto* temp = expiration_;
  expiration_ = NULL;
  return temp;
}
inline void CacheDirectiveInfoProto::set_allocated_expiration(::Hdfs::Internal::CacheDirectiveInfoExpirationProto* expiration) {
  delete expiration_;
  expiration_ = expiration;
  if (expiration) {
    set_has_expiration();
  } else {
    clear_has_expiration();
  }
}

// -------------------------------------------------------------------

// CacheDirectiveInfoExpirationProto

// required int64 millis = 1;
inline bool CacheDirectiveInfoExpirationProto::has_millis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheDirectiveInfoExpirationProto::set_has_millis() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheDirectiveInfoExpirationProto::clear_has_millis() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheDirectiveInfoExpirationProto::clear_millis() {
  millis_ = GOOGLE_LONGLONG(0);
  clear_has_millis();
}
inline ::google::protobuf::int64 CacheDirectiveInfoExpirationProto::millis() const {
  return millis_;
}
inline void CacheDirectiveInfoExpirationProto::set_millis(::google::protobuf::int64 value) {
  set_has_millis();
  millis_ = value;
}

// required bool isRelative = 2;
inline bool CacheDirectiveInfoExpirationProto::has_isrelative() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheDirectiveInfoExpirationProto::set_has_isrelative() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheDirectiveInfoExpirationProto::clear_has_isrelative() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheDirectiveInfoExpirationProto::clear_isrelative() {
  isrelative_ = false;
  clear_has_isrelative();
}
inline bool CacheDirectiveInfoExpirationProto::isrelative() const {
  return isrelative_;
}
inline void CacheDirectiveInfoExpirationProto::set_isrelative(bool value) {
  set_has_isrelative();
  isrelative_ = value;
}

// -------------------------------------------------------------------

// CacheDirectiveStatsProto

// required int64 bytesNeeded = 1;
inline bool CacheDirectiveStatsProto::has_bytesneeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheDirectiveStatsProto::set_has_bytesneeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheDirectiveStatsProto::clear_has_bytesneeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheDirectiveStatsProto::clear_bytesneeded() {
  bytesneeded_ = GOOGLE_LONGLONG(0);
  clear_has_bytesneeded();
}
inline ::google::protobuf::int64 CacheDirectiveStatsProto::bytesneeded() const {
  return bytesneeded_;
}
inline void CacheDirectiveStatsProto::set_bytesneeded(::google::protobuf::int64 value) {
  set_has_bytesneeded();
  bytesneeded_ = value;
}

// required int64 bytesCached = 2;
inline bool CacheDirectiveStatsProto::has_bytescached() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheDirectiveStatsProto::set_has_bytescached() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheDirectiveStatsProto::clear_has_bytescached() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheDirectiveStatsProto::clear_bytescached() {
  bytescached_ = GOOGLE_LONGLONG(0);
  clear_has_bytescached();
}
inline ::google::protobuf::int64 CacheDirectiveStatsProto::bytescached() const {
  return bytescached_;
}
inline void CacheDirectiveStatsProto::set_bytescached(::google::protobuf::int64 value) {
  set_has_bytescached();
  bytescached_ = value;
}

// required int64 filesNeeded = 3;
inline bool CacheDirectiveStatsProto::has_filesneeded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CacheDirectiveStatsProto::set_has_filesneeded() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CacheDirectiveStatsProto::clear_has_filesneeded() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CacheDirectiveStatsProto::clear_filesneeded() {
  filesneeded_ = GOOGLE_LONGLONG(0);
  clear_has_filesneeded();
}
inline ::google::protobuf::int64 CacheDirectiveStatsProto::filesneeded() const {
  return filesneeded_;
}
inline void CacheDirectiveStatsProto::set_filesneeded(::google::protobuf::int64 value) {
  set_has_filesneeded();
  filesneeded_ = value;
}

// required int64 filesCached = 4;
inline bool CacheDirectiveStatsProto::has_filescached() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CacheDirectiveStatsProto::set_has_filescached() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CacheDirectiveStatsProto::clear_has_filescached() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CacheDirectiveStatsProto::clear_filescached() {
  filescached_ = GOOGLE_LONGLONG(0);
  clear_has_filescached();
}
inline ::google::protobuf::int64 CacheDirectiveStatsProto::filescached() const {
  return filescached_;
}
inline void CacheDirectiveStatsProto::set_filescached(::google::protobuf::int64 value) {
  set_has_filescached();
  filescached_ = value;
}

// required bool hasExpired = 5;
inline bool CacheDirectiveStatsProto::has_hasexpired() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CacheDirectiveStatsProto::set_has_hasexpired() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CacheDirectiveStatsProto::clear_has_hasexpired() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CacheDirectiveStatsProto::clear_hasexpired() {
  hasexpired_ = false;
  clear_has_hasexpired();
}
inline bool CacheDirectiveStatsProto::hasexpired() const {
  return hasexpired_;
}
inline void CacheDirectiveStatsProto::set_hasexpired(bool value) {
  set_has_hasexpired();
  hasexpired_ = value;
}

// -------------------------------------------------------------------

// AddCacheDirectiveRequestProto

// required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
inline bool AddCacheDirectiveRequestProto::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddCacheDirectiveRequestProto::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddCacheDirectiveRequestProto::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddCacheDirectiveRequestProto::clear_info() {
  if (info_ != NULL) info_->::Hdfs::Internal::CacheDirectiveInfoProto::Clear();
  clear_has_info();
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& AddCacheDirectiveRequestProto::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* AddCacheDirectiveRequestProto::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Hdfs::Internal::CacheDirectiveInfoProto;
  return info_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* AddCacheDirectiveRequestProto::release_info() {
  clear_has_info();
  ::Hdfs::Internal::CacheDirectiveInfoProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void AddCacheDirectiveRequestProto::set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint32 cacheFlags = 2;
inline bool AddCacheDirectiveRequestProto::has_cacheflags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddCacheDirectiveRequestProto::set_has_cacheflags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddCacheDirectiveRequestProto::clear_has_cacheflags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddCacheDirectiveRequestProto::clear_cacheflags() {
  cacheflags_ = 0u;
  clear_has_cacheflags();
}
inline ::google::protobuf::uint32 AddCacheDirectiveRequestProto::cacheflags() const {
  return cacheflags_;
}
inline void AddCacheDirectiveRequestProto::set_cacheflags(::google::protobuf::uint32 value) {
  set_has_cacheflags();
  cacheflags_ = value;
}

// -------------------------------------------------------------------

// AddCacheDirectiveResponseProto

// required int64 id = 1;
inline bool AddCacheDirectiveResponseProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddCacheDirectiveResponseProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddCacheDirectiveResponseProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddCacheDirectiveResponseProto::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 AddCacheDirectiveResponseProto::id() const {
  return id_;
}
inline void AddCacheDirectiveResponseProto::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// ModifyCacheDirectiveRequestProto

// required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
inline bool ModifyCacheDirectiveRequestProto::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyCacheDirectiveRequestProto::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyCacheDirectiveRequestProto::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyCacheDirectiveRequestProto::clear_info() {
  if (info_ != NULL) info_->::Hdfs::Internal::CacheDirectiveInfoProto::Clear();
  clear_has_info();
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& ModifyCacheDirectiveRequestProto::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ModifyCacheDirectiveRequestProto::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Hdfs::Internal::CacheDirectiveInfoProto;
  return info_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ModifyCacheDirectiveRequestProto::release_info() {
  clear_has_info();
  ::Hdfs::Internal::CacheDirectiveInfoProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ModifyCacheDirectiveRequestProto::set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint32 cacheFlags = 2;
inline bool ModifyCacheDirectiveRequestProto::has_cacheflags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModifyCacheDirectiveRequestProto::set_has_cacheflags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModifyCacheDirectiveRequestProto::clear_has_cacheflags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModifyCacheDirectiveRequestProto::clear_cacheflags() {
  cacheflags_ = 0u;
  clear_has_cacheflags();
}
inline ::google::protobuf::uint32 ModifyCacheDirectiveRequestProto::cacheflags() const {
  return cacheflags_;
}
inline void ModifyCacheDirectiveRequestProto::set_cacheflags(::google::protobuf::uint32 value) {
  set_has_cacheflags();
  cacheflags_ = value;
}

// -------------------------------------------------------------------

// ModifyCacheDirectiveResponseProto

// -------------------------------------------------------------------

// RemoveCacheDirectiveRequestProto

// required int64 id = 1;
inline bool RemoveCacheDirectiveRequestProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveCacheDirectiveRequestProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveCacheDirectiveRequestProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveCacheDirectiveRequestProto::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 RemoveCacheDirectiveRequestProto::id() const {
  return id_;
}
inline void RemoveCacheDirectiveRequestProto::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// RemoveCacheDirectiveResponseProto

// -------------------------------------------------------------------

// ListCacheDirectivesRequestProto

// required int64 prevId = 1;
inline bool ListCacheDirectivesRequestProto::has_previd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListCacheDirectivesRequestProto::set_has_previd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListCacheDirectivesRequestProto::clear_has_previd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListCacheDirectivesRequestProto::clear_previd() {
  previd_ = GOOGLE_LONGLONG(0);
  clear_has_previd();
}
inline ::google::protobuf::int64 ListCacheDirectivesRequestProto::previd() const {
  return previd_;
}
inline void ListCacheDirectivesRequestProto::set_previd(::google::protobuf::int64 value) {
  set_has_previd();
  previd_ = value;
}

// required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
inline bool ListCacheDirectivesRequestProto::has_filter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListCacheDirectivesRequestProto::set_has_filter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListCacheDirectivesRequestProto::clear_has_filter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListCacheDirectivesRequestProto::clear_filter() {
  if (filter_ != NULL) filter_->::Hdfs::Internal::CacheDirectiveInfoProto::Clear();
  clear_has_filter();
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& ListCacheDirectivesRequestProto::filter() const {
  return filter_ != NULL ? *filter_ : *default_instance_->filter_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ListCacheDirectivesRequestProto::mutable_filter() {
  set_has_filter();
  if (filter_ == NULL) filter_ = new ::Hdfs::Internal::CacheDirectiveInfoProto;
  return filter_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* ListCacheDirectivesRequestProto::release_filter() {
  clear_has_filter();
  ::Hdfs::Internal::CacheDirectiveInfoProto* temp = filter_;
  filter_ = NULL;
  return temp;
}
inline void ListCacheDirectivesRequestProto::set_allocated_filter(::Hdfs::Internal::CacheDirectiveInfoProto* filter) {
  delete filter_;
  filter_ = filter;
  if (filter) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
}

// -------------------------------------------------------------------

// CacheDirectiveEntryProto

// required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
inline bool CacheDirectiveEntryProto::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CacheDirectiveEntryProto::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CacheDirectiveEntryProto::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CacheDirectiveEntryProto::clear_info() {
  if (info_ != NULL) info_->::Hdfs::Internal::CacheDirectiveInfoProto::Clear();
  clear_has_info();
}
inline const ::Hdfs::Internal::CacheDirectiveInfoProto& CacheDirectiveEntryProto::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* CacheDirectiveEntryProto::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Hdfs::Internal::CacheDirectiveInfoProto;
  return info_;
}
inline ::Hdfs::Internal::CacheDirectiveInfoProto* CacheDirectiveEntryProto::release_info() {
  clear_has_info();
  ::Hdfs::Internal::CacheDirectiveInfoProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void CacheDirectiveEntryProto::set_allocated_info(::Hdfs::Internal::CacheDirectiveInfoProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
inline bool CacheDirectiveEntryProto::has_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CacheDirectiveEntryProto::set_has_stats() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CacheDirectiveEntryProto::clear_has_stats() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CacheDirectiveEntryProto::clear_stats() {
  if (stats_ != NULL) stats_->::Hdfs::Internal::CacheDirectiveStatsProto::Clear();
  clear_has_stats();
}
inline const ::Hdfs::Internal::CacheDirectiveStatsProto& CacheDirectiveEntryProto::stats() const {
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::Hdfs::Internal::CacheDirectiveStatsProto* CacheDirectiveEntryProto::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) stats_ = new ::Hdfs::Internal::CacheDirectiveStatsProto;
  return stats_;
}
inline ::Hdfs::Internal::CacheDirectiveStatsProto* CacheDirectiveEntryProto::release_stats() {
  clear_has_stats();
  ::Hdfs::Internal::CacheDirectiveStatsProto* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void CacheDirectiveEntryProto::set_allocated_stats(::Hdfs::Internal::CacheDirectiveStatsProto* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
}

// -------------------------------------------------------------------

// ListCacheDirectivesResponseProto

// repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
inline int ListCacheDirectivesResponseProto::elements_size() const {
  return elements_.size();
}
inline void ListCacheDirectivesResponseProto::clear_elements() {
  elements_.Clear();
}
inline const ::Hdfs::Internal::CacheDirectiveEntryProto& ListCacheDirectivesResponseProto::elements(int index) const {
  return elements_.Get(index);
}
inline ::Hdfs::Internal::CacheDirectiveEntryProto* ListCacheDirectivesResponseProto::mutable_elements(int index) {
  return elements_.Mutable(index);
}
inline ::Hdfs::Internal::CacheDirectiveEntryProto* ListCacheDirectivesResponseProto::add_elements() {
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto >&
ListCacheDirectivesResponseProto::elements() const {
  return elements_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CacheDirectiveEntryProto >*
ListCacheDirectivesResponseProto::mutable_elements() {
  return &elements_;
}

// required bool hasMore = 2;
inline bool ListCacheDirectivesResponseProto::has_hasmore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListCacheDirectivesResponseProto::set_has_hasmore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListCacheDirectivesResponseProto::clear_has_hasmore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListCacheDirectivesResponseProto::clear_hasmore() {
  hasmore_ = false;
  clear_has_hasmore();
}
inline bool ListCacheDirectivesResponseProto::hasmore() const {
  return hasmore_;
}
inline void ListCacheDirectivesResponseProto::set_hasmore(bool value) {
  set_has_hasmore();
  hasmore_ = value;
}

// -------------------------------------------------------------------

// CachePoolInfoProto

// optional string poolName = 1;
inline bool CachePoolInfoProto::has_poolname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CachePoolInfoProto::set_has_poolname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CachePoolInfoProto::clear_has_poolname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CachePoolInfoProto::clear_poolname() {
  if (poolname_ != &::google::protobuf::internal::kEmptyString) {
    poolname_->clear();
  }
  clear_has_poolname();
}
inline const ::std::string& CachePoolInfoProto::poolname() const {
  return *poolname_;
}
inline void CachePoolInfoProto::set_poolname(const ::std::string& value) {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  poolname_->assign(value);
}
inline void CachePoolInfoProto::set_poolname(const char* value) {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  poolname_->assign(value);
}
inline void CachePoolInfoProto::set_poolname(const char* value, size_t size) {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  poolname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CachePoolInfoProto::mutable_poolname() {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  return poolname_;
}
inline ::std::string* CachePoolInfoProto::release_poolname() {
  clear_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poolname_;
    poolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CachePoolInfoProto::set_allocated_poolname(::std::string* poolname) {
  if (poolname_ != &::google::protobuf::internal::kEmptyString) {
    delete poolname_;
  }
  if (poolname) {
    set_has_poolname();
    poolname_ = poolname;
  } else {
    clear_has_poolname();
    poolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ownerName = 2;
inline bool CachePoolInfoProto::has_ownername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CachePoolInfoProto::set_has_ownername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CachePoolInfoProto::clear_has_ownername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CachePoolInfoProto::clear_ownername() {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    ownername_->clear();
  }
  clear_has_ownername();
}
inline const ::std::string& CachePoolInfoProto::ownername() const {
  return *ownername_;
}
inline void CachePoolInfoProto::set_ownername(const ::std::string& value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void CachePoolInfoProto::set_ownername(const char* value) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(value);
}
inline void CachePoolInfoProto::set_ownername(const char* value, size_t size) {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  ownername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CachePoolInfoProto::mutable_ownername() {
  set_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    ownername_ = new ::std::string;
  }
  return ownername_;
}
inline ::std::string* CachePoolInfoProto::release_ownername() {
  clear_has_ownername();
  if (ownername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ownername_;
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CachePoolInfoProto::set_allocated_ownername(::std::string* ownername) {
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (ownername) {
    set_has_ownername();
    ownername_ = ownername;
  } else {
    clear_has_ownername();
    ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string groupName = 3;
inline bool CachePoolInfoProto::has_groupname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CachePoolInfoProto::set_has_groupname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CachePoolInfoProto::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CachePoolInfoProto::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& CachePoolInfoProto::groupname() const {
  return *groupname_;
}
inline void CachePoolInfoProto::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void CachePoolInfoProto::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void CachePoolInfoProto::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CachePoolInfoProto::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* CachePoolInfoProto::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CachePoolInfoProto::set_allocated_groupname(::std::string* groupname) {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (groupname) {
    set_has_groupname();
    groupname_ = groupname;
  } else {
    clear_has_groupname();
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 mode = 4;
inline bool CachePoolInfoProto::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CachePoolInfoProto::set_has_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CachePoolInfoProto::clear_has_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CachePoolInfoProto::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 CachePoolInfoProto::mode() const {
  return mode_;
}
inline void CachePoolInfoProto::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional int64 limit = 5;
inline bool CachePoolInfoProto::has_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CachePoolInfoProto::set_has_limit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CachePoolInfoProto::clear_has_limit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CachePoolInfoProto::clear_limit() {
  limit_ = GOOGLE_LONGLONG(0);
  clear_has_limit();
}
inline ::google::protobuf::int64 CachePoolInfoProto::limit() const {
  return limit_;
}
inline void CachePoolInfoProto::set_limit(::google::protobuf::int64 value) {
  set_has_limit();
  limit_ = value;
}

// optional int64 maxRelativeExpiry = 6;
inline bool CachePoolInfoProto::has_maxrelativeexpiry() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CachePoolInfoProto::set_has_maxrelativeexpiry() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CachePoolInfoProto::clear_has_maxrelativeexpiry() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CachePoolInfoProto::clear_maxrelativeexpiry() {
  maxrelativeexpiry_ = GOOGLE_LONGLONG(0);
  clear_has_maxrelativeexpiry();
}
inline ::google::protobuf::int64 CachePoolInfoProto::maxrelativeexpiry() const {
  return maxrelativeexpiry_;
}
inline void CachePoolInfoProto::set_maxrelativeexpiry(::google::protobuf::int64 value) {
  set_has_maxrelativeexpiry();
  maxrelativeexpiry_ = value;
}

// -------------------------------------------------------------------

// CachePoolStatsProto

// required int64 bytesNeeded = 1;
inline bool CachePoolStatsProto::has_bytesneeded() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CachePoolStatsProto::set_has_bytesneeded() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CachePoolStatsProto::clear_has_bytesneeded() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CachePoolStatsProto::clear_bytesneeded() {
  bytesneeded_ = GOOGLE_LONGLONG(0);
  clear_has_bytesneeded();
}
inline ::google::protobuf::int64 CachePoolStatsProto::bytesneeded() const {
  return bytesneeded_;
}
inline void CachePoolStatsProto::set_bytesneeded(::google::protobuf::int64 value) {
  set_has_bytesneeded();
  bytesneeded_ = value;
}

// required int64 bytesCached = 2;
inline bool CachePoolStatsProto::has_bytescached() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CachePoolStatsProto::set_has_bytescached() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CachePoolStatsProto::clear_has_bytescached() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CachePoolStatsProto::clear_bytescached() {
  bytescached_ = GOOGLE_LONGLONG(0);
  clear_has_bytescached();
}
inline ::google::protobuf::int64 CachePoolStatsProto::bytescached() const {
  return bytescached_;
}
inline void CachePoolStatsProto::set_bytescached(::google::protobuf::int64 value) {
  set_has_bytescached();
  bytescached_ = value;
}

// required int64 bytesOverlimit = 3;
inline bool CachePoolStatsProto::has_bytesoverlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CachePoolStatsProto::set_has_bytesoverlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CachePoolStatsProto::clear_has_bytesoverlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CachePoolStatsProto::clear_bytesoverlimit() {
  bytesoverlimit_ = GOOGLE_LONGLONG(0);
  clear_has_bytesoverlimit();
}
inline ::google::protobuf::int64 CachePoolStatsProto::bytesoverlimit() const {
  return bytesoverlimit_;
}
inline void CachePoolStatsProto::set_bytesoverlimit(::google::protobuf::int64 value) {
  set_has_bytesoverlimit();
  bytesoverlimit_ = value;
}

// required int64 filesNeeded = 4;
inline bool CachePoolStatsProto::has_filesneeded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CachePoolStatsProto::set_has_filesneeded() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CachePoolStatsProto::clear_has_filesneeded() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CachePoolStatsProto::clear_filesneeded() {
  filesneeded_ = GOOGLE_LONGLONG(0);
  clear_has_filesneeded();
}
inline ::google::protobuf::int64 CachePoolStatsProto::filesneeded() const {
  return filesneeded_;
}
inline void CachePoolStatsProto::set_filesneeded(::google::protobuf::int64 value) {
  set_has_filesneeded();
  filesneeded_ = value;
}

// required int64 filesCached = 5;
inline bool CachePoolStatsProto::has_filescached() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CachePoolStatsProto::set_has_filescached() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CachePoolStatsProto::clear_has_filescached() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CachePoolStatsProto::clear_filescached() {
  filescached_ = GOOGLE_LONGLONG(0);
  clear_has_filescached();
}
inline ::google::protobuf::int64 CachePoolStatsProto::filescached() const {
  return filescached_;
}
inline void CachePoolStatsProto::set_filescached(::google::protobuf::int64 value) {
  set_has_filescached();
  filescached_ = value;
}

// -------------------------------------------------------------------

// AddCachePoolRequestProto

// required .Hdfs.Internal.CachePoolInfoProto info = 1;
inline bool AddCachePoolRequestProto::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddCachePoolRequestProto::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddCachePoolRequestProto::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddCachePoolRequestProto::clear_info() {
  if (info_ != NULL) info_->::Hdfs::Internal::CachePoolInfoProto::Clear();
  clear_has_info();
}
inline const ::Hdfs::Internal::CachePoolInfoProto& AddCachePoolRequestProto::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Hdfs::Internal::CachePoolInfoProto* AddCachePoolRequestProto::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Hdfs::Internal::CachePoolInfoProto;
  return info_;
}
inline ::Hdfs::Internal::CachePoolInfoProto* AddCachePoolRequestProto::release_info() {
  clear_has_info();
  ::Hdfs::Internal::CachePoolInfoProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void AddCachePoolRequestProto::set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// AddCachePoolResponseProto

// -------------------------------------------------------------------

// ModifyCachePoolRequestProto

// required .Hdfs.Internal.CachePoolInfoProto info = 1;
inline bool ModifyCachePoolRequestProto::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModifyCachePoolRequestProto::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModifyCachePoolRequestProto::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModifyCachePoolRequestProto::clear_info() {
  if (info_ != NULL) info_->::Hdfs::Internal::CachePoolInfoProto::Clear();
  clear_has_info();
}
inline const ::Hdfs::Internal::CachePoolInfoProto& ModifyCachePoolRequestProto::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Hdfs::Internal::CachePoolInfoProto* ModifyCachePoolRequestProto::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Hdfs::Internal::CachePoolInfoProto;
  return info_;
}
inline ::Hdfs::Internal::CachePoolInfoProto* ModifyCachePoolRequestProto::release_info() {
  clear_has_info();
  ::Hdfs::Internal::CachePoolInfoProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ModifyCachePoolRequestProto::set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// ModifyCachePoolResponseProto

// -------------------------------------------------------------------

// RemoveCachePoolRequestProto

// required string poolName = 1;
inline bool RemoveCachePoolRequestProto::has_poolname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveCachePoolRequestProto::set_has_poolname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveCachePoolRequestProto::clear_has_poolname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveCachePoolRequestProto::clear_poolname() {
  if (poolname_ != &::google::protobuf::internal::kEmptyString) {
    poolname_->clear();
  }
  clear_has_poolname();
}
inline const ::std::string& RemoveCachePoolRequestProto::poolname() const {
  return *poolname_;
}
inline void RemoveCachePoolRequestProto::set_poolname(const ::std::string& value) {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  poolname_->assign(value);
}
inline void RemoveCachePoolRequestProto::set_poolname(const char* value) {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  poolname_->assign(value);
}
inline void RemoveCachePoolRequestProto::set_poolname(const char* value, size_t size) {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  poolname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoveCachePoolRequestProto::mutable_poolname() {
  set_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    poolname_ = new ::std::string;
  }
  return poolname_;
}
inline ::std::string* RemoveCachePoolRequestProto::release_poolname() {
  clear_has_poolname();
  if (poolname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poolname_;
    poolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RemoveCachePoolRequestProto::set_allocated_poolname(::std::string* poolname) {
  if (poolname_ != &::google::protobuf::internal::kEmptyString) {
    delete poolname_;
  }
  if (poolname) {
    set_has_poolname();
    poolname_ = poolname;
  } else {
    clear_has_poolname();
    poolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RemoveCachePoolResponseProto

// -------------------------------------------------------------------

// ListCachePoolsRequestProto

// required string prevPoolName = 1;
inline bool ListCachePoolsRequestProto::has_prevpoolname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListCachePoolsRequestProto::set_has_prevpoolname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListCachePoolsRequestProto::clear_has_prevpoolname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListCachePoolsRequestProto::clear_prevpoolname() {
  if (prevpoolname_ != &::google::protobuf::internal::kEmptyString) {
    prevpoolname_->clear();
  }
  clear_has_prevpoolname();
}
inline const ::std::string& ListCachePoolsRequestProto::prevpoolname() const {
  return *prevpoolname_;
}
inline void ListCachePoolsRequestProto::set_prevpoolname(const ::std::string& value) {
  set_has_prevpoolname();
  if (prevpoolname_ == &::google::protobuf::internal::kEmptyString) {
    prevpoolname_ = new ::std::string;
  }
  prevpoolname_->assign(value);
}
inline void ListCachePoolsRequestProto::set_prevpoolname(const char* value) {
  set_has_prevpoolname();
  if (prevpoolname_ == &::google::protobuf::internal::kEmptyString) {
    prevpoolname_ = new ::std::string;
  }
  prevpoolname_->assign(value);
}
inline void ListCachePoolsRequestProto::set_prevpoolname(const char* value, size_t size) {
  set_has_prevpoolname();
  if (prevpoolname_ == &::google::protobuf::internal::kEmptyString) {
    prevpoolname_ = new ::std::string;
  }
  prevpoolname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListCachePoolsRequestProto::mutable_prevpoolname() {
  set_has_prevpoolname();
  if (prevpoolname_ == &::google::protobuf::internal::kEmptyString) {
    prevpoolname_ = new ::std::string;
  }
  return prevpoolname_;
}
inline ::std::string* ListCachePoolsRequestProto::release_prevpoolname() {
  clear_has_prevpoolname();
  if (prevpoolname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prevpoolname_;
    prevpoolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ListCachePoolsRequestProto::set_allocated_prevpoolname(::std::string* prevpoolname) {
  if (prevpoolname_ != &::google::protobuf::internal::kEmptyString) {
    delete prevpoolname_;
  }
  if (prevpoolname) {
    set_has_prevpoolname();
    prevpoolname_ = prevpoolname;
  } else {
    clear_has_prevpoolname();
    prevpoolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ListCachePoolsResponseProto

// repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
inline int ListCachePoolsResponseProto::entries_size() const {
  return entries_.size();
}
inline void ListCachePoolsResponseProto::clear_entries() {
  entries_.Clear();
}
inline const ::Hdfs::Internal::CachePoolEntryProto& ListCachePoolsResponseProto::entries(int index) const {
  return entries_.Get(index);
}
inline ::Hdfs::Internal::CachePoolEntryProto* ListCachePoolsResponseProto::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline ::Hdfs::Internal::CachePoolEntryProto* ListCachePoolsResponseProto::add_entries() {
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto >&
ListCachePoolsResponseProto::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::CachePoolEntryProto >*
ListCachePoolsResponseProto::mutable_entries() {
  return &entries_;
}

// required bool hasMore = 2;
inline bool ListCachePoolsResponseProto::has_hasmore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListCachePoolsResponseProto::set_has_hasmore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListCachePoolsResponseProto::clear_has_hasmore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListCachePoolsResponseProto::clear_hasmore() {
  hasmore_ = false;
  clear_has_hasmore();
}
inline bool ListCachePoolsResponseProto::hasmore() const {
  return hasmore_;
}
inline void ListCachePoolsResponseProto::set_hasmore(bool value) {
  set_has_hasmore();
  hasmore_ = value;
}

// -------------------------------------------------------------------

// CachePoolEntryProto

// required .Hdfs.Internal.CachePoolInfoProto info = 1;
inline bool CachePoolEntryProto::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CachePoolEntryProto::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CachePoolEntryProto::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CachePoolEntryProto::clear_info() {
  if (info_ != NULL) info_->::Hdfs::Internal::CachePoolInfoProto::Clear();
  clear_has_info();
}
inline const ::Hdfs::Internal::CachePoolInfoProto& CachePoolEntryProto::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Hdfs::Internal::CachePoolInfoProto* CachePoolEntryProto::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Hdfs::Internal::CachePoolInfoProto;
  return info_;
}
inline ::Hdfs::Internal::CachePoolInfoProto* CachePoolEntryProto::release_info() {
  clear_has_info();
  ::Hdfs::Internal::CachePoolInfoProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void CachePoolEntryProto::set_allocated_info(::Hdfs::Internal::CachePoolInfoProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// required .Hdfs.Internal.CachePoolStatsProto stats = 2;
inline bool CachePoolEntryProto::has_stats() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CachePoolEntryProto::set_has_stats() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CachePoolEntryProto::clear_has_stats() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CachePoolEntryProto::clear_stats() {
  if (stats_ != NULL) stats_->::Hdfs::Internal::CachePoolStatsProto::Clear();
  clear_has_stats();
}
inline const ::Hdfs::Internal::CachePoolStatsProto& CachePoolEntryProto::stats() const {
  return stats_ != NULL ? *stats_ : *default_instance_->stats_;
}
inline ::Hdfs::Internal::CachePoolStatsProto* CachePoolEntryProto::mutable_stats() {
  set_has_stats();
  if (stats_ == NULL) stats_ = new ::Hdfs::Internal::CachePoolStatsProto;
  return stats_;
}
inline ::Hdfs::Internal::CachePoolStatsProto* CachePoolEntryProto::release_stats() {
  clear_has_stats();
  ::Hdfs::Internal::CachePoolStatsProto* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void CachePoolEntryProto::set_allocated_stats(::Hdfs::Internal::CachePoolStatsProto* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    set_has_stats();
  } else {
    clear_has_stats();
  }
}

// -------------------------------------------------------------------

// GetFileLinkInfoRequestProto

// required string src = 1;
inline bool GetFileLinkInfoRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileLinkInfoRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFileLinkInfoRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFileLinkInfoRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& GetFileLinkInfoRequestProto::src() const {
  return *src_;
}
inline void GetFileLinkInfoRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetFileLinkInfoRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void GetFileLinkInfoRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFileLinkInfoRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* GetFileLinkInfoRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetFileLinkInfoRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetFileLinkInfoResponseProto

// optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
inline bool GetFileLinkInfoResponseProto::has_fs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFileLinkInfoResponseProto::set_has_fs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFileLinkInfoResponseProto::clear_has_fs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFileLinkInfoResponseProto::clear_fs() {
  if (fs_ != NULL) fs_->::Hdfs::Internal::HdfsFileStatusProto::Clear();
  clear_has_fs();
}
inline const ::Hdfs::Internal::HdfsFileStatusProto& GetFileLinkInfoResponseProto::fs() const {
  return fs_ != NULL ? *fs_ : *default_instance_->fs_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileLinkInfoResponseProto::mutable_fs() {
  set_has_fs();
  if (fs_ == NULL) fs_ = new ::Hdfs::Internal::HdfsFileStatusProto;
  return fs_;
}
inline ::Hdfs::Internal::HdfsFileStatusProto* GetFileLinkInfoResponseProto::release_fs() {
  clear_has_fs();
  ::Hdfs::Internal::HdfsFileStatusProto* temp = fs_;
  fs_ = NULL;
  return temp;
}
inline void GetFileLinkInfoResponseProto::set_allocated_fs(::Hdfs::Internal::HdfsFileStatusProto* fs) {
  delete fs_;
  fs_ = fs;
  if (fs) {
    set_has_fs();
  } else {
    clear_has_fs();
  }
}

// -------------------------------------------------------------------

// GetContentSummaryRequestProto

// required string path = 1;
inline bool GetContentSummaryRequestProto::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetContentSummaryRequestProto::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetContentSummaryRequestProto::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetContentSummaryRequestProto::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& GetContentSummaryRequestProto::path() const {
  return *path_;
}
inline void GetContentSummaryRequestProto::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetContentSummaryRequestProto::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetContentSummaryRequestProto::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetContentSummaryRequestProto::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* GetContentSummaryRequestProto::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetContentSummaryRequestProto::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetContentSummaryResponseProto

// required .Hdfs.Internal.ContentSummaryProto summary = 1;
inline bool GetContentSummaryResponseProto::has_summary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetContentSummaryResponseProto::set_has_summary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetContentSummaryResponseProto::clear_has_summary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetContentSummaryResponseProto::clear_summary() {
  if (summary_ != NULL) summary_->::Hdfs::Internal::ContentSummaryProto::Clear();
  clear_has_summary();
}
inline const ::Hdfs::Internal::ContentSummaryProto& GetContentSummaryResponseProto::summary() const {
  return summary_ != NULL ? *summary_ : *default_instance_->summary_;
}
inline ::Hdfs::Internal::ContentSummaryProto* GetContentSummaryResponseProto::mutable_summary() {
  set_has_summary();
  if (summary_ == NULL) summary_ = new ::Hdfs::Internal::ContentSummaryProto;
  return summary_;
}
inline ::Hdfs::Internal::ContentSummaryProto* GetContentSummaryResponseProto::release_summary() {
  clear_has_summary();
  ::Hdfs::Internal::ContentSummaryProto* temp = summary_;
  summary_ = NULL;
  return temp;
}
inline void GetContentSummaryResponseProto::set_allocated_summary(::Hdfs::Internal::ContentSummaryProto* summary) {
  delete summary_;
  summary_ = summary;
  if (summary) {
    set_has_summary();
  } else {
    clear_has_summary();
  }
}

// -------------------------------------------------------------------

// SetQuotaRequestProto

// required string path = 1;
inline bool SetQuotaRequestProto::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetQuotaRequestProto::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetQuotaRequestProto::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetQuotaRequestProto::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& SetQuotaRequestProto::path() const {
  return *path_;
}
inline void SetQuotaRequestProto::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SetQuotaRequestProto::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SetQuotaRequestProto::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetQuotaRequestProto::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* SetQuotaRequestProto::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetQuotaRequestProto::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 namespaceQuota = 2;
inline bool SetQuotaRequestProto::has_namespacequota() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetQuotaRequestProto::set_has_namespacequota() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetQuotaRequestProto::clear_has_namespacequota() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetQuotaRequestProto::clear_namespacequota() {
  namespacequota_ = GOOGLE_ULONGLONG(0);
  clear_has_namespacequota();
}
inline ::google::protobuf::uint64 SetQuotaRequestProto::namespacequota() const {
  return namespacequota_;
}
inline void SetQuotaRequestProto::set_namespacequota(::google::protobuf::uint64 value) {
  set_has_namespacequota();
  namespacequota_ = value;
}

// required uint64 diskspaceQuota = 3;
inline bool SetQuotaRequestProto::has_diskspacequota() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetQuotaRequestProto::set_has_diskspacequota() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetQuotaRequestProto::clear_has_diskspacequota() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetQuotaRequestProto::clear_diskspacequota() {
  diskspacequota_ = GOOGLE_ULONGLONG(0);
  clear_has_diskspacequota();
}
inline ::google::protobuf::uint64 SetQuotaRequestProto::diskspacequota() const {
  return diskspacequota_;
}
inline void SetQuotaRequestProto::set_diskspacequota(::google::protobuf::uint64 value) {
  set_has_diskspacequota();
  diskspacequota_ = value;
}

// -------------------------------------------------------------------

// SetQuotaResponseProto

// -------------------------------------------------------------------

// FsyncRequestProto

// required string src = 1;
inline bool FsyncRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FsyncRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FsyncRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FsyncRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& FsyncRequestProto::src() const {
  return *src_;
}
inline void FsyncRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FsyncRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void FsyncRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FsyncRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* FsyncRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FsyncRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string client = 2;
inline bool FsyncRequestProto::has_client() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FsyncRequestProto::set_has_client() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FsyncRequestProto::clear_has_client() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FsyncRequestProto::clear_client() {
  if (client_ != &::google::protobuf::internal::kEmptyString) {
    client_->clear();
  }
  clear_has_client();
}
inline const ::std::string& FsyncRequestProto::client() const {
  return *client_;
}
inline void FsyncRequestProto::set_client(const ::std::string& value) {
  set_has_client();
  if (client_ == &::google::protobuf::internal::kEmptyString) {
    client_ = new ::std::string;
  }
  client_->assign(value);
}
inline void FsyncRequestProto::set_client(const char* value) {
  set_has_client();
  if (client_ == &::google::protobuf::internal::kEmptyString) {
    client_ = new ::std::string;
  }
  client_->assign(value);
}
inline void FsyncRequestProto::set_client(const char* value, size_t size) {
  set_has_client();
  if (client_ == &::google::protobuf::internal::kEmptyString) {
    client_ = new ::std::string;
  }
  client_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FsyncRequestProto::mutable_client() {
  set_has_client();
  if (client_ == &::google::protobuf::internal::kEmptyString) {
    client_ = new ::std::string;
  }
  return client_;
}
inline ::std::string* FsyncRequestProto::release_client() {
  clear_has_client();
  if (client_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_;
    client_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FsyncRequestProto::set_allocated_client(::std::string* client) {
  if (client_ != &::google::protobuf::internal::kEmptyString) {
    delete client_;
  }
  if (client) {
    set_has_client();
    client_ = client;
  } else {
    clear_has_client();
    client_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional sint64 lastBlockLength = 3 [default = -1];
inline bool FsyncRequestProto::has_lastblocklength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FsyncRequestProto::set_has_lastblocklength() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FsyncRequestProto::clear_has_lastblocklength() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FsyncRequestProto::clear_lastblocklength() {
  lastblocklength_ = GOOGLE_LONGLONG(-1);
  clear_has_lastblocklength();
}
inline ::google::protobuf::int64 FsyncRequestProto::lastblocklength() const {
  return lastblocklength_;
}
inline void FsyncRequestProto::set_lastblocklength(::google::protobuf::int64 value) {
  set_has_lastblocklength();
  lastblocklength_ = value;
}

// -------------------------------------------------------------------

// FsyncResponseProto

// -------------------------------------------------------------------

// SetTimesRequestProto

// required string src = 1;
inline bool SetTimesRequestProto::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetTimesRequestProto::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetTimesRequestProto::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetTimesRequestProto::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& SetTimesRequestProto::src() const {
  return *src_;
}
inline void SetTimesRequestProto::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SetTimesRequestProto::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void SetTimesRequestProto::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SetTimesRequestProto::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* SetTimesRequestProto::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SetTimesRequestProto::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 mtime = 2;
inline bool SetTimesRequestProto::has_mtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetTimesRequestProto::set_has_mtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetTimesRequestProto::clear_has_mtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetTimesRequestProto::clear_mtime() {
  mtime_ = GOOGLE_ULONGLONG(0);
  clear_has_mtime();
}
inline ::google::protobuf::uint64 SetTimesRequestProto::mtime() const {
  return mtime_;
}
inline void SetTimesRequestProto::set_mtime(::google::protobuf::uint64 value) {
  set_has_mtime();
  mtime_ = value;
}

// required uint64 atime = 3;
inline bool SetTimesRequestProto::has_atime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetTimesRequestProto::set_has_atime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetTimesRequestProto::clear_has_atime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetTimesRequestProto::clear_atime() {
  atime_ = GOOGLE_ULONGLONG(0);
  clear_has_atime();
}
inline ::google::protobuf::uint64 SetTimesRequestProto::atime() const {
  return atime_;
}
inline void SetTimesRequestProto::set_atime(::google::protobuf::uint64 value) {
  set_has_atime();
  atime_ = value;
}

// -------------------------------------------------------------------

// SetTimesResponseProto

// -------------------------------------------------------------------

// CreateSymlinkRequestProto

// required string target = 1;
inline bool CreateSymlinkRequestProto::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateSymlinkRequestProto::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateSymlinkRequestProto::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateSymlinkRequestProto::clear_target() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    target_->clear();
  }
  clear_has_target();
}
inline const ::std::string& CreateSymlinkRequestProto::target() const {
  return *target_;
}
inline void CreateSymlinkRequestProto::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void CreateSymlinkRequestProto::set_target(const char* value) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(value);
}
inline void CreateSymlinkRequestProto::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateSymlinkRequestProto::mutable_target() {
  set_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    target_ = new ::std::string;
  }
  return target_;
}
inline ::std::string* CreateSymlinkRequestProto::release_target() {
  clear_has_target();
  if (target_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateSymlinkRequestProto::set_allocated_target(::std::string* target) {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string link = 2;
inline bool CreateSymlinkRequestProto::has_link() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateSymlinkRequestProto::set_has_link() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateSymlinkRequestProto::clear_has_link() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateSymlinkRequestProto::clear_link() {
  if (link_ != &::google::protobuf::internal::kEmptyString) {
    link_->clear();
  }
  clear_has_link();
}
inline const ::std::string& CreateSymlinkRequestProto::link() const {
  return *link_;
}
inline void CreateSymlinkRequestProto::set_link(const ::std::string& value) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  link_->assign(value);
}
inline void CreateSymlinkRequestProto::set_link(const char* value) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  link_->assign(value);
}
inline void CreateSymlinkRequestProto::set_link(const char* value, size_t size) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  link_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateSymlinkRequestProto::mutable_link() {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  return link_;
}
inline ::std::string* CreateSymlinkRequestProto::release_link() {
  clear_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = link_;
    link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateSymlinkRequestProto::set_allocated_link(::std::string* link) {
  if (link_ != &::google::protobuf::internal::kEmptyString) {
    delete link_;
  }
  if (link) {
    set_has_link();
    link_ = link;
  } else {
    clear_has_link();
    link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
inline bool CreateSymlinkRequestProto::has_dirperm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateSymlinkRequestProto::set_has_dirperm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateSymlinkRequestProto::clear_has_dirperm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateSymlinkRequestProto::clear_dirperm() {
  if (dirperm_ != NULL) dirperm_->::Hdfs::Internal::FsPermissionProto::Clear();
  clear_has_dirperm();
}
inline const ::Hdfs::Internal::FsPermissionProto& CreateSymlinkRequestProto::dirperm() const {
  return dirperm_ != NULL ? *dirperm_ : *default_instance_->dirperm_;
}
inline ::Hdfs::Internal::FsPermissionProto* CreateSymlinkRequestProto::mutable_dirperm() {
  set_has_dirperm();
  if (dirperm_ == NULL) dirperm_ = new ::Hdfs::Internal::FsPermissionProto;
  return dirperm_;
}
inline ::Hdfs::Internal::FsPermissionProto* CreateSymlinkRequestProto::release_dirperm() {
  clear_has_dirperm();
  ::Hdfs::Internal::FsPermissionProto* temp = dirperm_;
  dirperm_ = NULL;
  return temp;
}
inline void CreateSymlinkRequestProto::set_allocated_dirperm(::Hdfs::Internal::FsPermissionProto* dirperm) {
  delete dirperm_;
  dirperm_ = dirperm;
  if (dirperm) {
    set_has_dirperm();
  } else {
    clear_has_dirperm();
  }
}

// required bool createParent = 4;
inline bool CreateSymlinkRequestProto::has_createparent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateSymlinkRequestProto::set_has_createparent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateSymlinkRequestProto::clear_has_createparent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateSymlinkRequestProto::clear_createparent() {
  createparent_ = false;
  clear_has_createparent();
}
inline bool CreateSymlinkRequestProto::createparent() const {
  return createparent_;
}
inline void CreateSymlinkRequestProto::set_createparent(bool value) {
  set_has_createparent();
  createparent_ = value;
}

// -------------------------------------------------------------------

// CreateSymlinkResponseProto

// -------------------------------------------------------------------

// GetLinkTargetRequestProto

// required string path = 1;
inline bool GetLinkTargetRequestProto::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLinkTargetRequestProto::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLinkTargetRequestProto::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLinkTargetRequestProto::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& GetLinkTargetRequestProto::path() const {
  return *path_;
}
inline void GetLinkTargetRequestProto::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetLinkTargetRequestProto::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void GetLinkTargetRequestProto::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLinkTargetRequestProto::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* GetLinkTargetRequestProto::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetLinkTargetRequestProto::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GetLinkTargetResponseProto

// optional string targetPath = 1;
inline bool GetLinkTargetResponseProto::has_targetpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLinkTargetResponseProto::set_has_targetpath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLinkTargetResponseProto::clear_has_targetpath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLinkTargetResponseProto::clear_targetpath() {
  if (targetpath_ != &::google::protobuf::internal::kEmptyString) {
    targetpath_->clear();
  }
  clear_has_targetpath();
}
inline const ::std::string& GetLinkTargetResponseProto::targetpath() const {
  return *targetpath_;
}
inline void GetLinkTargetResponseProto::set_targetpath(const ::std::string& value) {
  set_has_targetpath();
  if (targetpath_ == &::google::protobuf::internal::kEmptyString) {
    targetpath_ = new ::std::string;
  }
  targetpath_->assign(value);
}
inline void GetLinkTargetResponseProto::set_targetpath(const char* value) {
  set_has_targetpath();
  if (targetpath_ == &::google::protobuf::internal::kEmptyString) {
    targetpath_ = new ::std::string;
  }
  targetpath_->assign(value);
}
inline void GetLinkTargetResponseProto::set_targetpath(const char* value, size_t size) {
  set_has_targetpath();
  if (targetpath_ == &::google::protobuf::internal::kEmptyString) {
    targetpath_ = new ::std::string;
  }
  targetpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetLinkTargetResponseProto::mutable_targetpath() {
  set_has_targetpath();
  if (targetpath_ == &::google::protobuf::internal::kEmptyString) {
    targetpath_ = new ::std::string;
  }
  return targetpath_;
}
inline ::std::string* GetLinkTargetResponseProto::release_targetpath() {
  clear_has_targetpath();
  if (targetpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetpath_;
    targetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GetLinkTargetResponseProto::set_allocated_targetpath(::std::string* targetpath) {
  if (targetpath_ != &::google::protobuf::internal::kEmptyString) {
    delete targetpath_;
  }
  if (targetpath) {
    set_has_targetpath();
    targetpath_ = targetpath;
  } else {
    clear_has_targetpath();
    targetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateBlockForPipelineRequestProto

// required .Hdfs.Internal.ExtendedBlockProto block = 1;
inline bool UpdateBlockForPipelineRequestProto::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateBlockForPipelineRequestProto::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateBlockForPipelineRequestProto::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateBlockForPipelineRequestProto::clear_block() {
  if (block_ != NULL) block_->::Hdfs::Internal::ExtendedBlockProto::Clear();
  clear_has_block();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& UpdateBlockForPipelineRequestProto::block() const {
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdateBlockForPipelineRequestProto::mutable_block() {
  set_has_block();
  if (block_ == NULL) block_ = new ::Hdfs::Internal::ExtendedBlockProto;
  return block_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdateBlockForPipelineRequestProto::release_block() {
  clear_has_block();
  ::Hdfs::Internal::ExtendedBlockProto* temp = block_;
  block_ = NULL;
  return temp;
}
inline void UpdateBlockForPipelineRequestProto::set_allocated_block(::Hdfs::Internal::ExtendedBlockProto* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
}

// required string clientName = 2;
inline bool UpdateBlockForPipelineRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateBlockForPipelineRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateBlockForPipelineRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateBlockForPipelineRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& UpdateBlockForPipelineRequestProto::clientname() const {
  return *clientname_;
}
inline void UpdateBlockForPipelineRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void UpdateBlockForPipelineRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void UpdateBlockForPipelineRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateBlockForPipelineRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* UpdateBlockForPipelineRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateBlockForPipelineRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UpdateBlockForPipelineResponseProto

// required .Hdfs.Internal.LocatedBlockProto block = 1;
inline bool UpdateBlockForPipelineResponseProto::has_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateBlockForPipelineResponseProto::set_has_block() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateBlockForPipelineResponseProto::clear_has_block() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateBlockForPipelineResponseProto::clear_block() {
  if (block_ != NULL) block_->::Hdfs::Internal::LocatedBlockProto::Clear();
  clear_has_block();
}
inline const ::Hdfs::Internal::LocatedBlockProto& UpdateBlockForPipelineResponseProto::block() const {
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* UpdateBlockForPipelineResponseProto::mutable_block() {
  set_has_block();
  if (block_ == NULL) block_ = new ::Hdfs::Internal::LocatedBlockProto;
  return block_;
}
inline ::Hdfs::Internal::LocatedBlockProto* UpdateBlockForPipelineResponseProto::release_block() {
  clear_has_block();
  ::Hdfs::Internal::LocatedBlockProto* temp = block_;
  block_ = NULL;
  return temp;
}
inline void UpdateBlockForPipelineResponseProto::set_allocated_block(::Hdfs::Internal::LocatedBlockProto* block) {
  delete block_;
  block_ = block;
  if (block) {
    set_has_block();
  } else {
    clear_has_block();
  }
}

// -------------------------------------------------------------------

// UpdatePipelineRequestProto

// required string clientName = 1;
inline bool UpdatePipelineRequestProto::has_clientname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePipelineRequestProto::set_has_clientname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdatePipelineRequestProto::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdatePipelineRequestProto::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& UpdatePipelineRequestProto::clientname() const {
  return *clientname_;
}
inline void UpdatePipelineRequestProto::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void UpdatePipelineRequestProto::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void UpdatePipelineRequestProto::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePipelineRequestProto::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* UpdatePipelineRequestProto::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdatePipelineRequestProto::set_allocated_clientname(::std::string* clientname) {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (clientname) {
    set_has_clientname();
    clientname_ = clientname;
  } else {
    clear_has_clientname();
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
inline bool UpdatePipelineRequestProto::has_oldblock() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdatePipelineRequestProto::set_has_oldblock() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdatePipelineRequestProto::clear_has_oldblock() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdatePipelineRequestProto::clear_oldblock() {
  if (oldblock_ != NULL) oldblock_->::Hdfs::Internal::ExtendedBlockProto::Clear();
  clear_has_oldblock();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& UpdatePipelineRequestProto::oldblock() const {
  return oldblock_ != NULL ? *oldblock_ : *default_instance_->oldblock_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::mutable_oldblock() {
  set_has_oldblock();
  if (oldblock_ == NULL) oldblock_ = new ::Hdfs::Internal::ExtendedBlockProto;
  return oldblock_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::release_oldblock() {
  clear_has_oldblock();
  ::Hdfs::Internal::ExtendedBlockProto* temp = oldblock_;
  oldblock_ = NULL;
  return temp;
}
inline void UpdatePipelineRequestProto::set_allocated_oldblock(::Hdfs::Internal::ExtendedBlockProto* oldblock) {
  delete oldblock_;
  oldblock_ = oldblock;
  if (oldblock) {
    set_has_oldblock();
  } else {
    clear_has_oldblock();
  }
}

// required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
inline bool UpdatePipelineRequestProto::has_newblock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdatePipelineRequestProto::set_has_newblock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdatePipelineRequestProto::clear_has_newblock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdatePipelineRequestProto::clear_newblock() {
  if (newblock_ != NULL) newblock_->::Hdfs::Internal::ExtendedBlockProto::Clear();
  clear_has_newblock();
}
inline const ::Hdfs::Internal::ExtendedBlockProto& UpdatePipelineRequestProto::newblock() const {
  return newblock_ != NULL ? *newblock_ : *default_instance_->newblock_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::mutable_newblock() {
  set_has_newblock();
  if (newblock_ == NULL) newblock_ = new ::Hdfs::Internal::ExtendedBlockProto;
  return newblock_;
}
inline ::Hdfs::Internal::ExtendedBlockProto* UpdatePipelineRequestProto::release_newblock() {
  clear_has_newblock();
  ::Hdfs::Internal::ExtendedBlockProto* temp = newblock_;
  newblock_ = NULL;
  return temp;
}
inline void UpdatePipelineRequestProto::set_allocated_newblock(::Hdfs::Internal::ExtendedBlockProto* newblock) {
  delete newblock_;
  newblock_ = newblock;
  if (newblock) {
    set_has_newblock();
  } else {
    clear_has_newblock();
  }
}

// repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
inline int UpdatePipelineRequestProto::newnodes_size() const {
  return newnodes_.size();
}
inline void UpdatePipelineRequestProto::clear_newnodes() {
  newnodes_.Clear();
}
inline const ::Hdfs::Internal::DatanodeIDProto& UpdatePipelineRequestProto::newnodes(int index) const {
  return newnodes_.Get(index);
}
inline ::Hdfs::Internal::DatanodeIDProto* UpdatePipelineRequestProto::mutable_newnodes(int index) {
  return newnodes_.Mutable(index);
}
inline ::Hdfs::Internal::DatanodeIDProto* UpdatePipelineRequestProto::add_newnodes() {
  return newnodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto >&
UpdatePipelineRequestProto::newnodes() const {
  return newnodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hdfs::Internal::DatanodeIDProto >*
UpdatePipelineRequestProto::mutable_newnodes() {
  return &newnodes_;
}

// repeated string storageIDs = 5;
inline int UpdatePipelineRequestProto::storageids_size() const {
  return storageids_.size();
}
inline void UpdatePipelineRequestProto::clear_storageids() {
  storageids_.Clear();
}
inline const ::std::string& UpdatePipelineRequestProto::storageids(int index) const {
  return storageids_.Get(index);
}
inline ::std::string* UpdatePipelineRequestProto::mutable_storageids(int index) {
  return storageids_.Mutable(index);
}
inline void UpdatePipelineRequestProto::set_storageids(int index, const ::std::string& value) {
  storageids_.Mutable(index)->assign(value);
}
inline void UpdatePipelineRequestProto::set_storageids(int index, const char* value) {
  storageids_.Mutable(index)->assign(value);
}
inline void UpdatePipelineRequestProto::set_storageids(int index, const char* value, size_t size) {
  storageids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdatePipelineRequestProto::add_storageids() {
  return storageids_.Add();
}
inline void UpdatePipelineRequestProto::add_storageids(const ::std::string& value) {
  storageids_.Add()->assign(value);
}
inline void UpdatePipelineRequestProto::add_storageids(const char* value) {
  storageids_.Add()->assign(value);
}
inline void UpdatePipelineRequestProto::add_storageids(const char* value, size_t size) {
  storageids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdatePipelineRequestProto::storageids() const {
  return storageids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdatePipelineRequestProto::mutable_storageids() {
  return &storageids_;
}

// -------------------------------------------------------------------

// UpdatePipelineResponseProto

// -------------------------------------------------------------------

// SetBalancerBandwidthRequestProto

// required int64 bandwidth = 1;
inline bool SetBalancerBandwidthRequestProto::has_bandwidth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetBalancerBandwidthRequestProto::set_has_bandwidth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetBalancerBandwidthRequestProto::clear_has_bandwidth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetBalancerBandwidthRequestProto::clear_bandwidth() {
  bandwidth_ = GOOGLE_LONGLONG(0);
  clear_has_bandwidth();
}
inline ::google::protobuf::int64 SetBalancerBandwidthRequestProto::bandwidth() const {
  return bandwidth_;
}
inline void SetBalancerBandwidthRequestProto::set_bandwidth(::google::protobuf::int64 value) {
  set_has_bandwidth();
  bandwidth_ = value;
}

// -------------------------------------------------------------------

// SetBalancerBandwidthResponseProto

// -------------------------------------------------------------------

// GetDataEncryptionKeyRequestProto

// -------------------------------------------------------------------

// GetDataEncryptionKeyResponseProto

// optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
inline bool GetDataEncryptionKeyResponseProto::has_dataencryptionkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetDataEncryptionKeyResponseProto::set_has_dataencryptionkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetDataEncryptionKeyResponseProto::clear_has_dataencryptionkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetDataEncryptionKeyResponseProto::clear_dataencryptionkey() {
  if (dataencryptionkey_ != NULL) dataencryptionkey_->::Hdfs::Internal::DataEncryptionKeyProto::Clear();
  clear_has_dataencryptionkey();
}
inline const ::Hdfs::Internal::DataEncryptionKeyProto& GetDataEncryptionKeyResponseProto::dataencryptionkey() const {
  return dataencryptionkey_ != NULL ? *dataencryptionkey_ : *default_instance_->dataencryptionkey_;
}
inline ::Hdfs::Internal::DataEncryptionKeyProto* GetDataEncryptionKeyResponseProto::mutable_dataencryptionkey() {
  set_has_dataencryptionkey();
  if (dataencryptionkey_ == NULL) dataencryptionkey_ = new ::Hdfs::Internal::DataEncryptionKeyProto;
  return dataencryptionkey_;
}
inline ::Hdfs::Internal::DataEncryptionKeyProto* GetDataEncryptionKeyResponseProto::release_dataencryptionkey() {
  clear_has_dataencryptionkey();
  ::Hdfs::Internal::DataEncryptionKeyProto* temp = dataencryptionkey_;
  dataencryptionkey_ = NULL;
  return temp;
}
inline void GetDataEncryptionKeyResponseProto::set_allocated_dataencryptionkey(::Hdfs::Internal::DataEncryptionKeyProto* dataencryptionkey) {
  delete dataencryptionkey_;
  dataencryptionkey_ = dataencryptionkey;
  if (dataencryptionkey) {
    set_has_dataencryptionkey();
  } else {
    clear_has_dataencryptionkey();
  }
}

// -------------------------------------------------------------------

// CreateSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool CreateSnapshotRequestProto::has_snapshotroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateSnapshotRequestProto::set_has_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateSnapshotRequestProto::clear_has_snapshotroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateSnapshotRequestProto::clear_snapshotroot() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    snapshotroot_->clear();
  }
  clear_has_snapshotroot();
}
inline const ::std::string& CreateSnapshotRequestProto::snapshotroot() const {
  return *snapshotroot_;
}
inline void CreateSnapshotRequestProto::set_snapshotroot(const ::std::string& value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void CreateSnapshotRequestProto::set_snapshotroot(const char* value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void CreateSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateSnapshotRequestProto::mutable_snapshotroot() {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  return snapshotroot_;
}
inline ::std::string* CreateSnapshotRequestProto::release_snapshotroot() {
  clear_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotroot_;
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateSnapshotRequestProto::set_allocated_snapshotroot(::std::string* snapshotroot) {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (snapshotroot) {
    set_has_snapshotroot();
    snapshotroot_ = snapshotroot;
  } else {
    clear_has_snapshotroot();
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string snapshotName = 2;
inline bool CreateSnapshotRequestProto::has_snapshotname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateSnapshotRequestProto::set_has_snapshotname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateSnapshotRequestProto::clear_has_snapshotname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateSnapshotRequestProto::clear_snapshotname() {
  if (snapshotname_ != &::google::protobuf::internal::kEmptyString) {
    snapshotname_->clear();
  }
  clear_has_snapshotname();
}
inline const ::std::string& CreateSnapshotRequestProto::snapshotname() const {
  return *snapshotname_;
}
inline void CreateSnapshotRequestProto::set_snapshotname(const ::std::string& value) {
  set_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotname_ = new ::std::string;
  }
  snapshotname_->assign(value);
}
inline void CreateSnapshotRequestProto::set_snapshotname(const char* value) {
  set_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotname_ = new ::std::string;
  }
  snapshotname_->assign(value);
}
inline void CreateSnapshotRequestProto::set_snapshotname(const char* value, size_t size) {
  set_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotname_ = new ::std::string;
  }
  snapshotname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateSnapshotRequestProto::mutable_snapshotname() {
  set_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotname_ = new ::std::string;
  }
  return snapshotname_;
}
inline ::std::string* CreateSnapshotRequestProto::release_snapshotname() {
  clear_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotname_;
    snapshotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateSnapshotRequestProto::set_allocated_snapshotname(::std::string* snapshotname) {
  if (snapshotname_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotname_;
  }
  if (snapshotname) {
    set_has_snapshotname();
    snapshotname_ = snapshotname;
  } else {
    clear_has_snapshotname();
    snapshotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreateSnapshotResponseProto

// required string snapshotPath = 1;
inline bool CreateSnapshotResponseProto::has_snapshotpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateSnapshotResponseProto::set_has_snapshotpath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateSnapshotResponseProto::clear_has_snapshotpath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateSnapshotResponseProto::clear_snapshotpath() {
  if (snapshotpath_ != &::google::protobuf::internal::kEmptyString) {
    snapshotpath_->clear();
  }
  clear_has_snapshotpath();
}
inline const ::std::string& CreateSnapshotResponseProto::snapshotpath() const {
  return *snapshotpath_;
}
inline void CreateSnapshotResponseProto::set_snapshotpath(const ::std::string& value) {
  set_has_snapshotpath();
  if (snapshotpath_ == &::google::protobuf::internal::kEmptyString) {
    snapshotpath_ = new ::std::string;
  }
  snapshotpath_->assign(value);
}
inline void CreateSnapshotResponseProto::set_snapshotpath(const char* value) {
  set_has_snapshotpath();
  if (snapshotpath_ == &::google::protobuf::internal::kEmptyString) {
    snapshotpath_ = new ::std::string;
  }
  snapshotpath_->assign(value);
}
inline void CreateSnapshotResponseProto::set_snapshotpath(const char* value, size_t size) {
  set_has_snapshotpath();
  if (snapshotpath_ == &::google::protobuf::internal::kEmptyString) {
    snapshotpath_ = new ::std::string;
  }
  snapshotpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateSnapshotResponseProto::mutable_snapshotpath() {
  set_has_snapshotpath();
  if (snapshotpath_ == &::google::protobuf::internal::kEmptyString) {
    snapshotpath_ = new ::std::string;
  }
  return snapshotpath_;
}
inline ::std::string* CreateSnapshotResponseProto::release_snapshotpath() {
  clear_has_snapshotpath();
  if (snapshotpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotpath_;
    snapshotpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateSnapshotResponseProto::set_allocated_snapshotpath(::std::string* snapshotpath) {
  if (snapshotpath_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotpath_;
  }
  if (snapshotpath) {
    set_has_snapshotpath();
    snapshotpath_ = snapshotpath;
  } else {
    clear_has_snapshotpath();
    snapshotpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RenameSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool RenameSnapshotRequestProto::has_snapshotroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RenameSnapshotRequestProto::set_has_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RenameSnapshotRequestProto::clear_has_snapshotroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RenameSnapshotRequestProto::clear_snapshotroot() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    snapshotroot_->clear();
  }
  clear_has_snapshotroot();
}
inline const ::std::string& RenameSnapshotRequestProto::snapshotroot() const {
  return *snapshotroot_;
}
inline void RenameSnapshotRequestProto::set_snapshotroot(const ::std::string& value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void RenameSnapshotRequestProto::set_snapshotroot(const char* value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void RenameSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RenameSnapshotRequestProto::mutable_snapshotroot() {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  return snapshotroot_;
}
inline ::std::string* RenameSnapshotRequestProto::release_snapshotroot() {
  clear_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotroot_;
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RenameSnapshotRequestProto::set_allocated_snapshotroot(::std::string* snapshotroot) {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (snapshotroot) {
    set_has_snapshotroot();
    snapshotroot_ = snapshotroot;
  } else {
    clear_has_snapshotroot();
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string snapshotOldName = 2;
inline bool RenameSnapshotRequestProto::has_snapshotoldname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RenameSnapshotRequestProto::set_has_snapshotoldname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RenameSnapshotRequestProto::clear_has_snapshotoldname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RenameSnapshotRequestProto::clear_snapshotoldname() {
  if (snapshotoldname_ != &::google::protobuf::internal::kEmptyString) {
    snapshotoldname_->clear();
  }
  clear_has_snapshotoldname();
}
inline const ::std::string& RenameSnapshotRequestProto::snapshotoldname() const {
  return *snapshotoldname_;
}
inline void RenameSnapshotRequestProto::set_snapshotoldname(const ::std::string& value) {
  set_has_snapshotoldname();
  if (snapshotoldname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotoldname_ = new ::std::string;
  }
  snapshotoldname_->assign(value);
}
inline void RenameSnapshotRequestProto::set_snapshotoldname(const char* value) {
  set_has_snapshotoldname();
  if (snapshotoldname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotoldname_ = new ::std::string;
  }
  snapshotoldname_->assign(value);
}
inline void RenameSnapshotRequestProto::set_snapshotoldname(const char* value, size_t size) {
  set_has_snapshotoldname();
  if (snapshotoldname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotoldname_ = new ::std::string;
  }
  snapshotoldname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RenameSnapshotRequestProto::mutable_snapshotoldname() {
  set_has_snapshotoldname();
  if (snapshotoldname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotoldname_ = new ::std::string;
  }
  return snapshotoldname_;
}
inline ::std::string* RenameSnapshotRequestProto::release_snapshotoldname() {
  clear_has_snapshotoldname();
  if (snapshotoldname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotoldname_;
    snapshotoldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RenameSnapshotRequestProto::set_allocated_snapshotoldname(::std::string* snapshotoldname) {
  if (snapshotoldname_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotoldname_;
  }
  if (snapshotoldname) {
    set_has_snapshotoldname();
    snapshotoldname_ = snapshotoldname;
  } else {
    clear_has_snapshotoldname();
    snapshotoldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string snapshotNewName = 3;
inline bool RenameSnapshotRequestProto::has_snapshotnewname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RenameSnapshotRequestProto::set_has_snapshotnewname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RenameSnapshotRequestProto::clear_has_snapshotnewname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RenameSnapshotRequestProto::clear_snapshotnewname() {
  if (snapshotnewname_ != &::google::protobuf::internal::kEmptyString) {
    snapshotnewname_->clear();
  }
  clear_has_snapshotnewname();
}
inline const ::std::string& RenameSnapshotRequestProto::snapshotnewname() const {
  return *snapshotnewname_;
}
inline void RenameSnapshotRequestProto::set_snapshotnewname(const ::std::string& value) {
  set_has_snapshotnewname();
  if (snapshotnewname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotnewname_ = new ::std::string;
  }
  snapshotnewname_->assign(value);
}
inline void RenameSnapshotRequestProto::set_snapshotnewname(const char* value) {
  set_has_snapshotnewname();
  if (snapshotnewname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotnewname_ = new ::std::string;
  }
  snapshotnewname_->assign(value);
}
inline void RenameSnapshotRequestProto::set_snapshotnewname(const char* value, size_t size) {
  set_has_snapshotnewname();
  if (snapshotnewname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotnewname_ = new ::std::string;
  }
  snapshotnewname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RenameSnapshotRequestProto::mutable_snapshotnewname() {
  set_has_snapshotnewname();
  if (snapshotnewname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotnewname_ = new ::std::string;
  }
  return snapshotnewname_;
}
inline ::std::string* RenameSnapshotRequestProto::release_snapshotnewname() {
  clear_has_snapshotnewname();
  if (snapshotnewname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotnewname_;
    snapshotnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RenameSnapshotRequestProto::set_allocated_snapshotnewname(::std::string* snapshotnewname) {
  if (snapshotnewname_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotnewname_;
  }
  if (snapshotnewname) {
    set_has_snapshotnewname();
    snapshotnewname_ = snapshotnewname;
  } else {
    clear_has_snapshotnewname();
    snapshotnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RenameSnapshotResponseProto

// -------------------------------------------------------------------

// AllowSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool AllowSnapshotRequestProto::has_snapshotroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AllowSnapshotRequestProto::set_has_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AllowSnapshotRequestProto::clear_has_snapshotroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AllowSnapshotRequestProto::clear_snapshotroot() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    snapshotroot_->clear();
  }
  clear_has_snapshotroot();
}
inline const ::std::string& AllowSnapshotRequestProto::snapshotroot() const {
  return *snapshotroot_;
}
inline void AllowSnapshotRequestProto::set_snapshotroot(const ::std::string& value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void AllowSnapshotRequestProto::set_snapshotroot(const char* value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void AllowSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AllowSnapshotRequestProto::mutable_snapshotroot() {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  return snapshotroot_;
}
inline ::std::string* AllowSnapshotRequestProto::release_snapshotroot() {
  clear_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotroot_;
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AllowSnapshotRequestProto::set_allocated_snapshotroot(::std::string* snapshotroot) {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (snapshotroot) {
    set_has_snapshotroot();
    snapshotroot_ = snapshotroot;
  } else {
    clear_has_snapshotroot();
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AllowSnapshotResponseProto

// -------------------------------------------------------------------

// DisallowSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool DisallowSnapshotRequestProto::has_snapshotroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DisallowSnapshotRequestProto::set_has_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DisallowSnapshotRequestProto::clear_has_snapshotroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DisallowSnapshotRequestProto::clear_snapshotroot() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    snapshotroot_->clear();
  }
  clear_has_snapshotroot();
}
inline const ::std::string& DisallowSnapshotRequestProto::snapshotroot() const {
  return *snapshotroot_;
}
inline void DisallowSnapshotRequestProto::set_snapshotroot(const ::std::string& value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void DisallowSnapshotRequestProto::set_snapshotroot(const char* value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void DisallowSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DisallowSnapshotRequestProto::mutable_snapshotroot() {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  return snapshotroot_;
}
inline ::std::string* DisallowSnapshotRequestProto::release_snapshotroot() {
  clear_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotroot_;
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DisallowSnapshotRequestProto::set_allocated_snapshotroot(::std::string* snapshotroot) {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (snapshotroot) {
    set_has_snapshotroot();
    snapshotroot_ = snapshotroot;
  } else {
    clear_has_snapshotroot();
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DisallowSnapshotResponseProto

// -------------------------------------------------------------------

// DeleteSnapshotRequestProto

// required string snapshotRoot = 1;
inline bool DeleteSnapshotRequestProto::has_snapshotroot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteSnapshotRequestProto::set_has_snapshotroot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteSnapshotRequestProto::clear_has_snapshotroot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteSnapshotRequestProto::clear_snapshotroot() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    snapshotroot_->clear();
  }
  clear_has_snapshotroot();
}
inline const ::std::string& DeleteSnapshotRequestProto::snapshotroot() const {
  return *snapshotroot_;
}
inline void DeleteSnapshotRequestProto::set_snapshotroot(const ::std::string& value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void DeleteSnapshotRequestProto::set_snapshotroot(const char* value) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(value);
}
inline void DeleteSnapshotRequestProto::set_snapshotroot(const char* value, size_t size) {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  snapshotroot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteSnapshotRequestProto::mutable_snapshotroot() {
  set_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    snapshotroot_ = new ::std::string;
  }
  return snapshotroot_;
}
inline ::std::string* DeleteSnapshotRequestProto::release_snapshotroot() {
  clear_has_snapshotroot();
  if (snapshotroot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotroot_;
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeleteSnapshotRequestProto::set_allocated_snapshotroot(::std::string* snapshotroot) {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (snapshotroot) {
    set_has_snapshotroot();
    snapshotroot_ = snapshotroot;
  } else {
    clear_has_snapshotroot();
    snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string snapshotName = 2;
inline bool DeleteSnapshotRequestProto::has_snapshotname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteSnapshotRequestProto::set_has_snapshotname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteSnapshotRequestProto::clear_has_snapshotname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteSnapshotRequestProto::clear_snapshotname() {
  if (snapshotname_ != &::google::protobuf::internal::kEmptyString) {
    snapshotname_->clear();
  }
  clear_has_snapshotname();
}
inline const ::std::string& DeleteSnapshotRequestProto::snapshotname() const {
  return *snapshotname_;
}
inline void DeleteSnapshotRequestProto::set_snapshotname(const ::std::string& value) {
  set_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotname_ = new ::std::string;
  }
  snapshotname_->assign(value);
}
inline void DeleteSnapshotRequestProto::set_snapshotname(const char* value) {
  set_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotname_ = new ::std::string;
  }
  snapshotname_->assign(value);
}
inline void DeleteSnapshotRequestProto::set_snapshotname(const char* value, size_t size) {
  set_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotname_ = new ::std::string;
  }
  snapshotname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteSnapshotRequestProto::mutable_snapshotname() {
  set_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    snapshotname_ = new ::std::string;
  }
  return snapshotname_;
}
inline ::std::string* DeleteSnapshotRequestProto::release_snapshotname() {
  clear_has_snapshotname();
  if (snapshotname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = snapshotname_;
    snapshotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeleteSnapshotRequestProto::set_allocated_snapshotname(::std::string* snapshotname) {
  if (snapshotname_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotname_;
  }
  if (snapshotname) {
    set_has_snapshotname();
    snapshotname_ = snapshotname;
  } else {
    clear_has_snapshotname();
    snapshotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DeleteSnapshotResponseProto


// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace Hdfs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hdfs::Internal::CreateFlagProto>() {
  return ::Hdfs::Internal::CreateFlagProto_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hdfs::Internal::DatanodeReportTypeProto>() {
  return ::Hdfs::Internal::DatanodeReportTypeProto_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hdfs::Internal::SafeModeActionProto>() {
  return ::Hdfs::Internal::SafeModeActionProto_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Hdfs::Internal::CacheFlagProto>() {
  return ::Hdfs::Internal::CacheFlagProto_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientNamenodeProtocol_2eproto__INCLUDED
