// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientNamenodeProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientNamenodeProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Hdfs {
namespace Internal {

namespace {

const ::google::protobuf::Descriptor* GetBlockLocationsRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlockLocationsRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBlockLocationsResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBlockLocationsResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerDefaultsRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerDefaultsRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetServerDefaultsResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetServerDefaultsResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppendResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppendResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetReplicationRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetReplicationRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetReplicationResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetReplicationResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPermissionRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPermissionRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetPermissionResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetPermissionResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetOwnerRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetOwnerRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetOwnerResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetOwnerResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbandonBlockRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbandonBlockRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AbandonBlockResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbandonBlockResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBlockRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBlockRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddBlockResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBlockResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAdditionalDatanodeRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAdditionalDatanodeRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAdditionalDatanodeResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAdditionalDatanodeResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompleteRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompleteRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompleteResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompleteResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportBadBlocksRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportBadBlocksRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportBadBlocksResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportBadBlocksResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcatRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcatRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConcatResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConcatResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruncateRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruncateRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TruncateResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TruncateResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLeaseRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLeaseRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLeaseResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLeaseResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseLeaseRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseLeaseRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReleaseLeaseResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReleaseLeaseResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rename2RequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rename2RequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rename2ResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rename2ResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MkdirsRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MkdirsRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MkdirsResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MkdirsResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetListingRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetListingRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetListingResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetListingResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSnapshottableDirListingRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSnapshottableDirListingRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSnapshottableDirListingResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSnapshottableDirListingResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSnapshotDiffReportRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSnapshotDiffReportRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetSnapshotDiffReportResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetSnapshotDiffReportResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenewLeaseRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenewLeaseRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenewLeaseResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenewLeaseResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverLeaseRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverLeaseRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverLeaseResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverLeaseResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFsStatusRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFsStatusRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFsStatsResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFsStatsResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatanodeReportRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatanodeReportRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDatanodeReportResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDatanodeReportResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPreferredBlockSizeRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPreferredBlockSizeRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetPreferredBlockSizeResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetPreferredBlockSizeResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSafeModeRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSafeModeRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetSafeModeResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetSafeModeResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveNamespaceRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveNamespaceRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveNamespaceResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveNamespaceResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollEditsRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollEditsRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollEditsResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollEditsResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestoreFailedStorageRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestoreFailedStorageRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RestoreFailedStorageResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RestoreFailedStorageResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshNodesRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshNodesRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshNodesResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshNodesResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinalizeUpgradeRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinalizeUpgradeRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinalizeUpgradeResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinalizeUpgradeResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListCorruptFileBlocksRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListCorruptFileBlocksRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListCorruptFileBlocksResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListCorruptFileBlocksResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaSaveRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaSaveRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaSaveResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaSaveResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileInfoRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileInfoRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileInfoResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileInfoResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsFileClosedRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsFileClosedRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsFileClosedResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsFileClosedResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheDirectiveInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheDirectiveInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheDirectiveInfoExpirationProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheDirectiveInfoExpirationProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheDirectiveStatsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheDirectiveStatsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCacheDirectiveRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCacheDirectiveRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCacheDirectiveResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCacheDirectiveResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyCacheDirectiveRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyCacheDirectiveRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyCacheDirectiveResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyCacheDirectiveResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveCacheDirectiveRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveCacheDirectiveRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveCacheDirectiveResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveCacheDirectiveResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListCacheDirectivesRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListCacheDirectivesRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheDirectiveEntryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheDirectiveEntryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListCacheDirectivesResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListCacheDirectivesResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachePoolInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachePoolInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachePoolStatsProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachePoolStatsProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCachePoolRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCachePoolRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCachePoolResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCachePoolResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyCachePoolRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyCachePoolRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyCachePoolResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyCachePoolResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveCachePoolRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveCachePoolRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveCachePoolResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveCachePoolResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListCachePoolsRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListCachePoolsRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListCachePoolsResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListCachePoolsResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CachePoolEntryProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CachePoolEntryProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileLinkInfoRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileLinkInfoRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileLinkInfoResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileLinkInfoResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetContentSummaryRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetContentSummaryRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetContentSummaryResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetContentSummaryResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetQuotaRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetQuotaRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetQuotaResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetQuotaResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FsyncRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FsyncRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FsyncResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FsyncResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTimesRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTimesRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTimesResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTimesResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSymlinkRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSymlinkRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSymlinkResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSymlinkResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLinkTargetRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLinkTargetRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLinkTargetResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLinkTargetResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBlockForPipelineRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBlockForPipelineRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBlockForPipelineResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBlockForPipelineResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePipelineRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePipelineRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePipelineResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePipelineResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetBalancerBandwidthRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetBalancerBandwidthRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetBalancerBandwidthResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetBalancerBandwidthResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDataEncryptionKeyRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDataEncryptionKeyRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDataEncryptionKeyResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDataEncryptionKeyResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSnapshotRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSnapshotRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateSnapshotResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSnapshotResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameSnapshotRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameSnapshotRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameSnapshotResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameSnapshotResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllowSnapshotRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllowSnapshotRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllowSnapshotResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllowSnapshotResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisallowSnapshotRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisallowSnapshotRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisallowSnapshotResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisallowSnapshotResponseProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSnapshotRequestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSnapshotRequestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteSnapshotResponseProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteSnapshotResponseProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CreateFlagProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DatanodeReportTypeProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SafeModeActionProto_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CacheFlagProto_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* ClientNamenodeProtocol_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientNamenodeProtocol_2eproto() {
  protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientNamenodeProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  GetBlockLocationsRequestProto_descriptor_ = file->message_type(0);
  static const int GetBlockLocationsRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockLocationsRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockLocationsRequestProto, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockLocationsRequestProto, length_),
  };
  GetBlockLocationsRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlockLocationsRequestProto_descriptor_,
      GetBlockLocationsRequestProto::default_instance_,
      GetBlockLocationsRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockLocationsRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockLocationsRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlockLocationsRequestProto));
  GetBlockLocationsResponseProto_descriptor_ = file->message_type(1);
  static const int GetBlockLocationsResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockLocationsResponseProto, locations_),
  };
  GetBlockLocationsResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBlockLocationsResponseProto_descriptor_,
      GetBlockLocationsResponseProto::default_instance_,
      GetBlockLocationsResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockLocationsResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBlockLocationsResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBlockLocationsResponseProto));
  GetServerDefaultsRequestProto_descriptor_ = file->message_type(2);
  static const int GetServerDefaultsRequestProto_offsets_[1] = {
  };
  GetServerDefaultsRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerDefaultsRequestProto_descriptor_,
      GetServerDefaultsRequestProto::default_instance_,
      GetServerDefaultsRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerDefaultsRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerDefaultsRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerDefaultsRequestProto));
  GetServerDefaultsResponseProto_descriptor_ = file->message_type(3);
  static const int GetServerDefaultsResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerDefaultsResponseProto, serverdefaults_),
  };
  GetServerDefaultsResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetServerDefaultsResponseProto_descriptor_,
      GetServerDefaultsResponseProto::default_instance_,
      GetServerDefaultsResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerDefaultsResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetServerDefaultsResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetServerDefaultsResponseProto));
  CreateRequestProto_descriptor_ = file->message_type(4);
  static const int CreateRequestProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, masked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, clientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, createflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, createparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, replication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, blocksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, cryptoprotocolversion_),
  };
  CreateRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRequestProto_descriptor_,
      CreateRequestProto::default_instance_,
      CreateRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRequestProto));
  CreateResponseProto_descriptor_ = file->message_type(5);
  static const int CreateResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponseProto, fs_),
  };
  CreateResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateResponseProto_descriptor_,
      CreateResponseProto::default_instance_,
      CreateResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateResponseProto));
  AppendRequestProto_descriptor_ = file->message_type(6);
  static const int AppendRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRequestProto, clientname_),
  };
  AppendRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendRequestProto_descriptor_,
      AppendRequestProto::default_instance_,
      AppendRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendRequestProto));
  AppendResponseProto_descriptor_ = file->message_type(7);
  static const int AppendResponseProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendResponseProto, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendResponseProto, stat_),
  };
  AppendResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AppendResponseProto_descriptor_,
      AppendResponseProto::default_instance_,
      AppendResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppendResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AppendResponseProto));
  SetReplicationRequestProto_descriptor_ = file->message_type(8);
  static const int SetReplicationRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReplicationRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReplicationRequestProto, replication_),
  };
  SetReplicationRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetReplicationRequestProto_descriptor_,
      SetReplicationRequestProto::default_instance_,
      SetReplicationRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReplicationRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReplicationRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetReplicationRequestProto));
  SetReplicationResponseProto_descriptor_ = file->message_type(9);
  static const int SetReplicationResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReplicationResponseProto, result_),
  };
  SetReplicationResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetReplicationResponseProto_descriptor_,
      SetReplicationResponseProto::default_instance_,
      SetReplicationResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReplicationResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetReplicationResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetReplicationResponseProto));
  SetPermissionRequestProto_descriptor_ = file->message_type(10);
  static const int SetPermissionRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPermissionRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPermissionRequestProto, permission_),
  };
  SetPermissionRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPermissionRequestProto_descriptor_,
      SetPermissionRequestProto::default_instance_,
      SetPermissionRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPermissionRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPermissionRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPermissionRequestProto));
  SetPermissionResponseProto_descriptor_ = file->message_type(11);
  static const int SetPermissionResponseProto_offsets_[1] = {
  };
  SetPermissionResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetPermissionResponseProto_descriptor_,
      SetPermissionResponseProto::default_instance_,
      SetPermissionResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPermissionResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetPermissionResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetPermissionResponseProto));
  SetOwnerRequestProto_descriptor_ = file->message_type(12);
  static const int SetOwnerRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOwnerRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOwnerRequestProto, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOwnerRequestProto, groupname_),
  };
  SetOwnerRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetOwnerRequestProto_descriptor_,
      SetOwnerRequestProto::default_instance_,
      SetOwnerRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOwnerRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOwnerRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetOwnerRequestProto));
  SetOwnerResponseProto_descriptor_ = file->message_type(13);
  static const int SetOwnerResponseProto_offsets_[1] = {
  };
  SetOwnerResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetOwnerResponseProto_descriptor_,
      SetOwnerResponseProto::default_instance_,
      SetOwnerResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOwnerResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOwnerResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetOwnerResponseProto));
  AbandonBlockRequestProto_descriptor_ = file->message_type(14);
  static const int AbandonBlockRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbandonBlockRequestProto, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbandonBlockRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbandonBlockRequestProto, holder_),
  };
  AbandonBlockRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbandonBlockRequestProto_descriptor_,
      AbandonBlockRequestProto::default_instance_,
      AbandonBlockRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbandonBlockRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbandonBlockRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbandonBlockRequestProto));
  AbandonBlockResponseProto_descriptor_ = file->message_type(15);
  static const int AbandonBlockResponseProto_offsets_[1] = {
  };
  AbandonBlockResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AbandonBlockResponseProto_descriptor_,
      AbandonBlockResponseProto::default_instance_,
      AbandonBlockResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbandonBlockResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbandonBlockResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AbandonBlockResponseProto));
  AddBlockRequestProto_descriptor_ = file->message_type(16);
  static const int AddBlockRequestProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockRequestProto, clientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockRequestProto, previous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockRequestProto, excludenodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockRequestProto, fileid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockRequestProto, favorednodes_),
  };
  AddBlockRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBlockRequestProto_descriptor_,
      AddBlockRequestProto::default_instance_,
      AddBlockRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBlockRequestProto));
  AddBlockResponseProto_descriptor_ = file->message_type(17);
  static const int AddBlockResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockResponseProto, block_),
  };
  AddBlockResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBlockResponseProto_descriptor_,
      AddBlockResponseProto::default_instance_,
      AddBlockResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBlockResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBlockResponseProto));
  GetAdditionalDatanodeRequestProto_descriptor_ = file->message_type(18);
  static const int GetAdditionalDatanodeRequestProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeRequestProto, blk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeRequestProto, existings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeRequestProto, excludes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeRequestProto, numadditionalnodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeRequestProto, clientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeRequestProto, existingstorageuuids_),
  };
  GetAdditionalDatanodeRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAdditionalDatanodeRequestProto_descriptor_,
      GetAdditionalDatanodeRequestProto::default_instance_,
      GetAdditionalDatanodeRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAdditionalDatanodeRequestProto));
  GetAdditionalDatanodeResponseProto_descriptor_ = file->message_type(19);
  static const int GetAdditionalDatanodeResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeResponseProto, block_),
  };
  GetAdditionalDatanodeResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAdditionalDatanodeResponseProto_descriptor_,
      GetAdditionalDatanodeResponseProto::default_instance_,
      GetAdditionalDatanodeResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAdditionalDatanodeResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAdditionalDatanodeResponseProto));
  CompleteRequestProto_descriptor_ = file->message_type(20);
  static const int CompleteRequestProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteRequestProto, clientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteRequestProto, last_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteRequestProto, fileid_),
  };
  CompleteRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompleteRequestProto_descriptor_,
      CompleteRequestProto::default_instance_,
      CompleteRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompleteRequestProto));
  CompleteResponseProto_descriptor_ = file->message_type(21);
  static const int CompleteResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteResponseProto, result_),
  };
  CompleteResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompleteResponseProto_descriptor_,
      CompleteResponseProto::default_instance_,
      CompleteResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompleteResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompleteResponseProto));
  ReportBadBlocksRequestProto_descriptor_ = file->message_type(22);
  static const int ReportBadBlocksRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBadBlocksRequestProto, blocks_),
  };
  ReportBadBlocksRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportBadBlocksRequestProto_descriptor_,
      ReportBadBlocksRequestProto::default_instance_,
      ReportBadBlocksRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBadBlocksRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBadBlocksRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportBadBlocksRequestProto));
  ReportBadBlocksResponseProto_descriptor_ = file->message_type(23);
  static const int ReportBadBlocksResponseProto_offsets_[1] = {
  };
  ReportBadBlocksResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportBadBlocksResponseProto_descriptor_,
      ReportBadBlocksResponseProto::default_instance_,
      ReportBadBlocksResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBadBlocksResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportBadBlocksResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportBadBlocksResponseProto));
  ConcatRequestProto_descriptor_ = file->message_type(24);
  static const int ConcatRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatRequestProto, trg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatRequestProto, srcs_),
  };
  ConcatRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcatRequestProto_descriptor_,
      ConcatRequestProto::default_instance_,
      ConcatRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcatRequestProto));
  ConcatResponseProto_descriptor_ = file->message_type(25);
  static const int ConcatResponseProto_offsets_[1] = {
  };
  ConcatResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConcatResponseProto_descriptor_,
      ConcatResponseProto::default_instance_,
      ConcatResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConcatResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConcatResponseProto));
  TruncateRequestProto_descriptor_ = file->message_type(26);
  static const int TruncateRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequestProto, newlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequestProto, clientname_),
  };
  TruncateRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruncateRequestProto_descriptor_,
      TruncateRequestProto::default_instance_,
      TruncateRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruncateRequestProto));
  TruncateResponseProto_descriptor_ = file->message_type(27);
  static const int TruncateResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateResponseProto, result_),
  };
  TruncateResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TruncateResponseProto_descriptor_,
      TruncateResponseProto::default_instance_,
      TruncateResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TruncateResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TruncateResponseProto));
  GetLeaseRequestProto_descriptor_ = file->message_type(28);
  static const int GetLeaseRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaseRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaseRequestProto, clientname_),
  };
  GetLeaseRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLeaseRequestProto_descriptor_,
      GetLeaseRequestProto::default_instance_,
      GetLeaseRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaseRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaseRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLeaseRequestProto));
  GetLeaseResponseProto_descriptor_ = file->message_type(29);
  static const int GetLeaseResponseProto_offsets_[1] = {
  };
  GetLeaseResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLeaseResponseProto_descriptor_,
      GetLeaseResponseProto::default_instance_,
      GetLeaseResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaseResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLeaseResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLeaseResponseProto));
  ReleaseLeaseRequestProto_descriptor_ = file->message_type(30);
  static const int ReleaseLeaseRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseLeaseRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseLeaseRequestProto, clientname_),
  };
  ReleaseLeaseRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReleaseLeaseRequestProto_descriptor_,
      ReleaseLeaseRequestProto::default_instance_,
      ReleaseLeaseRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseLeaseRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseLeaseRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReleaseLeaseRequestProto));
  ReleaseLeaseResponseProto_descriptor_ = file->message_type(31);
  static const int ReleaseLeaseResponseProto_offsets_[1] = {
  };
  ReleaseLeaseResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReleaseLeaseResponseProto_descriptor_,
      ReleaseLeaseResponseProto::default_instance_,
      ReleaseLeaseResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseLeaseResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReleaseLeaseResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReleaseLeaseResponseProto));
  RenameRequestProto_descriptor_ = file->message_type(32);
  static const int RenameRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRequestProto, dst_),
  };
  RenameRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameRequestProto_descriptor_,
      RenameRequestProto::default_instance_,
      RenameRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameRequestProto));
  RenameResponseProto_descriptor_ = file->message_type(33);
  static const int RenameResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameResponseProto, result_),
  };
  RenameResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameResponseProto_descriptor_,
      RenameResponseProto::default_instance_,
      RenameResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameResponseProto));
  Rename2RequestProto_descriptor_ = file->message_type(34);
  static const int Rename2RequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rename2RequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rename2RequestProto, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rename2RequestProto, overwritedest_),
  };
  Rename2RequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rename2RequestProto_descriptor_,
      Rename2RequestProto::default_instance_,
      Rename2RequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rename2RequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rename2RequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rename2RequestProto));
  Rename2ResponseProto_descriptor_ = file->message_type(35);
  static const int Rename2ResponseProto_offsets_[1] = {
  };
  Rename2ResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rename2ResponseProto_descriptor_,
      Rename2ResponseProto::default_instance_,
      Rename2ResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rename2ResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rename2ResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rename2ResponseProto));
  DeleteRequestProto_descriptor_ = file->message_type(36);
  static const int DeleteRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequestProto, recursive_),
  };
  DeleteRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteRequestProto_descriptor_,
      DeleteRequestProto::default_instance_,
      DeleteRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteRequestProto));
  DeleteResponseProto_descriptor_ = file->message_type(37);
  static const int DeleteResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponseProto, result_),
  };
  DeleteResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteResponseProto_descriptor_,
      DeleteResponseProto::default_instance_,
      DeleteResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteResponseProto));
  MkdirsRequestProto_descriptor_ = file->message_type(38);
  static const int MkdirsRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirsRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirsRequestProto, masked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirsRequestProto, createparent_),
  };
  MkdirsRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MkdirsRequestProto_descriptor_,
      MkdirsRequestProto::default_instance_,
      MkdirsRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirsRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirsRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MkdirsRequestProto));
  MkdirsResponseProto_descriptor_ = file->message_type(39);
  static const int MkdirsResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirsResponseProto, result_),
  };
  MkdirsResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MkdirsResponseProto_descriptor_,
      MkdirsResponseProto::default_instance_,
      MkdirsResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirsResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkdirsResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MkdirsResponseProto));
  GetListingRequestProto_descriptor_ = file->message_type(40);
  static const int GetListingRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetListingRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetListingRequestProto, startafter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetListingRequestProto, needlocation_),
  };
  GetListingRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetListingRequestProto_descriptor_,
      GetListingRequestProto::default_instance_,
      GetListingRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetListingRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetListingRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetListingRequestProto));
  GetListingResponseProto_descriptor_ = file->message_type(41);
  static const int GetListingResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetListingResponseProto, dirlist_),
  };
  GetListingResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetListingResponseProto_descriptor_,
      GetListingResponseProto::default_instance_,
      GetListingResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetListingResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetListingResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetListingResponseProto));
  GetSnapshottableDirListingRequestProto_descriptor_ = file->message_type(42);
  static const int GetSnapshottableDirListingRequestProto_offsets_[1] = {
  };
  GetSnapshottableDirListingRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSnapshottableDirListingRequestProto_descriptor_,
      GetSnapshottableDirListingRequestProto::default_instance_,
      GetSnapshottableDirListingRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshottableDirListingRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshottableDirListingRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSnapshottableDirListingRequestProto));
  GetSnapshottableDirListingResponseProto_descriptor_ = file->message_type(43);
  static const int GetSnapshottableDirListingResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshottableDirListingResponseProto, snapshottabledirlist_),
  };
  GetSnapshottableDirListingResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSnapshottableDirListingResponseProto_descriptor_,
      GetSnapshottableDirListingResponseProto::default_instance_,
      GetSnapshottableDirListingResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshottableDirListingResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshottableDirListingResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSnapshottableDirListingResponseProto));
  GetSnapshotDiffReportRequestProto_descriptor_ = file->message_type(44);
  static const int GetSnapshotDiffReportRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotDiffReportRequestProto, snapshotroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotDiffReportRequestProto, fromsnapshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotDiffReportRequestProto, tosnapshot_),
  };
  GetSnapshotDiffReportRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSnapshotDiffReportRequestProto_descriptor_,
      GetSnapshotDiffReportRequestProto::default_instance_,
      GetSnapshotDiffReportRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotDiffReportRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotDiffReportRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSnapshotDiffReportRequestProto));
  GetSnapshotDiffReportResponseProto_descriptor_ = file->message_type(45);
  static const int GetSnapshotDiffReportResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotDiffReportResponseProto, diffreport_),
  };
  GetSnapshotDiffReportResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetSnapshotDiffReportResponseProto_descriptor_,
      GetSnapshotDiffReportResponseProto::default_instance_,
      GetSnapshotDiffReportResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotDiffReportResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetSnapshotDiffReportResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetSnapshotDiffReportResponseProto));
  RenewLeaseRequestProto_descriptor_ = file->message_type(46);
  static const int RenewLeaseRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewLeaseRequestProto, clientname_),
  };
  RenewLeaseRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenewLeaseRequestProto_descriptor_,
      RenewLeaseRequestProto::default_instance_,
      RenewLeaseRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewLeaseRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewLeaseRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenewLeaseRequestProto));
  RenewLeaseResponseProto_descriptor_ = file->message_type(47);
  static const int RenewLeaseResponseProto_offsets_[1] = {
  };
  RenewLeaseResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenewLeaseResponseProto_descriptor_,
      RenewLeaseResponseProto::default_instance_,
      RenewLeaseResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewLeaseResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenewLeaseResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenewLeaseResponseProto));
  RecoverLeaseRequestProto_descriptor_ = file->message_type(48);
  static const int RecoverLeaseRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverLeaseRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverLeaseRequestProto, clientname_),
  };
  RecoverLeaseRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverLeaseRequestProto_descriptor_,
      RecoverLeaseRequestProto::default_instance_,
      RecoverLeaseRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverLeaseRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverLeaseRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverLeaseRequestProto));
  RecoverLeaseResponseProto_descriptor_ = file->message_type(49);
  static const int RecoverLeaseResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverLeaseResponseProto, result_),
  };
  RecoverLeaseResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverLeaseResponseProto_descriptor_,
      RecoverLeaseResponseProto::default_instance_,
      RecoverLeaseResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverLeaseResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverLeaseResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverLeaseResponseProto));
  GetFsStatusRequestProto_descriptor_ = file->message_type(50);
  static const int GetFsStatusRequestProto_offsets_[1] = {
  };
  GetFsStatusRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFsStatusRequestProto_descriptor_,
      GetFsStatusRequestProto::default_instance_,
      GetFsStatusRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatusRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatusRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFsStatusRequestProto));
  GetFsStatsResponseProto_descriptor_ = file->message_type(51);
  static const int GetFsStatsResponseProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatsResponseProto, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatsResponseProto, used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatsResponseProto, remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatsResponseProto, under_replicated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatsResponseProto, corrupt_blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatsResponseProto, missing_blocks_),
  };
  GetFsStatsResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFsStatsResponseProto_descriptor_,
      GetFsStatsResponseProto::default_instance_,
      GetFsStatsResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatsResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFsStatsResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFsStatsResponseProto));
  GetDatanodeReportRequestProto_descriptor_ = file->message_type(52);
  static const int GetDatanodeReportRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatanodeReportRequestProto, type_),
  };
  GetDatanodeReportRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatanodeReportRequestProto_descriptor_,
      GetDatanodeReportRequestProto::default_instance_,
      GetDatanodeReportRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatanodeReportRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatanodeReportRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatanodeReportRequestProto));
  GetDatanodeReportResponseProto_descriptor_ = file->message_type(53);
  static const int GetDatanodeReportResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatanodeReportResponseProto, di_),
  };
  GetDatanodeReportResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDatanodeReportResponseProto_descriptor_,
      GetDatanodeReportResponseProto::default_instance_,
      GetDatanodeReportResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatanodeReportResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDatanodeReportResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDatanodeReportResponseProto));
  GetPreferredBlockSizeRequestProto_descriptor_ = file->message_type(54);
  static const int GetPreferredBlockSizeRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPreferredBlockSizeRequestProto, filename_),
  };
  GetPreferredBlockSizeRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPreferredBlockSizeRequestProto_descriptor_,
      GetPreferredBlockSizeRequestProto::default_instance_,
      GetPreferredBlockSizeRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPreferredBlockSizeRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPreferredBlockSizeRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPreferredBlockSizeRequestProto));
  GetPreferredBlockSizeResponseProto_descriptor_ = file->message_type(55);
  static const int GetPreferredBlockSizeResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPreferredBlockSizeResponseProto, bsize_),
  };
  GetPreferredBlockSizeResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetPreferredBlockSizeResponseProto_descriptor_,
      GetPreferredBlockSizeResponseProto::default_instance_,
      GetPreferredBlockSizeResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPreferredBlockSizeResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetPreferredBlockSizeResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetPreferredBlockSizeResponseProto));
  SetSafeModeRequestProto_descriptor_ = file->message_type(56);
  static const int SetSafeModeRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSafeModeRequestProto, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSafeModeRequestProto, checked_),
  };
  SetSafeModeRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSafeModeRequestProto_descriptor_,
      SetSafeModeRequestProto::default_instance_,
      SetSafeModeRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSafeModeRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSafeModeRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSafeModeRequestProto));
  SetSafeModeResponseProto_descriptor_ = file->message_type(57);
  static const int SetSafeModeResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSafeModeResponseProto, result_),
  };
  SetSafeModeResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetSafeModeResponseProto_descriptor_,
      SetSafeModeResponseProto::default_instance_,
      SetSafeModeResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSafeModeResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSafeModeResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetSafeModeResponseProto));
  SaveNamespaceRequestProto_descriptor_ = file->message_type(58);
  static const int SaveNamespaceRequestProto_offsets_[1] = {
  };
  SaveNamespaceRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveNamespaceRequestProto_descriptor_,
      SaveNamespaceRequestProto::default_instance_,
      SaveNamespaceRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveNamespaceRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveNamespaceRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveNamespaceRequestProto));
  SaveNamespaceResponseProto_descriptor_ = file->message_type(59);
  static const int SaveNamespaceResponseProto_offsets_[1] = {
  };
  SaveNamespaceResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveNamespaceResponseProto_descriptor_,
      SaveNamespaceResponseProto::default_instance_,
      SaveNamespaceResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveNamespaceResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveNamespaceResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveNamespaceResponseProto));
  RollEditsRequestProto_descriptor_ = file->message_type(60);
  static const int RollEditsRequestProto_offsets_[1] = {
  };
  RollEditsRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RollEditsRequestProto_descriptor_,
      RollEditsRequestProto::default_instance_,
      RollEditsRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollEditsRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollEditsRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RollEditsRequestProto));
  RollEditsResponseProto_descriptor_ = file->message_type(61);
  static const int RollEditsResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollEditsResponseProto, newsegmenttxid_),
  };
  RollEditsResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RollEditsResponseProto_descriptor_,
      RollEditsResponseProto::default_instance_,
      RollEditsResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollEditsResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollEditsResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RollEditsResponseProto));
  RestoreFailedStorageRequestProto_descriptor_ = file->message_type(62);
  static const int RestoreFailedStorageRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFailedStorageRequestProto, arg_),
  };
  RestoreFailedStorageRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestoreFailedStorageRequestProto_descriptor_,
      RestoreFailedStorageRequestProto::default_instance_,
      RestoreFailedStorageRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFailedStorageRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFailedStorageRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestoreFailedStorageRequestProto));
  RestoreFailedStorageResponseProto_descriptor_ = file->message_type(63);
  static const int RestoreFailedStorageResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFailedStorageResponseProto, result_),
  };
  RestoreFailedStorageResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RestoreFailedStorageResponseProto_descriptor_,
      RestoreFailedStorageResponseProto::default_instance_,
      RestoreFailedStorageResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFailedStorageResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestoreFailedStorageResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RestoreFailedStorageResponseProto));
  RefreshNodesRequestProto_descriptor_ = file->message_type(64);
  static const int RefreshNodesRequestProto_offsets_[1] = {
  };
  RefreshNodesRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshNodesRequestProto_descriptor_,
      RefreshNodesRequestProto::default_instance_,
      RefreshNodesRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshNodesRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshNodesRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshNodesRequestProto));
  RefreshNodesResponseProto_descriptor_ = file->message_type(65);
  static const int RefreshNodesResponseProto_offsets_[1] = {
  };
  RefreshNodesResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshNodesResponseProto_descriptor_,
      RefreshNodesResponseProto::default_instance_,
      RefreshNodesResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshNodesResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshNodesResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshNodesResponseProto));
  FinalizeUpgradeRequestProto_descriptor_ = file->message_type(66);
  static const int FinalizeUpgradeRequestProto_offsets_[1] = {
  };
  FinalizeUpgradeRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinalizeUpgradeRequestProto_descriptor_,
      FinalizeUpgradeRequestProto::default_instance_,
      FinalizeUpgradeRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalizeUpgradeRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalizeUpgradeRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinalizeUpgradeRequestProto));
  FinalizeUpgradeResponseProto_descriptor_ = file->message_type(67);
  static const int FinalizeUpgradeResponseProto_offsets_[1] = {
  };
  FinalizeUpgradeResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinalizeUpgradeResponseProto_descriptor_,
      FinalizeUpgradeResponseProto::default_instance_,
      FinalizeUpgradeResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalizeUpgradeResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalizeUpgradeResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinalizeUpgradeResponseProto));
  ListCorruptFileBlocksRequestProto_descriptor_ = file->message_type(68);
  static const int ListCorruptFileBlocksRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCorruptFileBlocksRequestProto, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCorruptFileBlocksRequestProto, cookie_),
  };
  ListCorruptFileBlocksRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListCorruptFileBlocksRequestProto_descriptor_,
      ListCorruptFileBlocksRequestProto::default_instance_,
      ListCorruptFileBlocksRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCorruptFileBlocksRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCorruptFileBlocksRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListCorruptFileBlocksRequestProto));
  ListCorruptFileBlocksResponseProto_descriptor_ = file->message_type(69);
  static const int ListCorruptFileBlocksResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCorruptFileBlocksResponseProto, corrupt_),
  };
  ListCorruptFileBlocksResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListCorruptFileBlocksResponseProto_descriptor_,
      ListCorruptFileBlocksResponseProto::default_instance_,
      ListCorruptFileBlocksResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCorruptFileBlocksResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCorruptFileBlocksResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListCorruptFileBlocksResponseProto));
  MetaSaveRequestProto_descriptor_ = file->message_type(70);
  static const int MetaSaveRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaSaveRequestProto, filename_),
  };
  MetaSaveRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaSaveRequestProto_descriptor_,
      MetaSaveRequestProto::default_instance_,
      MetaSaveRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaSaveRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaSaveRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaSaveRequestProto));
  MetaSaveResponseProto_descriptor_ = file->message_type(71);
  static const int MetaSaveResponseProto_offsets_[1] = {
  };
  MetaSaveResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaSaveResponseProto_descriptor_,
      MetaSaveResponseProto::default_instance_,
      MetaSaveResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaSaveResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaSaveResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaSaveResponseProto));
  GetFileInfoRequestProto_descriptor_ = file->message_type(72);
  static const int GetFileInfoRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileInfoRequestProto, src_),
  };
  GetFileInfoRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileInfoRequestProto_descriptor_,
      GetFileInfoRequestProto::default_instance_,
      GetFileInfoRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileInfoRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileInfoRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileInfoRequestProto));
  GetFileInfoResponseProto_descriptor_ = file->message_type(73);
  static const int GetFileInfoResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileInfoResponseProto, fs_),
  };
  GetFileInfoResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileInfoResponseProto_descriptor_,
      GetFileInfoResponseProto::default_instance_,
      GetFileInfoResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileInfoResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileInfoResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileInfoResponseProto));
  IsFileClosedRequestProto_descriptor_ = file->message_type(74);
  static const int IsFileClosedRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsFileClosedRequestProto, src_),
  };
  IsFileClosedRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsFileClosedRequestProto_descriptor_,
      IsFileClosedRequestProto::default_instance_,
      IsFileClosedRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsFileClosedRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsFileClosedRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsFileClosedRequestProto));
  IsFileClosedResponseProto_descriptor_ = file->message_type(75);
  static const int IsFileClosedResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsFileClosedResponseProto, result_),
  };
  IsFileClosedResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsFileClosedResponseProto_descriptor_,
      IsFileClosedResponseProto::default_instance_,
      IsFileClosedResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsFileClosedResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsFileClosedResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsFileClosedResponseProto));
  CacheDirectiveInfoProto_descriptor_ = file->message_type(76);
  static const int CacheDirectiveInfoProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoProto, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoProto, replication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoProto, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoProto, expiration_),
  };
  CacheDirectiveInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheDirectiveInfoProto_descriptor_,
      CacheDirectiveInfoProto::default_instance_,
      CacheDirectiveInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheDirectiveInfoProto));
  CacheDirectiveInfoExpirationProto_descriptor_ = file->message_type(77);
  static const int CacheDirectiveInfoExpirationProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoExpirationProto, millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoExpirationProto, isrelative_),
  };
  CacheDirectiveInfoExpirationProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheDirectiveInfoExpirationProto_descriptor_,
      CacheDirectiveInfoExpirationProto::default_instance_,
      CacheDirectiveInfoExpirationProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoExpirationProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveInfoExpirationProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheDirectiveInfoExpirationProto));
  CacheDirectiveStatsProto_descriptor_ = file->message_type(78);
  static const int CacheDirectiveStatsProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveStatsProto, bytesneeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveStatsProto, bytescached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveStatsProto, filesneeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveStatsProto, filescached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveStatsProto, hasexpired_),
  };
  CacheDirectiveStatsProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheDirectiveStatsProto_descriptor_,
      CacheDirectiveStatsProto::default_instance_,
      CacheDirectiveStatsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveStatsProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveStatsProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheDirectiveStatsProto));
  AddCacheDirectiveRequestProto_descriptor_ = file->message_type(79);
  static const int AddCacheDirectiveRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheDirectiveRequestProto, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheDirectiveRequestProto, cacheflags_),
  };
  AddCacheDirectiveRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCacheDirectiveRequestProto_descriptor_,
      AddCacheDirectiveRequestProto::default_instance_,
      AddCacheDirectiveRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheDirectiveRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheDirectiveRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCacheDirectiveRequestProto));
  AddCacheDirectiveResponseProto_descriptor_ = file->message_type(80);
  static const int AddCacheDirectiveResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheDirectiveResponseProto, id_),
  };
  AddCacheDirectiveResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCacheDirectiveResponseProto_descriptor_,
      AddCacheDirectiveResponseProto::default_instance_,
      AddCacheDirectiveResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheDirectiveResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCacheDirectiveResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCacheDirectiveResponseProto));
  ModifyCacheDirectiveRequestProto_descriptor_ = file->message_type(81);
  static const int ModifyCacheDirectiveRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCacheDirectiveRequestProto, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCacheDirectiveRequestProto, cacheflags_),
  };
  ModifyCacheDirectiveRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyCacheDirectiveRequestProto_descriptor_,
      ModifyCacheDirectiveRequestProto::default_instance_,
      ModifyCacheDirectiveRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCacheDirectiveRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCacheDirectiveRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyCacheDirectiveRequestProto));
  ModifyCacheDirectiveResponseProto_descriptor_ = file->message_type(82);
  static const int ModifyCacheDirectiveResponseProto_offsets_[1] = {
  };
  ModifyCacheDirectiveResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyCacheDirectiveResponseProto_descriptor_,
      ModifyCacheDirectiveResponseProto::default_instance_,
      ModifyCacheDirectiveResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCacheDirectiveResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCacheDirectiveResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyCacheDirectiveResponseProto));
  RemoveCacheDirectiveRequestProto_descriptor_ = file->message_type(83);
  static const int RemoveCacheDirectiveRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheDirectiveRequestProto, id_),
  };
  RemoveCacheDirectiveRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveCacheDirectiveRequestProto_descriptor_,
      RemoveCacheDirectiveRequestProto::default_instance_,
      RemoveCacheDirectiveRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheDirectiveRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheDirectiveRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveCacheDirectiveRequestProto));
  RemoveCacheDirectiveResponseProto_descriptor_ = file->message_type(84);
  static const int RemoveCacheDirectiveResponseProto_offsets_[1] = {
  };
  RemoveCacheDirectiveResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveCacheDirectiveResponseProto_descriptor_,
      RemoveCacheDirectiveResponseProto::default_instance_,
      RemoveCacheDirectiveResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheDirectiveResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCacheDirectiveResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveCacheDirectiveResponseProto));
  ListCacheDirectivesRequestProto_descriptor_ = file->message_type(85);
  static const int ListCacheDirectivesRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCacheDirectivesRequestProto, previd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCacheDirectivesRequestProto, filter_),
  };
  ListCacheDirectivesRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListCacheDirectivesRequestProto_descriptor_,
      ListCacheDirectivesRequestProto::default_instance_,
      ListCacheDirectivesRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCacheDirectivesRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCacheDirectivesRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListCacheDirectivesRequestProto));
  CacheDirectiveEntryProto_descriptor_ = file->message_type(86);
  static const int CacheDirectiveEntryProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveEntryProto, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveEntryProto, stats_),
  };
  CacheDirectiveEntryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheDirectiveEntryProto_descriptor_,
      CacheDirectiveEntryProto::default_instance_,
      CacheDirectiveEntryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveEntryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheDirectiveEntryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheDirectiveEntryProto));
  ListCacheDirectivesResponseProto_descriptor_ = file->message_type(87);
  static const int ListCacheDirectivesResponseProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCacheDirectivesResponseProto, elements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCacheDirectivesResponseProto, hasmore_),
  };
  ListCacheDirectivesResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListCacheDirectivesResponseProto_descriptor_,
      ListCacheDirectivesResponseProto::default_instance_,
      ListCacheDirectivesResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCacheDirectivesResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCacheDirectivesResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListCacheDirectivesResponseProto));
  CachePoolInfoProto_descriptor_ = file->message_type(88);
  static const int CachePoolInfoProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolInfoProto, poolname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolInfoProto, ownername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolInfoProto, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolInfoProto, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolInfoProto, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolInfoProto, maxrelativeexpiry_),
  };
  CachePoolInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachePoolInfoProto_descriptor_,
      CachePoolInfoProto::default_instance_,
      CachePoolInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachePoolInfoProto));
  CachePoolStatsProto_descriptor_ = file->message_type(89);
  static const int CachePoolStatsProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolStatsProto, bytesneeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolStatsProto, bytescached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolStatsProto, bytesoverlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolStatsProto, filesneeded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolStatsProto, filescached_),
  };
  CachePoolStatsProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachePoolStatsProto_descriptor_,
      CachePoolStatsProto::default_instance_,
      CachePoolStatsProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolStatsProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolStatsProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachePoolStatsProto));
  AddCachePoolRequestProto_descriptor_ = file->message_type(90);
  static const int AddCachePoolRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCachePoolRequestProto, info_),
  };
  AddCachePoolRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCachePoolRequestProto_descriptor_,
      AddCachePoolRequestProto::default_instance_,
      AddCachePoolRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCachePoolRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCachePoolRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCachePoolRequestProto));
  AddCachePoolResponseProto_descriptor_ = file->message_type(91);
  static const int AddCachePoolResponseProto_offsets_[1] = {
  };
  AddCachePoolResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCachePoolResponseProto_descriptor_,
      AddCachePoolResponseProto::default_instance_,
      AddCachePoolResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCachePoolResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCachePoolResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCachePoolResponseProto));
  ModifyCachePoolRequestProto_descriptor_ = file->message_type(92);
  static const int ModifyCachePoolRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCachePoolRequestProto, info_),
  };
  ModifyCachePoolRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyCachePoolRequestProto_descriptor_,
      ModifyCachePoolRequestProto::default_instance_,
      ModifyCachePoolRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCachePoolRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCachePoolRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyCachePoolRequestProto));
  ModifyCachePoolResponseProto_descriptor_ = file->message_type(93);
  static const int ModifyCachePoolResponseProto_offsets_[1] = {
  };
  ModifyCachePoolResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyCachePoolResponseProto_descriptor_,
      ModifyCachePoolResponseProto::default_instance_,
      ModifyCachePoolResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCachePoolResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyCachePoolResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyCachePoolResponseProto));
  RemoveCachePoolRequestProto_descriptor_ = file->message_type(94);
  static const int RemoveCachePoolRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCachePoolRequestProto, poolname_),
  };
  RemoveCachePoolRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveCachePoolRequestProto_descriptor_,
      RemoveCachePoolRequestProto::default_instance_,
      RemoveCachePoolRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCachePoolRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCachePoolRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveCachePoolRequestProto));
  RemoveCachePoolResponseProto_descriptor_ = file->message_type(95);
  static const int RemoveCachePoolResponseProto_offsets_[1] = {
  };
  RemoveCachePoolResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveCachePoolResponseProto_descriptor_,
      RemoveCachePoolResponseProto::default_instance_,
      RemoveCachePoolResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCachePoolResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCachePoolResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveCachePoolResponseProto));
  ListCachePoolsRequestProto_descriptor_ = file->message_type(96);
  static const int ListCachePoolsRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCachePoolsRequestProto, prevpoolname_),
  };
  ListCachePoolsRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListCachePoolsRequestProto_descriptor_,
      ListCachePoolsRequestProto::default_instance_,
      ListCachePoolsRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCachePoolsRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCachePoolsRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListCachePoolsRequestProto));
  ListCachePoolsResponseProto_descriptor_ = file->message_type(97);
  static const int ListCachePoolsResponseProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCachePoolsResponseProto, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCachePoolsResponseProto, hasmore_),
  };
  ListCachePoolsResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListCachePoolsResponseProto_descriptor_,
      ListCachePoolsResponseProto::default_instance_,
      ListCachePoolsResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCachePoolsResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCachePoolsResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListCachePoolsResponseProto));
  CachePoolEntryProto_descriptor_ = file->message_type(98);
  static const int CachePoolEntryProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolEntryProto, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolEntryProto, stats_),
  };
  CachePoolEntryProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CachePoolEntryProto_descriptor_,
      CachePoolEntryProto::default_instance_,
      CachePoolEntryProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolEntryProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CachePoolEntryProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CachePoolEntryProto));
  GetFileLinkInfoRequestProto_descriptor_ = file->message_type(99);
  static const int GetFileLinkInfoRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLinkInfoRequestProto, src_),
  };
  GetFileLinkInfoRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileLinkInfoRequestProto_descriptor_,
      GetFileLinkInfoRequestProto::default_instance_,
      GetFileLinkInfoRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLinkInfoRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLinkInfoRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileLinkInfoRequestProto));
  GetFileLinkInfoResponseProto_descriptor_ = file->message_type(100);
  static const int GetFileLinkInfoResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLinkInfoResponseProto, fs_),
  };
  GetFileLinkInfoResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileLinkInfoResponseProto_descriptor_,
      GetFileLinkInfoResponseProto::default_instance_,
      GetFileLinkInfoResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLinkInfoResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileLinkInfoResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileLinkInfoResponseProto));
  GetContentSummaryRequestProto_descriptor_ = file->message_type(101);
  static const int GetContentSummaryRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContentSummaryRequestProto, path_),
  };
  GetContentSummaryRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetContentSummaryRequestProto_descriptor_,
      GetContentSummaryRequestProto::default_instance_,
      GetContentSummaryRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContentSummaryRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContentSummaryRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetContentSummaryRequestProto));
  GetContentSummaryResponseProto_descriptor_ = file->message_type(102);
  static const int GetContentSummaryResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContentSummaryResponseProto, summary_),
  };
  GetContentSummaryResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetContentSummaryResponseProto_descriptor_,
      GetContentSummaryResponseProto::default_instance_,
      GetContentSummaryResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContentSummaryResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetContentSummaryResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetContentSummaryResponseProto));
  SetQuotaRequestProto_descriptor_ = file->message_type(103);
  static const int SetQuotaRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequestProto, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequestProto, namespacequota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequestProto, diskspacequota_),
  };
  SetQuotaRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetQuotaRequestProto_descriptor_,
      SetQuotaRequestProto::default_instance_,
      SetQuotaRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetQuotaRequestProto));
  SetQuotaResponseProto_descriptor_ = file->message_type(104);
  static const int SetQuotaResponseProto_offsets_[1] = {
  };
  SetQuotaResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetQuotaResponseProto_descriptor_,
      SetQuotaResponseProto::default_instance_,
      SetQuotaResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuotaResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetQuotaResponseProto));
  FsyncRequestProto_descriptor_ = file->message_type(105);
  static const int FsyncRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsyncRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsyncRequestProto, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsyncRequestProto, lastblocklength_),
  };
  FsyncRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FsyncRequestProto_descriptor_,
      FsyncRequestProto::default_instance_,
      FsyncRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsyncRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsyncRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FsyncRequestProto));
  FsyncResponseProto_descriptor_ = file->message_type(106);
  static const int FsyncResponseProto_offsets_[1] = {
  };
  FsyncResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FsyncResponseProto_descriptor_,
      FsyncResponseProto::default_instance_,
      FsyncResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsyncResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsyncResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FsyncResponseProto));
  SetTimesRequestProto_descriptor_ = file->message_type(107);
  static const int SetTimesRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimesRequestProto, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimesRequestProto, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimesRequestProto, atime_),
  };
  SetTimesRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTimesRequestProto_descriptor_,
      SetTimesRequestProto::default_instance_,
      SetTimesRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimesRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimesRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTimesRequestProto));
  SetTimesResponseProto_descriptor_ = file->message_type(108);
  static const int SetTimesResponseProto_offsets_[1] = {
  };
  SetTimesResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTimesResponseProto_descriptor_,
      SetTimesResponseProto::default_instance_,
      SetTimesResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimesResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimesResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTimesResponseProto));
  CreateSymlinkRequestProto_descriptor_ = file->message_type(109);
  static const int CreateSymlinkRequestProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSymlinkRequestProto, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSymlinkRequestProto, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSymlinkRequestProto, dirperm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSymlinkRequestProto, createparent_),
  };
  CreateSymlinkRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSymlinkRequestProto_descriptor_,
      CreateSymlinkRequestProto::default_instance_,
      CreateSymlinkRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSymlinkRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSymlinkRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSymlinkRequestProto));
  CreateSymlinkResponseProto_descriptor_ = file->message_type(110);
  static const int CreateSymlinkResponseProto_offsets_[1] = {
  };
  CreateSymlinkResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSymlinkResponseProto_descriptor_,
      CreateSymlinkResponseProto::default_instance_,
      CreateSymlinkResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSymlinkResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSymlinkResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSymlinkResponseProto));
  GetLinkTargetRequestProto_descriptor_ = file->message_type(111);
  static const int GetLinkTargetRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkTargetRequestProto, path_),
  };
  GetLinkTargetRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLinkTargetRequestProto_descriptor_,
      GetLinkTargetRequestProto::default_instance_,
      GetLinkTargetRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkTargetRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkTargetRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLinkTargetRequestProto));
  GetLinkTargetResponseProto_descriptor_ = file->message_type(112);
  static const int GetLinkTargetResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkTargetResponseProto, targetpath_),
  };
  GetLinkTargetResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLinkTargetResponseProto_descriptor_,
      GetLinkTargetResponseProto::default_instance_,
      GetLinkTargetResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkTargetResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLinkTargetResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLinkTargetResponseProto));
  UpdateBlockForPipelineRequestProto_descriptor_ = file->message_type(113);
  static const int UpdateBlockForPipelineRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBlockForPipelineRequestProto, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBlockForPipelineRequestProto, clientname_),
  };
  UpdateBlockForPipelineRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBlockForPipelineRequestProto_descriptor_,
      UpdateBlockForPipelineRequestProto::default_instance_,
      UpdateBlockForPipelineRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBlockForPipelineRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBlockForPipelineRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBlockForPipelineRequestProto));
  UpdateBlockForPipelineResponseProto_descriptor_ = file->message_type(114);
  static const int UpdateBlockForPipelineResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBlockForPipelineResponseProto, block_),
  };
  UpdateBlockForPipelineResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBlockForPipelineResponseProto_descriptor_,
      UpdateBlockForPipelineResponseProto::default_instance_,
      UpdateBlockForPipelineResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBlockForPipelineResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBlockForPipelineResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBlockForPipelineResponseProto));
  UpdatePipelineRequestProto_descriptor_ = file->message_type(115);
  static const int UpdatePipelineRequestProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePipelineRequestProto, clientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePipelineRequestProto, oldblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePipelineRequestProto, newblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePipelineRequestProto, newnodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePipelineRequestProto, storageids_),
  };
  UpdatePipelineRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePipelineRequestProto_descriptor_,
      UpdatePipelineRequestProto::default_instance_,
      UpdatePipelineRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePipelineRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePipelineRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePipelineRequestProto));
  UpdatePipelineResponseProto_descriptor_ = file->message_type(116);
  static const int UpdatePipelineResponseProto_offsets_[1] = {
  };
  UpdatePipelineResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePipelineResponseProto_descriptor_,
      UpdatePipelineResponseProto::default_instance_,
      UpdatePipelineResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePipelineResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePipelineResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePipelineResponseProto));
  SetBalancerBandwidthRequestProto_descriptor_ = file->message_type(117);
  static const int SetBalancerBandwidthRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerBandwidthRequestProto, bandwidth_),
  };
  SetBalancerBandwidthRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetBalancerBandwidthRequestProto_descriptor_,
      SetBalancerBandwidthRequestProto::default_instance_,
      SetBalancerBandwidthRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerBandwidthRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerBandwidthRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetBalancerBandwidthRequestProto));
  SetBalancerBandwidthResponseProto_descriptor_ = file->message_type(118);
  static const int SetBalancerBandwidthResponseProto_offsets_[1] = {
  };
  SetBalancerBandwidthResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetBalancerBandwidthResponseProto_descriptor_,
      SetBalancerBandwidthResponseProto::default_instance_,
      SetBalancerBandwidthResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerBandwidthResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBalancerBandwidthResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetBalancerBandwidthResponseProto));
  GetDataEncryptionKeyRequestProto_descriptor_ = file->message_type(119);
  static const int GetDataEncryptionKeyRequestProto_offsets_[1] = {
  };
  GetDataEncryptionKeyRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDataEncryptionKeyRequestProto_descriptor_,
      GetDataEncryptionKeyRequestProto::default_instance_,
      GetDataEncryptionKeyRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataEncryptionKeyRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataEncryptionKeyRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDataEncryptionKeyRequestProto));
  GetDataEncryptionKeyResponseProto_descriptor_ = file->message_type(120);
  static const int GetDataEncryptionKeyResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataEncryptionKeyResponseProto, dataencryptionkey_),
  };
  GetDataEncryptionKeyResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDataEncryptionKeyResponseProto_descriptor_,
      GetDataEncryptionKeyResponseProto::default_instance_,
      GetDataEncryptionKeyResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataEncryptionKeyResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDataEncryptionKeyResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDataEncryptionKeyResponseProto));
  CreateSnapshotRequestProto_descriptor_ = file->message_type(121);
  static const int CreateSnapshotRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSnapshotRequestProto, snapshotroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSnapshotRequestProto, snapshotname_),
  };
  CreateSnapshotRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSnapshotRequestProto_descriptor_,
      CreateSnapshotRequestProto::default_instance_,
      CreateSnapshotRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSnapshotRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSnapshotRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSnapshotRequestProto));
  CreateSnapshotResponseProto_descriptor_ = file->message_type(122);
  static const int CreateSnapshotResponseProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSnapshotResponseProto, snapshotpath_),
  };
  CreateSnapshotResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSnapshotResponseProto_descriptor_,
      CreateSnapshotResponseProto::default_instance_,
      CreateSnapshotResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSnapshotResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSnapshotResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSnapshotResponseProto));
  RenameSnapshotRequestProto_descriptor_ = file->message_type(123);
  static const int RenameSnapshotRequestProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameSnapshotRequestProto, snapshotroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameSnapshotRequestProto, snapshotoldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameSnapshotRequestProto, snapshotnewname_),
  };
  RenameSnapshotRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameSnapshotRequestProto_descriptor_,
      RenameSnapshotRequestProto::default_instance_,
      RenameSnapshotRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameSnapshotRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameSnapshotRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameSnapshotRequestProto));
  RenameSnapshotResponseProto_descriptor_ = file->message_type(124);
  static const int RenameSnapshotResponseProto_offsets_[1] = {
  };
  RenameSnapshotResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameSnapshotResponseProto_descriptor_,
      RenameSnapshotResponseProto::default_instance_,
      RenameSnapshotResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameSnapshotResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameSnapshotResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameSnapshotResponseProto));
  AllowSnapshotRequestProto_descriptor_ = file->message_type(125);
  static const int AllowSnapshotRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllowSnapshotRequestProto, snapshotroot_),
  };
  AllowSnapshotRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllowSnapshotRequestProto_descriptor_,
      AllowSnapshotRequestProto::default_instance_,
      AllowSnapshotRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllowSnapshotRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllowSnapshotRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllowSnapshotRequestProto));
  AllowSnapshotResponseProto_descriptor_ = file->message_type(126);
  static const int AllowSnapshotResponseProto_offsets_[1] = {
  };
  AllowSnapshotResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllowSnapshotResponseProto_descriptor_,
      AllowSnapshotResponseProto::default_instance_,
      AllowSnapshotResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllowSnapshotResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllowSnapshotResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllowSnapshotResponseProto));
  DisallowSnapshotRequestProto_descriptor_ = file->message_type(127);
  static const int DisallowSnapshotRequestProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisallowSnapshotRequestProto, snapshotroot_),
  };
  DisallowSnapshotRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisallowSnapshotRequestProto_descriptor_,
      DisallowSnapshotRequestProto::default_instance_,
      DisallowSnapshotRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisallowSnapshotRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisallowSnapshotRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisallowSnapshotRequestProto));
  DisallowSnapshotResponseProto_descriptor_ = file->message_type(128);
  static const int DisallowSnapshotResponseProto_offsets_[1] = {
  };
  DisallowSnapshotResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisallowSnapshotResponseProto_descriptor_,
      DisallowSnapshotResponseProto::default_instance_,
      DisallowSnapshotResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisallowSnapshotResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisallowSnapshotResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisallowSnapshotResponseProto));
  DeleteSnapshotRequestProto_descriptor_ = file->message_type(129);
  static const int DeleteSnapshotRequestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotRequestProto, snapshotroot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotRequestProto, snapshotname_),
  };
  DeleteSnapshotRequestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSnapshotRequestProto_descriptor_,
      DeleteSnapshotRequestProto::default_instance_,
      DeleteSnapshotRequestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotRequestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotRequestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSnapshotRequestProto));
  DeleteSnapshotResponseProto_descriptor_ = file->message_type(130);
  static const int DeleteSnapshotResponseProto_offsets_[1] = {
  };
  DeleteSnapshotResponseProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteSnapshotResponseProto_descriptor_,
      DeleteSnapshotResponseProto::default_instance_,
      DeleteSnapshotResponseProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotResponseProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSnapshotResponseProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteSnapshotResponseProto));
  CreateFlagProto_descriptor_ = file->enum_type(0);
  DatanodeReportTypeProto_descriptor_ = file->enum_type(1);
  SafeModeActionProto_descriptor_ = file->enum_type(2);
  CacheFlagProto_descriptor_ = file->enum_type(3);
  ClientNamenodeProtocol_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientNamenodeProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlockLocationsRequestProto_descriptor_, &GetBlockLocationsRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBlockLocationsResponseProto_descriptor_, &GetBlockLocationsResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerDefaultsRequestProto_descriptor_, &GetServerDefaultsRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetServerDefaultsResponseProto_descriptor_, &GetServerDefaultsResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRequestProto_descriptor_, &CreateRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateResponseProto_descriptor_, &CreateResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendRequestProto_descriptor_, &AppendRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppendResponseProto_descriptor_, &AppendResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetReplicationRequestProto_descriptor_, &SetReplicationRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetReplicationResponseProto_descriptor_, &SetReplicationResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPermissionRequestProto_descriptor_, &SetPermissionRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetPermissionResponseProto_descriptor_, &SetPermissionResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetOwnerRequestProto_descriptor_, &SetOwnerRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetOwnerResponseProto_descriptor_, &SetOwnerResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbandonBlockRequestProto_descriptor_, &AbandonBlockRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AbandonBlockResponseProto_descriptor_, &AbandonBlockResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBlockRequestProto_descriptor_, &AddBlockRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBlockResponseProto_descriptor_, &AddBlockResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAdditionalDatanodeRequestProto_descriptor_, &GetAdditionalDatanodeRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAdditionalDatanodeResponseProto_descriptor_, &GetAdditionalDatanodeResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompleteRequestProto_descriptor_, &CompleteRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompleteResponseProto_descriptor_, &CompleteResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportBadBlocksRequestProto_descriptor_, &ReportBadBlocksRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportBadBlocksResponseProto_descriptor_, &ReportBadBlocksResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcatRequestProto_descriptor_, &ConcatRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConcatResponseProto_descriptor_, &ConcatResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruncateRequestProto_descriptor_, &TruncateRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TruncateResponseProto_descriptor_, &TruncateResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLeaseRequestProto_descriptor_, &GetLeaseRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLeaseResponseProto_descriptor_, &GetLeaseResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReleaseLeaseRequestProto_descriptor_, &ReleaseLeaseRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReleaseLeaseResponseProto_descriptor_, &ReleaseLeaseResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameRequestProto_descriptor_, &RenameRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameResponseProto_descriptor_, &RenameResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rename2RequestProto_descriptor_, &Rename2RequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rename2ResponseProto_descriptor_, &Rename2ResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteRequestProto_descriptor_, &DeleteRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteResponseProto_descriptor_, &DeleteResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MkdirsRequestProto_descriptor_, &MkdirsRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MkdirsResponseProto_descriptor_, &MkdirsResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetListingRequestProto_descriptor_, &GetListingRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetListingResponseProto_descriptor_, &GetListingResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSnapshottableDirListingRequestProto_descriptor_, &GetSnapshottableDirListingRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSnapshottableDirListingResponseProto_descriptor_, &GetSnapshottableDirListingResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSnapshotDiffReportRequestProto_descriptor_, &GetSnapshotDiffReportRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetSnapshotDiffReportResponseProto_descriptor_, &GetSnapshotDiffReportResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenewLeaseRequestProto_descriptor_, &RenewLeaseRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenewLeaseResponseProto_descriptor_, &RenewLeaseResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverLeaseRequestProto_descriptor_, &RecoverLeaseRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverLeaseResponseProto_descriptor_, &RecoverLeaseResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFsStatusRequestProto_descriptor_, &GetFsStatusRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFsStatsResponseProto_descriptor_, &GetFsStatsResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatanodeReportRequestProto_descriptor_, &GetDatanodeReportRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDatanodeReportResponseProto_descriptor_, &GetDatanodeReportResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPreferredBlockSizeRequestProto_descriptor_, &GetPreferredBlockSizeRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetPreferredBlockSizeResponseProto_descriptor_, &GetPreferredBlockSizeResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSafeModeRequestProto_descriptor_, &SetSafeModeRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetSafeModeResponseProto_descriptor_, &SetSafeModeResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveNamespaceRequestProto_descriptor_, &SaveNamespaceRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveNamespaceResponseProto_descriptor_, &SaveNamespaceResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RollEditsRequestProto_descriptor_, &RollEditsRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RollEditsResponseProto_descriptor_, &RollEditsResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestoreFailedStorageRequestProto_descriptor_, &RestoreFailedStorageRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RestoreFailedStorageResponseProto_descriptor_, &RestoreFailedStorageResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshNodesRequestProto_descriptor_, &RefreshNodesRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshNodesResponseProto_descriptor_, &RefreshNodesResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinalizeUpgradeRequestProto_descriptor_, &FinalizeUpgradeRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinalizeUpgradeResponseProto_descriptor_, &FinalizeUpgradeResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListCorruptFileBlocksRequestProto_descriptor_, &ListCorruptFileBlocksRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListCorruptFileBlocksResponseProto_descriptor_, &ListCorruptFileBlocksResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaSaveRequestProto_descriptor_, &MetaSaveRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaSaveResponseProto_descriptor_, &MetaSaveResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileInfoRequestProto_descriptor_, &GetFileInfoRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileInfoResponseProto_descriptor_, &GetFileInfoResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsFileClosedRequestProto_descriptor_, &IsFileClosedRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsFileClosedResponseProto_descriptor_, &IsFileClosedResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheDirectiveInfoProto_descriptor_, &CacheDirectiveInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheDirectiveInfoExpirationProto_descriptor_, &CacheDirectiveInfoExpirationProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheDirectiveStatsProto_descriptor_, &CacheDirectiveStatsProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCacheDirectiveRequestProto_descriptor_, &AddCacheDirectiveRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCacheDirectiveResponseProto_descriptor_, &AddCacheDirectiveResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyCacheDirectiveRequestProto_descriptor_, &ModifyCacheDirectiveRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyCacheDirectiveResponseProto_descriptor_, &ModifyCacheDirectiveResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveCacheDirectiveRequestProto_descriptor_, &RemoveCacheDirectiveRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveCacheDirectiveResponseProto_descriptor_, &RemoveCacheDirectiveResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListCacheDirectivesRequestProto_descriptor_, &ListCacheDirectivesRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheDirectiveEntryProto_descriptor_, &CacheDirectiveEntryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListCacheDirectivesResponseProto_descriptor_, &ListCacheDirectivesResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachePoolInfoProto_descriptor_, &CachePoolInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachePoolStatsProto_descriptor_, &CachePoolStatsProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCachePoolRequestProto_descriptor_, &AddCachePoolRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCachePoolResponseProto_descriptor_, &AddCachePoolResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyCachePoolRequestProto_descriptor_, &ModifyCachePoolRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyCachePoolResponseProto_descriptor_, &ModifyCachePoolResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveCachePoolRequestProto_descriptor_, &RemoveCachePoolRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveCachePoolResponseProto_descriptor_, &RemoveCachePoolResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListCachePoolsRequestProto_descriptor_, &ListCachePoolsRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListCachePoolsResponseProto_descriptor_, &ListCachePoolsResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CachePoolEntryProto_descriptor_, &CachePoolEntryProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileLinkInfoRequestProto_descriptor_, &GetFileLinkInfoRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileLinkInfoResponseProto_descriptor_, &GetFileLinkInfoResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetContentSummaryRequestProto_descriptor_, &GetContentSummaryRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetContentSummaryResponseProto_descriptor_, &GetContentSummaryResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetQuotaRequestProto_descriptor_, &SetQuotaRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetQuotaResponseProto_descriptor_, &SetQuotaResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FsyncRequestProto_descriptor_, &FsyncRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FsyncResponseProto_descriptor_, &FsyncResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTimesRequestProto_descriptor_, &SetTimesRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTimesResponseProto_descriptor_, &SetTimesResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSymlinkRequestProto_descriptor_, &CreateSymlinkRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSymlinkResponseProto_descriptor_, &CreateSymlinkResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLinkTargetRequestProto_descriptor_, &GetLinkTargetRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLinkTargetResponseProto_descriptor_, &GetLinkTargetResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBlockForPipelineRequestProto_descriptor_, &UpdateBlockForPipelineRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBlockForPipelineResponseProto_descriptor_, &UpdateBlockForPipelineResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePipelineRequestProto_descriptor_, &UpdatePipelineRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePipelineResponseProto_descriptor_, &UpdatePipelineResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetBalancerBandwidthRequestProto_descriptor_, &SetBalancerBandwidthRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetBalancerBandwidthResponseProto_descriptor_, &SetBalancerBandwidthResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDataEncryptionKeyRequestProto_descriptor_, &GetDataEncryptionKeyRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDataEncryptionKeyResponseProto_descriptor_, &GetDataEncryptionKeyResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSnapshotRequestProto_descriptor_, &CreateSnapshotRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSnapshotResponseProto_descriptor_, &CreateSnapshotResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameSnapshotRequestProto_descriptor_, &RenameSnapshotRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameSnapshotResponseProto_descriptor_, &RenameSnapshotResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllowSnapshotRequestProto_descriptor_, &AllowSnapshotRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllowSnapshotResponseProto_descriptor_, &AllowSnapshotResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisallowSnapshotRequestProto_descriptor_, &DisallowSnapshotRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisallowSnapshotResponseProto_descriptor_, &DisallowSnapshotResponseProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSnapshotRequestProto_descriptor_, &DeleteSnapshotRequestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteSnapshotResponseProto_descriptor_, &DeleteSnapshotResponseProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto() {
  delete GetBlockLocationsRequestProto::default_instance_;
  delete GetBlockLocationsRequestProto_reflection_;
  delete GetBlockLocationsResponseProto::default_instance_;
  delete GetBlockLocationsResponseProto_reflection_;
  delete GetServerDefaultsRequestProto::default_instance_;
  delete GetServerDefaultsRequestProto_reflection_;
  delete GetServerDefaultsResponseProto::default_instance_;
  delete GetServerDefaultsResponseProto_reflection_;
  delete CreateRequestProto::default_instance_;
  delete CreateRequestProto_reflection_;
  delete CreateResponseProto::default_instance_;
  delete CreateResponseProto_reflection_;
  delete AppendRequestProto::default_instance_;
  delete AppendRequestProto_reflection_;
  delete AppendResponseProto::default_instance_;
  delete AppendResponseProto_reflection_;
  delete SetReplicationRequestProto::default_instance_;
  delete SetReplicationRequestProto_reflection_;
  delete SetReplicationResponseProto::default_instance_;
  delete SetReplicationResponseProto_reflection_;
  delete SetPermissionRequestProto::default_instance_;
  delete SetPermissionRequestProto_reflection_;
  delete SetPermissionResponseProto::default_instance_;
  delete SetPermissionResponseProto_reflection_;
  delete SetOwnerRequestProto::default_instance_;
  delete SetOwnerRequestProto_reflection_;
  delete SetOwnerResponseProto::default_instance_;
  delete SetOwnerResponseProto_reflection_;
  delete AbandonBlockRequestProto::default_instance_;
  delete AbandonBlockRequestProto_reflection_;
  delete AbandonBlockResponseProto::default_instance_;
  delete AbandonBlockResponseProto_reflection_;
  delete AddBlockRequestProto::default_instance_;
  delete AddBlockRequestProto_reflection_;
  delete AddBlockResponseProto::default_instance_;
  delete AddBlockResponseProto_reflection_;
  delete GetAdditionalDatanodeRequestProto::default_instance_;
  delete GetAdditionalDatanodeRequestProto_reflection_;
  delete GetAdditionalDatanodeResponseProto::default_instance_;
  delete GetAdditionalDatanodeResponseProto_reflection_;
  delete CompleteRequestProto::default_instance_;
  delete CompleteRequestProto_reflection_;
  delete CompleteResponseProto::default_instance_;
  delete CompleteResponseProto_reflection_;
  delete ReportBadBlocksRequestProto::default_instance_;
  delete ReportBadBlocksRequestProto_reflection_;
  delete ReportBadBlocksResponseProto::default_instance_;
  delete ReportBadBlocksResponseProto_reflection_;
  delete ConcatRequestProto::default_instance_;
  delete ConcatRequestProto_reflection_;
  delete ConcatResponseProto::default_instance_;
  delete ConcatResponseProto_reflection_;
  delete TruncateRequestProto::default_instance_;
  delete TruncateRequestProto_reflection_;
  delete TruncateResponseProto::default_instance_;
  delete TruncateResponseProto_reflection_;
  delete GetLeaseRequestProto::default_instance_;
  delete GetLeaseRequestProto_reflection_;
  delete GetLeaseResponseProto::default_instance_;
  delete GetLeaseResponseProto_reflection_;
  delete ReleaseLeaseRequestProto::default_instance_;
  delete ReleaseLeaseRequestProto_reflection_;
  delete ReleaseLeaseResponseProto::default_instance_;
  delete ReleaseLeaseResponseProto_reflection_;
  delete RenameRequestProto::default_instance_;
  delete RenameRequestProto_reflection_;
  delete RenameResponseProto::default_instance_;
  delete RenameResponseProto_reflection_;
  delete Rename2RequestProto::default_instance_;
  delete Rename2RequestProto_reflection_;
  delete Rename2ResponseProto::default_instance_;
  delete Rename2ResponseProto_reflection_;
  delete DeleteRequestProto::default_instance_;
  delete DeleteRequestProto_reflection_;
  delete DeleteResponseProto::default_instance_;
  delete DeleteResponseProto_reflection_;
  delete MkdirsRequestProto::default_instance_;
  delete MkdirsRequestProto_reflection_;
  delete MkdirsResponseProto::default_instance_;
  delete MkdirsResponseProto_reflection_;
  delete GetListingRequestProto::default_instance_;
  delete GetListingRequestProto_reflection_;
  delete GetListingResponseProto::default_instance_;
  delete GetListingResponseProto_reflection_;
  delete GetSnapshottableDirListingRequestProto::default_instance_;
  delete GetSnapshottableDirListingRequestProto_reflection_;
  delete GetSnapshottableDirListingResponseProto::default_instance_;
  delete GetSnapshottableDirListingResponseProto_reflection_;
  delete GetSnapshotDiffReportRequestProto::default_instance_;
  delete GetSnapshotDiffReportRequestProto_reflection_;
  delete GetSnapshotDiffReportResponseProto::default_instance_;
  delete GetSnapshotDiffReportResponseProto_reflection_;
  delete RenewLeaseRequestProto::default_instance_;
  delete RenewLeaseRequestProto_reflection_;
  delete RenewLeaseResponseProto::default_instance_;
  delete RenewLeaseResponseProto_reflection_;
  delete RecoverLeaseRequestProto::default_instance_;
  delete RecoverLeaseRequestProto_reflection_;
  delete RecoverLeaseResponseProto::default_instance_;
  delete RecoverLeaseResponseProto_reflection_;
  delete GetFsStatusRequestProto::default_instance_;
  delete GetFsStatusRequestProto_reflection_;
  delete GetFsStatsResponseProto::default_instance_;
  delete GetFsStatsResponseProto_reflection_;
  delete GetDatanodeReportRequestProto::default_instance_;
  delete GetDatanodeReportRequestProto_reflection_;
  delete GetDatanodeReportResponseProto::default_instance_;
  delete GetDatanodeReportResponseProto_reflection_;
  delete GetPreferredBlockSizeRequestProto::default_instance_;
  delete GetPreferredBlockSizeRequestProto_reflection_;
  delete GetPreferredBlockSizeResponseProto::default_instance_;
  delete GetPreferredBlockSizeResponseProto_reflection_;
  delete SetSafeModeRequestProto::default_instance_;
  delete SetSafeModeRequestProto_reflection_;
  delete SetSafeModeResponseProto::default_instance_;
  delete SetSafeModeResponseProto_reflection_;
  delete SaveNamespaceRequestProto::default_instance_;
  delete SaveNamespaceRequestProto_reflection_;
  delete SaveNamespaceResponseProto::default_instance_;
  delete SaveNamespaceResponseProto_reflection_;
  delete RollEditsRequestProto::default_instance_;
  delete RollEditsRequestProto_reflection_;
  delete RollEditsResponseProto::default_instance_;
  delete RollEditsResponseProto_reflection_;
  delete RestoreFailedStorageRequestProto::default_instance_;
  delete RestoreFailedStorageRequestProto_reflection_;
  delete RestoreFailedStorageResponseProto::default_instance_;
  delete RestoreFailedStorageResponseProto_reflection_;
  delete RefreshNodesRequestProto::default_instance_;
  delete RefreshNodesRequestProto_reflection_;
  delete RefreshNodesResponseProto::default_instance_;
  delete RefreshNodesResponseProto_reflection_;
  delete FinalizeUpgradeRequestProto::default_instance_;
  delete FinalizeUpgradeRequestProto_reflection_;
  delete FinalizeUpgradeResponseProto::default_instance_;
  delete FinalizeUpgradeResponseProto_reflection_;
  delete ListCorruptFileBlocksRequestProto::default_instance_;
  delete ListCorruptFileBlocksRequestProto_reflection_;
  delete ListCorruptFileBlocksResponseProto::default_instance_;
  delete ListCorruptFileBlocksResponseProto_reflection_;
  delete MetaSaveRequestProto::default_instance_;
  delete MetaSaveRequestProto_reflection_;
  delete MetaSaveResponseProto::default_instance_;
  delete MetaSaveResponseProto_reflection_;
  delete GetFileInfoRequestProto::default_instance_;
  delete GetFileInfoRequestProto_reflection_;
  delete GetFileInfoResponseProto::default_instance_;
  delete GetFileInfoResponseProto_reflection_;
  delete IsFileClosedRequestProto::default_instance_;
  delete IsFileClosedRequestProto_reflection_;
  delete IsFileClosedResponseProto::default_instance_;
  delete IsFileClosedResponseProto_reflection_;
  delete CacheDirectiveInfoProto::default_instance_;
  delete CacheDirectiveInfoProto_reflection_;
  delete CacheDirectiveInfoExpirationProto::default_instance_;
  delete CacheDirectiveInfoExpirationProto_reflection_;
  delete CacheDirectiveStatsProto::default_instance_;
  delete CacheDirectiveStatsProto_reflection_;
  delete AddCacheDirectiveRequestProto::default_instance_;
  delete AddCacheDirectiveRequestProto_reflection_;
  delete AddCacheDirectiveResponseProto::default_instance_;
  delete AddCacheDirectiveResponseProto_reflection_;
  delete ModifyCacheDirectiveRequestProto::default_instance_;
  delete ModifyCacheDirectiveRequestProto_reflection_;
  delete ModifyCacheDirectiveResponseProto::default_instance_;
  delete ModifyCacheDirectiveResponseProto_reflection_;
  delete RemoveCacheDirectiveRequestProto::default_instance_;
  delete RemoveCacheDirectiveRequestProto_reflection_;
  delete RemoveCacheDirectiveResponseProto::default_instance_;
  delete RemoveCacheDirectiveResponseProto_reflection_;
  delete ListCacheDirectivesRequestProto::default_instance_;
  delete ListCacheDirectivesRequestProto_reflection_;
  delete CacheDirectiveEntryProto::default_instance_;
  delete CacheDirectiveEntryProto_reflection_;
  delete ListCacheDirectivesResponseProto::default_instance_;
  delete ListCacheDirectivesResponseProto_reflection_;
  delete CachePoolInfoProto::default_instance_;
  delete CachePoolInfoProto_reflection_;
  delete CachePoolStatsProto::default_instance_;
  delete CachePoolStatsProto_reflection_;
  delete AddCachePoolRequestProto::default_instance_;
  delete AddCachePoolRequestProto_reflection_;
  delete AddCachePoolResponseProto::default_instance_;
  delete AddCachePoolResponseProto_reflection_;
  delete ModifyCachePoolRequestProto::default_instance_;
  delete ModifyCachePoolRequestProto_reflection_;
  delete ModifyCachePoolResponseProto::default_instance_;
  delete ModifyCachePoolResponseProto_reflection_;
  delete RemoveCachePoolRequestProto::default_instance_;
  delete RemoveCachePoolRequestProto_reflection_;
  delete RemoveCachePoolResponseProto::default_instance_;
  delete RemoveCachePoolResponseProto_reflection_;
  delete ListCachePoolsRequestProto::default_instance_;
  delete ListCachePoolsRequestProto_reflection_;
  delete ListCachePoolsResponseProto::default_instance_;
  delete ListCachePoolsResponseProto_reflection_;
  delete CachePoolEntryProto::default_instance_;
  delete CachePoolEntryProto_reflection_;
  delete GetFileLinkInfoRequestProto::default_instance_;
  delete GetFileLinkInfoRequestProto_reflection_;
  delete GetFileLinkInfoResponseProto::default_instance_;
  delete GetFileLinkInfoResponseProto_reflection_;
  delete GetContentSummaryRequestProto::default_instance_;
  delete GetContentSummaryRequestProto_reflection_;
  delete GetContentSummaryResponseProto::default_instance_;
  delete GetContentSummaryResponseProto_reflection_;
  delete SetQuotaRequestProto::default_instance_;
  delete SetQuotaRequestProto_reflection_;
  delete SetQuotaResponseProto::default_instance_;
  delete SetQuotaResponseProto_reflection_;
  delete FsyncRequestProto::default_instance_;
  delete FsyncRequestProto_reflection_;
  delete FsyncResponseProto::default_instance_;
  delete FsyncResponseProto_reflection_;
  delete SetTimesRequestProto::default_instance_;
  delete SetTimesRequestProto_reflection_;
  delete SetTimesResponseProto::default_instance_;
  delete SetTimesResponseProto_reflection_;
  delete CreateSymlinkRequestProto::default_instance_;
  delete CreateSymlinkRequestProto_reflection_;
  delete CreateSymlinkResponseProto::default_instance_;
  delete CreateSymlinkResponseProto_reflection_;
  delete GetLinkTargetRequestProto::default_instance_;
  delete GetLinkTargetRequestProto_reflection_;
  delete GetLinkTargetResponseProto::default_instance_;
  delete GetLinkTargetResponseProto_reflection_;
  delete UpdateBlockForPipelineRequestProto::default_instance_;
  delete UpdateBlockForPipelineRequestProto_reflection_;
  delete UpdateBlockForPipelineResponseProto::default_instance_;
  delete UpdateBlockForPipelineResponseProto_reflection_;
  delete UpdatePipelineRequestProto::default_instance_;
  delete UpdatePipelineRequestProto_reflection_;
  delete UpdatePipelineResponseProto::default_instance_;
  delete UpdatePipelineResponseProto_reflection_;
  delete SetBalancerBandwidthRequestProto::default_instance_;
  delete SetBalancerBandwidthRequestProto_reflection_;
  delete SetBalancerBandwidthResponseProto::default_instance_;
  delete SetBalancerBandwidthResponseProto_reflection_;
  delete GetDataEncryptionKeyRequestProto::default_instance_;
  delete GetDataEncryptionKeyRequestProto_reflection_;
  delete GetDataEncryptionKeyResponseProto::default_instance_;
  delete GetDataEncryptionKeyResponseProto_reflection_;
  delete CreateSnapshotRequestProto::default_instance_;
  delete CreateSnapshotRequestProto_reflection_;
  delete CreateSnapshotResponseProto::default_instance_;
  delete CreateSnapshotResponseProto_reflection_;
  delete RenameSnapshotRequestProto::default_instance_;
  delete RenameSnapshotRequestProto_reflection_;
  delete RenameSnapshotResponseProto::default_instance_;
  delete RenameSnapshotResponseProto_reflection_;
  delete AllowSnapshotRequestProto::default_instance_;
  delete AllowSnapshotRequestProto_reflection_;
  delete AllowSnapshotResponseProto::default_instance_;
  delete AllowSnapshotResponseProto_reflection_;
  delete DisallowSnapshotRequestProto::default_instance_;
  delete DisallowSnapshotRequestProto_reflection_;
  delete DisallowSnapshotResponseProto::default_instance_;
  delete DisallowSnapshotResponseProto_reflection_;
  delete DeleteSnapshotRequestProto::default_instance_;
  delete DeleteSnapshotRequestProto_reflection_;
  delete DeleteSnapshotResponseProto::default_instance_;
  delete DeleteSnapshotResponseProto_reflection_;
}

void protobuf_AddDesc_ClientNamenodeProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Hdfs::Internal::protobuf_AddDesc_hdfs_2eproto();
  ::Hdfs::Internal::protobuf_AddDesc_Security_2eproto();
  ::Hdfs::Internal::protobuf_AddDesc_encryption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034ClientNamenodeProtocol.proto\022\rHdfs.Int"
    "ernal\032\nhdfs.proto\032\016Security.proto\032\020encry"
    "ption.proto\"L\n\035GetBlockLocationsRequestP"
    "roto\022\013\n\003src\030\001 \002(\t\022\016\n\006offset\030\002 \002(\004\022\016\n\006len"
    "gth\030\003 \002(\004\"V\n\036GetBlockLocationsResponsePr"
    "oto\0224\n\tlocations\030\001 \001(\0132!.Hdfs.Internal.L"
    "ocatedBlocksProto\"\037\n\035GetServerDefaultsRe"
    "questProto\"^\n\036GetServerDefaultsResponseP"
    "roto\022<\n\016serverDefaults\030\001 \002(\0132$.Hdfs.Inte"
    "rnal.FsServerDefaultsProto\"\203\002\n\022CreateReq"
    "uestProto\022\013\n\003src\030\001 \002(\t\0220\n\006masked\030\002 \002(\0132 "
    ".Hdfs.Internal.FsPermissionProto\022\022\n\nclie"
    "ntName\030\003 \002(\t\022\022\n\ncreateFlag\030\004 \002(\r\022\024\n\014crea"
    "teParent\030\005 \002(\010\022\023\n\013replication\030\006 \002(\r\022\021\n\tb"
    "lockSize\030\007 \002(\004\022H\n\025cryptoProtocolVersion\030"
    "\010 \003(\0162).Hdfs.Internal.CryptoProtocolVers"
    "ionProto\"E\n\023CreateResponseProto\022.\n\002fs\030\001 "
    "\001(\0132\".Hdfs.Internal.HdfsFileStatusProto\""
    "5\n\022AppendRequestProto\022\013\n\003src\030\001 \002(\t\022\022\n\ncl"
    "ientName\030\002 \002(\t\"x\n\023AppendResponseProto\022/\n"
    "\005block\030\001 \001(\0132 .Hdfs.Internal.LocatedBloc"
    "kProto\0220\n\004stat\030\002 \001(\0132\".Hdfs.Internal.Hdf"
    "sFileStatusProto\">\n\032SetReplicationReques"
    "tProto\022\013\n\003src\030\001 \002(\t\022\023\n\013replication\030\002 \002(\r"
    "\"-\n\033SetReplicationResponseProto\022\016\n\006resul"
    "t\030\001 \002(\010\"^\n\031SetPermissionRequestProto\022\013\n\003"
    "src\030\001 \002(\t\0224\n\npermission\030\002 \002(\0132 .Hdfs.Int"
    "ernal.FsPermissionProto\"\034\n\032SetPermission"
    "ResponseProto\"H\n\024SetOwnerRequestProto\022\013\n"
    "\003src\030\001 \002(\t\022\020\n\010username\030\002 \001(\t\022\021\n\tgroupnam"
    "e\030\003 \001(\t\"\027\n\025SetOwnerResponseProto\"e\n\030Aban"
    "donBlockRequestProto\022,\n\001b\030\001 \002(\0132!.Hdfs.I"
    "nternal.ExtendedBlockProto\022\013\n\003src\030\002 \002(\t\022"
    "\016\n\006holder\030\003 \002(\t\"\033\n\031AbandonBlockResponseP"
    "roto\"\315\001\n\024AddBlockRequestProto\022\013\n\003src\030\001 \002"
    "(\t\022\022\n\nclientName\030\002 \002(\t\0223\n\010previous\030\003 \001(\013"
    "2!.Hdfs.Internal.ExtendedBlockProto\0226\n\014e"
    "xcludeNodes\030\004 \003(\0132 .Hdfs.Internal.Datano"
    "deInfoProto\022\021\n\006fileId\030\005 \001(\004:\0010\022\024\n\014favore"
    "dNodes\030\006 \003(\t\"H\n\025AddBlockResponseProto\022/\n"
    "\005block\030\001 \002(\0132 .Hdfs.Internal.LocatedBloc"
    "kProto\"\227\002\n!GetAdditionalDatanodeRequestP"
    "roto\022\013\n\003src\030\001 \002(\t\022.\n\003blk\030\002 \002(\0132!.Hdfs.In"
    "ternal.ExtendedBlockProto\0223\n\texistings\030\003"
    " \003(\0132 .Hdfs.Internal.DatanodeInfoProto\0222"
    "\n\010excludes\030\004 \003(\0132 .Hdfs.Internal.Datanod"
    "eInfoProto\022\032\n\022numAdditionalNodes\030\005 \002(\r\022\022"
    "\n\nclientName\030\006 \002(\t\022\034\n\024existingStorageUui"
    "ds\030\007 \003(\t\"U\n\"GetAdditionalDatanodeRespons"
    "eProto\022/\n\005block\030\001 \002(\0132 .Hdfs.Internal.Lo"
    "catedBlockProto\"{\n\024CompleteRequestProto\022"
    "\013\n\003src\030\001 \002(\t\022\022\n\nclientName\030\002 \002(\t\022/\n\004last"
    "\030\003 \001(\0132!.Hdfs.Internal.ExtendedBlockProt"
    "o\022\021\n\006fileId\030\004 \001(\004:\0010\"\'\n\025CompleteResponse"
    "Proto\022\016\n\006result\030\001 \002(\010\"O\n\033ReportBadBlocks"
    "RequestProto\0220\n\006blocks\030\001 \003(\0132 .Hdfs.Inte"
    "rnal.LocatedBlockProto\"\036\n\034ReportBadBlock"
    "sResponseProto\"/\n\022ConcatRequestProto\022\013\n\003"
    "trg\030\001 \002(\t\022\014\n\004srcs\030\002 \003(\t\"\025\n\023ConcatRespons"
    "eProto\"J\n\024TruncateRequestProto\022\013\n\003src\030\001 "
    "\002(\t\022\021\n\tnewLength\030\002 \002(\004\022\022\n\nclientName\030\003 \002"
    "(\t\"\'\n\025TruncateResponseProto\022\016\n\006result\030\001 "
    "\002(\010\"7\n\024GetLeaseRequestProto\022\013\n\003src\030\001 \002(\t"
    "\022\022\n\nclientName\030\002 \002(\t\"\027\n\025GetLeaseResponse"
    "Proto\";\n\030ReleaseLeaseRequestProto\022\013\n\003src"
    "\030\001 \002(\t\022\022\n\nclientName\030\002 \002(\t\"\033\n\031ReleaseLea"
    "seResponseProto\".\n\022RenameRequestProto\022\013\n"
    "\003src\030\001 \002(\t\022\013\n\003dst\030\002 \002(\t\"%\n\023RenameRespons"
    "eProto\022\016\n\006result\030\001 \002(\010\"F\n\023Rename2Request"
    "Proto\022\013\n\003src\030\001 \002(\t\022\013\n\003dst\030\002 \002(\t\022\025\n\roverw"
    "riteDest\030\003 \002(\010\"\026\n\024Rename2ResponseProto\"4"
    "\n\022DeleteRequestProto\022\013\n\003src\030\001 \002(\t\022\021\n\trec"
    "ursive\030\002 \002(\010\"%\n\023DeleteResponseProto\022\016\n\006r"
    "esult\030\001 \002(\010\"i\n\022MkdirsRequestProto\022\013\n\003src"
    "\030\001 \002(\t\0220\n\006masked\030\002 \002(\0132 .Hdfs.Internal.F"
    "sPermissionProto\022\024\n\014createParent\030\003 \002(\010\"%"
    "\n\023MkdirsResponseProto\022\016\n\006result\030\001 \002(\010\"O\n"
    "\026GetListingRequestProto\022\013\n\003src\030\001 \002(\t\022\022\n\n"
    "startAfter\030\002 \002(\014\022\024\n\014needLocation\030\003 \002(\010\"P"
    "\n\027GetListingResponseProto\0225\n\007dirList\030\001 \001"
    "(\0132$.Hdfs.Internal.DirectoryListingProto"
    "\"(\n&GetSnapshottableDirListingRequestPro"
    "to\"z\n\'GetSnapshottableDirListingResponse"
    "Proto\022O\n\024snapshottableDirList\030\001 \001(\01321.Hd"
    "fs.Internal.SnapshottableDirectoryListin"
    "gProto\"c\n!GetSnapshotDiffReportRequestPr"
    "oto\022\024\n\014snapshotRoot\030\001 \002(\t\022\024\n\014fromSnapsho"
    "t\030\002 \002(\t\022\022\n\ntoSnapshot\030\003 \002(\t\"`\n\"GetSnapsh"
    "otDiffReportResponseProto\022:\n\ndiffReport\030"
    "\001 \002(\0132&.Hdfs.Internal.SnapshotDiffReport"
    "Proto\",\n\026RenewLeaseRequestProto\022\022\n\nclien"
    "tName\030\001 \002(\t\"\031\n\027RenewLeaseResponseProto\";"
    "\n\030RecoverLeaseRequestProto\022\013\n\003src\030\001 \002(\t\022"
    "\022\n\nclientName\030\002 \002(\t\"+\n\031RecoverLeaseRespo"
    "nseProto\022\016\n\006result\030\001 \002(\010\"\031\n\027GetFsStatusR"
    "equestProto\"\226\001\n\027GetFsStatsResponseProto\022"
    "\020\n\010capacity\030\001 \002(\004\022\014\n\004used\030\002 \002(\004\022\021\n\tremai"
    "ning\030\003 \002(\004\022\030\n\020under_replicated\030\004 \002(\004\022\026\n\016"
    "corrupt_blocks\030\005 \002(\004\022\026\n\016missing_blocks\030\006"
    " \002(\004\"U\n\035GetDatanodeReportRequestProto\0224\n"
    "\004type\030\001 \002(\0162&.Hdfs.Internal.DatanodeRepo"
    "rtTypeProto\"N\n\036GetDatanodeReportResponse"
    "Proto\022,\n\002di\030\001 \003(\0132 .Hdfs.Internal.Datano"
    "deInfoProto\"5\n!GetPreferredBlockSizeRequ"
    "estProto\022\020\n\010filename\030\001 \002(\t\"3\n\"GetPreferr"
    "edBlockSizeResponseProto\022\r\n\005bsize\030\001 \002(\004\""
    "e\n\027SetSafeModeRequestProto\0222\n\006action\030\001 \002"
    "(\0162\".Hdfs.Internal.SafeModeActionProto\022\026"
    "\n\007checked\030\002 \001(\010:\005false\"*\n\030SetSafeModeRes"
    "ponseProto\022\016\n\006result\030\001 \002(\010\"\033\n\031SaveNamesp"
    "aceRequestProto\"\034\n\032SaveNamespaceResponse"
    "Proto\"\027\n\025RollEditsRequestProto\"0\n\026RollEd"
    "itsResponseProto\022\026\n\016newSegmentTxId\030\001 \002(\004"
    "\"/\n RestoreFailedStorageRequestProto\022\013\n\003"
    "arg\030\001 \002(\t\"3\n!RestoreFailedStorageRespons"
    "eProto\022\016\n\006result\030\001 \002(\010\"\032\n\030RefreshNodesRe"
    "questProto\"\033\n\031RefreshNodesResponseProto\""
    "\035\n\033FinalizeUpgradeRequestProto\"\036\n\034Finali"
    "zeUpgradeResponseProto\"A\n!ListCorruptFil"
    "eBlocksRequestProto\022\014\n\004path\030\001 \002(\t\022\016\n\006coo"
    "kie\030\002 \001(\t\"\\\n\"ListCorruptFileBlocksRespon"
    "seProto\0226\n\007corrupt\030\001 \002(\0132%.Hdfs.Internal"
    ".CorruptFileBlocksProto\"(\n\024MetaSaveReque"
    "stProto\022\020\n\010filename\030\001 \002(\t\"\027\n\025MetaSaveRes"
    "ponseProto\"&\n\027GetFileInfoRequestProto\022\013\n"
    "\003src\030\001 \002(\t\"J\n\030GetFileInfoResponseProto\022."
    "\n\002fs\030\001 \001(\0132\".Hdfs.Internal.HdfsFileStatu"
    "sProto\"\'\n\030IsFileClosedRequestProto\022\013\n\003sr"
    "c\030\001 \002(\t\"+\n\031IsFileClosedResponseProto\022\016\n\006"
    "result\030\001 \002(\010\"\234\001\n\027CacheDirectiveInfoProto"
    "\022\n\n\002id\030\001 \001(\003\022\014\n\004path\030\002 \001(\t\022\023\n\013replicatio"
    "n\030\003 \001(\r\022\014\n\004pool\030\004 \001(\t\022D\n\nexpiration\030\005 \001("
    "\01320.Hdfs.Internal.CacheDirectiveInfoExpi"
    "rationProto\"G\n!CacheDirectiveInfoExpirat"
    "ionProto\022\016\n\006millis\030\001 \002(\003\022\022\n\nisRelative\030\002"
    " \002(\010\"\202\001\n\030CacheDirectiveStatsProto\022\023\n\013byt"
    "esNeeded\030\001 \002(\003\022\023\n\013bytesCached\030\002 \002(\003\022\023\n\013f"
    "ilesNeeded\030\003 \002(\003\022\023\n\013filesCached\030\004 \002(\003\022\022\n"
    "\nhasExpired\030\005 \002(\010\"i\n\035AddCacheDirectiveRe"
    "questProto\0224\n\004info\030\001 \002(\0132&.Hdfs.Internal"
    ".CacheDirectiveInfoProto\022\022\n\ncacheFlags\030\002"
    " \001(\r\",\n\036AddCacheDirectiveResponseProto\022\n"
    "\n\002id\030\001 \002(\003\"l\n ModifyCacheDirectiveReques"
    "tProto\0224\n\004info\030\001 \002(\0132&.Hdfs.Internal.Cac"
    "heDirectiveInfoProto\022\022\n\ncacheFlags\030\002 \001(\r"
    "\"#\n!ModifyCacheDirectiveResponseProto\".\n"
    " RemoveCacheDirectiveRequestProto\022\n\n\002id\030"
    "\001 \002(\003\"#\n!RemoveCacheDirectiveResponsePro"
    "to\"i\n\037ListCacheDirectivesRequestProto\022\016\n"
    "\006prevId\030\001 \002(\003\0226\n\006filter\030\002 \002(\0132&.Hdfs.Int"
    "ernal.CacheDirectiveInfoProto\"\210\001\n\030CacheD"
    "irectiveEntryProto\0224\n\004info\030\001 \002(\0132&.Hdfs."
    "Internal.CacheDirectiveInfoProto\0226\n\005stat"
    "s\030\002 \002(\0132\'.Hdfs.Internal.CacheDirectiveSt"
    "atsProto\"n\n ListCacheDirectivesResponseP"
    "roto\0229\n\010elements\030\001 \003(\0132\'.Hdfs.Internal.C"
    "acheDirectiveEntryProto\022\017\n\007hasMore\030\002 \002(\010"
    "\"\204\001\n\022CachePoolInfoProto\022\020\n\010poolName\030\001 \001("
    "\t\022\021\n\townerName\030\002 \001(\t\022\021\n\tgroupName\030\003 \001(\t\022"
    "\014\n\004mode\030\004 \001(\005\022\r\n\005limit\030\005 \001(\003\022\031\n\021maxRelat"
    "iveExpiry\030\006 \001(\003\"\201\001\n\023CachePoolStatsProto\022"
    "\023\n\013bytesNeeded\030\001 \002(\003\022\023\n\013bytesCached\030\002 \002("
    "\003\022\026\n\016bytesOverlimit\030\003 \002(\003\022\023\n\013filesNeeded"
    "\030\004 \002(\003\022\023\n\013filesCached\030\005 \002(\003\"K\n\030AddCacheP"
    "oolRequestProto\022/\n\004info\030\001 \002(\0132!.Hdfs.Int"
    "ernal.CachePoolInfoProto\"\033\n\031AddCachePool"
    "ResponseProto\"N\n\033ModifyCachePoolRequestP"
    "roto\022/\n\004info\030\001 \002(\0132!.Hdfs.Internal.Cache"
    "PoolInfoProto\"\036\n\034ModifyCachePoolResponse"
    "Proto\"/\n\033RemoveCachePoolRequestProto\022\020\n\010"
    "poolName\030\001 \002(\t\"\036\n\034RemoveCachePoolRespons"
    "eProto\"2\n\032ListCachePoolsRequestProto\022\024\n\014"
    "prevPoolName\030\001 \002(\t\"c\n\033ListCachePoolsResp"
    "onseProto\0223\n\007entries\030\001 \003(\0132\".Hdfs.Intern"
    "al.CachePoolEntryProto\022\017\n\007hasMore\030\002 \002(\010\""
    "y\n\023CachePoolEntryProto\022/\n\004info\030\001 \002(\0132!.H"
    "dfs.Internal.CachePoolInfoProto\0221\n\005stats"
    "\030\002 \002(\0132\".Hdfs.Internal.CachePoolStatsPro"
    "to\"*\n\033GetFileLinkInfoRequestProto\022\013\n\003src"
    "\030\001 \002(\t\"N\n\034GetFileLinkInfoResponseProto\022."
    "\n\002fs\030\001 \001(\0132\".Hdfs.Internal.HdfsFileStatu"
    "sProto\"-\n\035GetContentSummaryRequestProto\022"
    "\014\n\004path\030\001 \002(\t\"U\n\036GetContentSummaryRespon"
    "seProto\0223\n\007summary\030\001 \002(\0132\".Hdfs.Internal"
    ".ContentSummaryProto\"T\n\024SetQuotaRequestP"
    "roto\022\014\n\004path\030\001 \002(\t\022\026\n\016namespaceQuota\030\002 \002"
    "(\004\022\026\n\016diskspaceQuota\030\003 \002(\004\"\027\n\025SetQuotaRe"
    "sponseProto\"M\n\021FsyncRequestProto\022\013\n\003src\030"
    "\001 \002(\t\022\016\n\006client\030\002 \002(\t\022\033\n\017lastBlockLength"
    "\030\003 \001(\022:\002-1\"\024\n\022FsyncResponseProto\"A\n\024SetT"
    "imesRequestProto\022\013\n\003src\030\001 \002(\t\022\r\n\005mtime\030\002"
    " \002(\004\022\r\n\005atime\030\003 \002(\004\"\027\n\025SetTimesResponseP"
    "roto\"\202\001\n\031CreateSymlinkRequestProto\022\016\n\006ta"
    "rget\030\001 \002(\t\022\014\n\004link\030\002 \002(\t\0221\n\007dirPerm\030\003 \002("
    "\0132 .Hdfs.Internal.FsPermissionProto\022\024\n\014c"
    "reateParent\030\004 \002(\010\"\034\n\032CreateSymlinkRespon"
    "seProto\")\n\031GetLinkTargetRequestProto\022\014\n\004"
    "path\030\001 \002(\t\"0\n\032GetLinkTargetResponseProto"
    "\022\022\n\ntargetPath\030\001 \001(\t\"j\n\"UpdateBlockForPi"
    "pelineRequestProto\0220\n\005block\030\001 \002(\0132!.Hdfs"
    ".Internal.ExtendedBlockProto\022\022\n\nclientNa"
    "me\030\002 \002(\t\"V\n#UpdateBlockForPipelineRespon"
    "seProto\022/\n\005block\030\001 \002(\0132 .Hdfs.Internal.L"
    "ocatedBlockProto\"\340\001\n\032UpdatePipelineReque"
    "stProto\022\022\n\nclientName\030\001 \002(\t\0223\n\010oldBlock\030"
    "\002 \002(\0132!.Hdfs.Internal.ExtendedBlockProto"
    "\0223\n\010newBlock\030\003 \002(\0132!.Hdfs.Internal.Exten"
    "dedBlockProto\0220\n\010newNodes\030\004 \003(\0132\036.Hdfs.I"
    "nternal.DatanodeIDProto\022\022\n\nstorageIDs\030\005 "
    "\003(\t\"\035\n\033UpdatePipelineResponseProto\"5\n Se"
    "tBalancerBandwidthRequestProto\022\021\n\tbandwi"
    "dth\030\001 \002(\003\"#\n!SetBalancerBandwidthRespons"
    "eProto\"\"\n GetDataEncryptionKeyRequestPro"
    "to\"e\n!GetDataEncryptionKeyResponseProto\022"
    "@\n\021dataEncryptionKey\030\001 \001(\0132%.Hdfs.Intern"
    "al.DataEncryptionKeyProto\"H\n\032CreateSnaps"
    "hotRequestProto\022\024\n\014snapshotRoot\030\001 \002(\t\022\024\n"
    "\014snapshotName\030\002 \001(\t\"3\n\033CreateSnapshotRes"
    "ponseProto\022\024\n\014snapshotPath\030\001 \002(\t\"d\n\032Rena"
    "meSnapshotRequestProto\022\024\n\014snapshotRoot\030\001"
    " \002(\t\022\027\n\017snapshotOldName\030\002 \002(\t\022\027\n\017snapsho"
    "tNewName\030\003 \002(\t\"\035\n\033RenameSnapshotResponse"
    "Proto\"1\n\031AllowSnapshotRequestProto\022\024\n\014sn"
    "apshotRoot\030\001 \002(\t\"\034\n\032AllowSnapshotRespons"
    "eProto\"4\n\034DisallowSnapshotRequestProto\022\024"
    "\n\014snapshotRoot\030\001 \002(\t\"\037\n\035DisallowSnapshot"
    "ResponseProto\"H\n\032DeleteSnapshotRequestPr"
    "oto\022\024\n\014snapshotRoot\030\001 \002(\t\022\024\n\014snapshotNam"
    "e\030\002 \002(\t\"\035\n\033DeleteSnapshotResponseProto*8"
    "\n\017CreateFlagProto\022\n\n\006CREATE\020\001\022\r\n\tOVERWRI"
    "TE\020\002\022\n\n\006APPEND\020\004*6\n\027DatanodeReportTypePr"
    "oto\022\007\n\003ALL\020\001\022\010\n\004LIVE\020\002\022\010\n\004DEAD\020\003*O\n\023Safe"
    "ModeActionProto\022\022\n\016SAFEMODE_LEAVE\020\001\022\022\n\016S"
    "AFEMODE_ENTER\020\002\022\020\n\014SAFEMODE_GET\020\003*\033\n\016Cac"
    "heFlagProto\022\t\n\005FORCE\020\0012\3037\n\026ClientNamenod"
    "eProtocol\022p\n\021getBlockLocations\022,.Hdfs.In"
    "ternal.GetBlockLocationsRequestProto\032-.H"
    "dfs.Internal.GetBlockLocationsResponsePr"
    "oto\022p\n\021getServerDefaults\022,.Hdfs.Internal"
    ".GetServerDefaultsRequestProto\032-.Hdfs.In"
    "ternal.GetServerDefaultsResponseProto\022O\n"
    "\006create\022!.Hdfs.Internal.CreateRequestPro"
    "to\032\".Hdfs.Internal.CreateResponseProto\022O"
    "\n\006append\022!.Hdfs.Internal.AppendRequestPr"
    "oto\032\".Hdfs.Internal.AppendResponseProto\022"
    "g\n\016setReplication\022).Hdfs.Internal.SetRep"
    "licationRequestProto\032*.Hdfs.Internal.Set"
    "ReplicationResponseProto\022d\n\rsetPermissio"
    "n\022(.Hdfs.Internal.SetPermissionRequestPr"
    "oto\032).Hdfs.Internal.SetPermissionRespons"
    "eProto\022U\n\010setOwner\022#.Hdfs.Internal.SetOw"
    "nerRequestProto\032$.Hdfs.Internal.SetOwner"
    "ResponseProto\022a\n\014abandonBlock\022\'.Hdfs.Int"
    "ernal.AbandonBlockRequestProto\032(.Hdfs.In"
    "ternal.AbandonBlockResponseProto\022U\n\010addB"
    "lock\022#.Hdfs.Internal.AddBlockRequestProt"
    "o\032$.Hdfs.Internal.AddBlockResponseProto\022"
    "|\n\025getAdditionalDatanode\0220.Hdfs.Internal"
    ".GetAdditionalDatanodeRequestProto\0321.Hdf"
    "s.Internal.GetAdditionalDatanodeResponse"
    "Proto\022U\n\010complete\022#.Hdfs.Internal.Comple"
    "teRequestProto\032$.Hdfs.Internal.CompleteR"
    "esponseProto\022j\n\017reportBadBlocks\022*.Hdfs.I"
    "nternal.ReportBadBlocksRequestProto\032+.Hd"
    "fs.Internal.ReportBadBlocksResponseProto"
    "\022O\n\006concat\022!.Hdfs.Internal.ConcatRequest"
    "Proto\032\".Hdfs.Internal.ConcatResponseProt"
    "o\022U\n\010truncate\022#.Hdfs.Internal.TruncateRe"
    "questProto\032$.Hdfs.Internal.TruncateRespo"
    "nseProto\022U\n\010getLease\022#.Hdfs.Internal.Get"
    "LeaseRequestProto\032$.Hdfs.Internal.GetLea"
    "seResponseProto\022a\n\014releaseLease\022\'.Hdfs.I"
    "nternal.ReleaseLeaseRequestProto\032(.Hdfs."
    "Internal.ReleaseLeaseResponseProto\022O\n\006re"
    "name\022!.Hdfs.Internal.RenameRequestProto\032"
    "\".Hdfs.Internal.RenameResponseProto\022R\n\007r"
    "ename2\022\".Hdfs.Internal.Rename2RequestPro"
    "to\032#.Hdfs.Internal.Rename2ResponseProto\022"
    "S\n\ndeleteFile\022!.Hdfs.Internal.DeleteRequ"
    "estProto\032\".Hdfs.Internal.DeleteResponseP"
    "roto\022O\n\006mkdirs\022!.Hdfs.Internal.MkdirsReq"
    "uestProto\032\".Hdfs.Internal.MkdirsResponse"
    "Proto\022[\n\ngetListing\022%.Hdfs.Internal.GetL"
    "istingRequestProto\032&.Hdfs.Internal.GetLi"
    "stingResponseProto\022[\n\nrenewLease\022%.Hdfs."
    "Internal.RenewLeaseRequestProto\032&.Hdfs.I"
    "nternal.RenewLeaseResponseProto\022a\n\014recov"
    "erLease\022\'.Hdfs.Internal.RecoverLeaseRequ"
    "estProto\032(.Hdfs.Internal.RecoverLeaseRes"
    "ponseProto\022\\\n\ngetFsStats\022&.Hdfs.Internal"
    ".GetFsStatusRequestProto\032&.Hdfs.Internal"
    ".GetFsStatsResponseProto\022p\n\021getDatanodeR"
    "eport\022,.Hdfs.Internal.GetDatanodeReportR"
    "equestProto\032-.Hdfs.Internal.GetDatanodeR"
    "eportResponseProto\022|\n\025getPreferredBlockS"
    "ize\0220.Hdfs.Internal.GetPreferredBlockSiz"
    "eRequestProto\0321.Hdfs.Internal.GetPreferr"
    "edBlockSizeResponseProto\022^\n\013setSafeMode\022"
    "&.Hdfs.Internal.SetSafeModeRequestProto\032"
    "\'.Hdfs.Internal.SetSafeModeResponseProto"
    "\022d\n\rsaveNamespace\022(.Hdfs.Internal.SaveNa"
    "mespaceRequestProto\032).Hdfs.Internal.Save"
    "NamespaceResponseProto\022X\n\trollEdits\022$.Hd"
    "fs.Internal.RollEditsRequestProto\032%.Hdfs"
    ".Internal.RollEditsResponseProto\022y\n\024rest"
    "oreFailedStorage\022/.Hdfs.Internal.Restore"
    "FailedStorageRequestProto\0320.Hdfs.Interna"
    "l.RestoreFailedStorageResponseProto\022a\n\014r"
    "efreshNodes\022\'.Hdfs.Internal.RefreshNodes"
    "RequestProto\032(.Hdfs.Internal.RefreshNode"
    "sResponseProto\022j\n\017finalizeUpgrade\022*.Hdfs"
    ".Internal.FinalizeUpgradeRequestProto\032+."
    "Hdfs.Internal.FinalizeUpgradeResponsePro"
    "to\022|\n\025listCorruptFileBlocks\0220.Hdfs.Inter"
    "nal.ListCorruptFileBlocksRequestProto\0321."
    "Hdfs.Internal.ListCorruptFileBlocksRespo"
    "nseProto\022U\n\010metaSave\022#.Hdfs.Internal.Met"
    "aSaveRequestProto\032$.Hdfs.Internal.MetaSa"
    "veResponseProto\022^\n\013getFileInfo\022&.Hdfs.In"
    "ternal.GetFileInfoRequestProto\032\'.Hdfs.In"
    "ternal.GetFileInfoResponseProto\022p\n\021addCa"
    "cheDirective\022,.Hdfs.Internal.AddCacheDir"
    "ectiveRequestProto\032-.Hdfs.Internal.AddCa"
    "cheDirectiveResponseProto\022y\n\024modifyCache"
    "Directive\022/.Hdfs.Internal.ModifyCacheDir"
    "ectiveRequestProto\0320.Hdfs.Internal.Modif"
    "yCacheDirectiveResponseProto\022y\n\024removeCa"
    "cheDirective\022/.Hdfs.Internal.RemoveCache"
    "DirectiveRequestProto\0320.Hdfs.Internal.Re"
    "moveCacheDirectiveResponseProto\022v\n\023listC"
    "acheDirectives\022..Hdfs.Internal.ListCache"
    "DirectivesRequestProto\032/.Hdfs.Internal.L"
    "istCacheDirectivesResponseProto\022a\n\014addCa"
    "chePool\022\'.Hdfs.Internal.AddCachePoolRequ"
    "estProto\032(.Hdfs.Internal.AddCachePoolRes"
    "ponseProto\022j\n\017modifyCachePool\022*.Hdfs.Int"
    "ernal.ModifyCachePoolRequestProto\032+.Hdfs"
    ".Internal.ModifyCachePoolResponseProto\022j"
    "\n\017removeCachePool\022*.Hdfs.Internal.Remove"
    "CachePoolRequestProto\032+.Hdfs.Internal.Re"
    "moveCachePoolResponseProto\022g\n\016listCacheP"
    "ools\022).Hdfs.Internal.ListCachePoolsReque"
    "stProto\032*.Hdfs.Internal.ListCachePoolsRe"
    "sponseProto\022j\n\017getFileLinkInfo\022*.Hdfs.In"
    "ternal.GetFileLinkInfoRequestProto\032+.Hdf"
    "s.Internal.GetFileLinkInfoResponseProto\022"
    "p\n\021getContentSummary\022,.Hdfs.Internal.Get"
    "ContentSummaryRequestProto\032-.Hdfs.Intern"
    "al.GetContentSummaryResponseProto\022U\n\010set"
    "Quota\022#.Hdfs.Internal.SetQuotaRequestPro"
    "to\032$.Hdfs.Internal.SetQuotaResponseProto"
    "\022L\n\005fsync\022 .Hdfs.Internal.FsyncRequestPr"
    "oto\032!.Hdfs.Internal.FsyncResponseProto\022U"
    "\n\010setTimes\022#.Hdfs.Internal.SetTimesReque"
    "stProto\032$.Hdfs.Internal.SetTimesResponse"
    "Proto\022d\n\rcreateSymlink\022(.Hdfs.Internal.C"
    "reateSymlinkRequestProto\032).Hdfs.Internal"
    ".CreateSymlinkResponseProto\022d\n\rgetLinkTa"
    "rget\022(.Hdfs.Internal.GetLinkTargetReques"
    "tProto\032).Hdfs.Internal.GetLinkTargetResp"
    "onseProto\022\177\n\026updateBlockForPipeline\0221.Hd"
    "fs.Internal.UpdateBlockForPipelineReques"
    "tProto\0322.Hdfs.Internal.UpdateBlockForPip"
    "elineResponseProto\022g\n\016updatePipeline\022).H"
    "dfs.Internal.UpdatePipelineRequestProto\032"
    "*.Hdfs.Internal.UpdatePipelineResponsePr"
    "oto\022s\n\022getDelegationToken\022-.Hdfs.Interna"
    "l.GetDelegationTokenRequestProto\032..Hdfs."
    "Internal.GetDelegationTokenResponseProto"
    "\022y\n\024renewDelegationToken\022/.Hdfs.Internal"
    ".RenewDelegationTokenRequestProto\0320.Hdfs"
    ".Internal.RenewDelegationTokenResponsePr"
    "oto\022|\n\025cancelDelegationToken\0220.Hdfs.Inte"
    "rnal.CancelDelegationTokenRequestProto\0321"
    ".Hdfs.Internal.CancelDelegationTokenResp"
    "onseProto\022y\n\024setBalancerBandwidth\022/.Hdfs"
    ".Internal.SetBalancerBandwidthRequestPro"
    "to\0320.Hdfs.Internal.SetBalancerBandwidthR"
    "esponseProto\022y\n\024getDataEncryptionKey\022/.H"
    "dfs.Internal.GetDataEncryptionKeyRequest"
    "Proto\0320.Hdfs.Internal.GetDataEncryptionK"
    "eyResponseProto\022g\n\016createSnapshot\022).Hdfs"
    ".Internal.CreateSnapshotRequestProto\032*.H"
    "dfs.Internal.CreateSnapshotResponseProto"
    "\022g\n\016renameSnapshot\022).Hdfs.Internal.Renam"
    "eSnapshotRequestProto\032*.Hdfs.Internal.Re"
    "nameSnapshotResponseProto\022d\n\rallowSnapsh"
    "ot\022(.Hdfs.Internal.AllowSnapshotRequestP"
    "roto\032).Hdfs.Internal.AllowSnapshotRespon"
    "seProto\022m\n\020disallowSnapshot\022+.Hdfs.Inter"
    "nal.DisallowSnapshotRequestProto\032,.Hdfs."
    "Internal.DisallowSnapshotResponseProto\022\213"
    "\001\n\032getSnapshottableDirListing\0225.Hdfs.Int"
    "ernal.GetSnapshottableDirListingRequestP"
    "roto\0326.Hdfs.Internal.GetSnapshottableDir"
    "ListingResponseProto\022g\n\016deleteSnapshot\022)"
    ".Hdfs.Internal.DeleteSnapshotRequestProt"
    "o\032*.Hdfs.Internal.DeleteSnapshotResponse"
    "Proto\022|\n\025getSnapshotDiffReport\0220.Hdfs.In"
    "ternal.GetSnapshotDiffReportRequestProto"
    "\0321.Hdfs.Internal.GetSnapshotDiffReportRe"
    "sponseProto\022a\n\014isFileClosed\022\'.Hdfs.Inter"
    "nal.IsFileClosedRequestProto\032(.Hdfs.Inte"
    "rnal.IsFileClosedResponseProto\022y\n\024create"
    "EncryptionZone\022/.Hdfs.Internal.CreateEnc"
    "ryptionZoneRequestProto\0320.Hdfs.Internal."
    "CreateEncryptionZoneResponseProto\022v\n\023lis"
    "tEncryptionZones\022..Hdfs.Internal.ListEnc"
    "ryptionZonesRequestProto\032/.Hdfs.Internal"
    ".ListEncryptionZonesResponseProto\022a\n\014get"
    "EZForPath\022\'.Hdfs.Internal.GetEZForPathRe"
    "questProto\032(.Hdfs.Internal.GetEZForPathR"
    "esponseProtoBN\n%org.apache.hadoop.hdfs.p"
    "rotocol.protoB\034ClientNamenodeProtocolPro"
    "tos\200\001\001\210\001\001\240\001\001", 16572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientNamenodeProtocol.proto", &protobuf_RegisterTypes);
  GetBlockLocationsRequestProto::default_instance_ = new GetBlockLocationsRequestProto();
  GetBlockLocationsResponseProto::default_instance_ = new GetBlockLocationsResponseProto();
  GetServerDefaultsRequestProto::default_instance_ = new GetServerDefaultsRequestProto();
  GetServerDefaultsResponseProto::default_instance_ = new GetServerDefaultsResponseProto();
  CreateRequestProto::default_instance_ = new CreateRequestProto();
  CreateResponseProto::default_instance_ = new CreateResponseProto();
  AppendRequestProto::default_instance_ = new AppendRequestProto();
  AppendResponseProto::default_instance_ = new AppendResponseProto();
  SetReplicationRequestProto::default_instance_ = new SetReplicationRequestProto();
  SetReplicationResponseProto::default_instance_ = new SetReplicationResponseProto();
  SetPermissionRequestProto::default_instance_ = new SetPermissionRequestProto();
  SetPermissionResponseProto::default_instance_ = new SetPermissionResponseProto();
  SetOwnerRequestProto::default_instance_ = new SetOwnerRequestProto();
  SetOwnerResponseProto::default_instance_ = new SetOwnerResponseProto();
  AbandonBlockRequestProto::default_instance_ = new AbandonBlockRequestProto();
  AbandonBlockResponseProto::default_instance_ = new AbandonBlockResponseProto();
  AddBlockRequestProto::default_instance_ = new AddBlockRequestProto();
  AddBlockResponseProto::default_instance_ = new AddBlockResponseProto();
  GetAdditionalDatanodeRequestProto::default_instance_ = new GetAdditionalDatanodeRequestProto();
  GetAdditionalDatanodeResponseProto::default_instance_ = new GetAdditionalDatanodeResponseProto();
  CompleteRequestProto::default_instance_ = new CompleteRequestProto();
  CompleteResponseProto::default_instance_ = new CompleteResponseProto();
  ReportBadBlocksRequestProto::default_instance_ = new ReportBadBlocksRequestProto();
  ReportBadBlocksResponseProto::default_instance_ = new ReportBadBlocksResponseProto();
  ConcatRequestProto::default_instance_ = new ConcatRequestProto();
  ConcatResponseProto::default_instance_ = new ConcatResponseProto();
  TruncateRequestProto::default_instance_ = new TruncateRequestProto();
  TruncateResponseProto::default_instance_ = new TruncateResponseProto();
  GetLeaseRequestProto::default_instance_ = new GetLeaseRequestProto();
  GetLeaseResponseProto::default_instance_ = new GetLeaseResponseProto();
  ReleaseLeaseRequestProto::default_instance_ = new ReleaseLeaseRequestProto();
  ReleaseLeaseResponseProto::default_instance_ = new ReleaseLeaseResponseProto();
  RenameRequestProto::default_instance_ = new RenameRequestProto();
  RenameResponseProto::default_instance_ = new RenameResponseProto();
  Rename2RequestProto::default_instance_ = new Rename2RequestProto();
  Rename2ResponseProto::default_instance_ = new Rename2ResponseProto();
  DeleteRequestProto::default_instance_ = new DeleteRequestProto();
  DeleteResponseProto::default_instance_ = new DeleteResponseProto();
  MkdirsRequestProto::default_instance_ = new MkdirsRequestProto();
  MkdirsResponseProto::default_instance_ = new MkdirsResponseProto();
  GetListingRequestProto::default_instance_ = new GetListingRequestProto();
  GetListingResponseProto::default_instance_ = new GetListingResponseProto();
  GetSnapshottableDirListingRequestProto::default_instance_ = new GetSnapshottableDirListingRequestProto();
  GetSnapshottableDirListingResponseProto::default_instance_ = new GetSnapshottableDirListingResponseProto();
  GetSnapshotDiffReportRequestProto::default_instance_ = new GetSnapshotDiffReportRequestProto();
  GetSnapshotDiffReportResponseProto::default_instance_ = new GetSnapshotDiffReportResponseProto();
  RenewLeaseRequestProto::default_instance_ = new RenewLeaseRequestProto();
  RenewLeaseResponseProto::default_instance_ = new RenewLeaseResponseProto();
  RecoverLeaseRequestProto::default_instance_ = new RecoverLeaseRequestProto();
  RecoverLeaseResponseProto::default_instance_ = new RecoverLeaseResponseProto();
  GetFsStatusRequestProto::default_instance_ = new GetFsStatusRequestProto();
  GetFsStatsResponseProto::default_instance_ = new GetFsStatsResponseProto();
  GetDatanodeReportRequestProto::default_instance_ = new GetDatanodeReportRequestProto();
  GetDatanodeReportResponseProto::default_instance_ = new GetDatanodeReportResponseProto();
  GetPreferredBlockSizeRequestProto::default_instance_ = new GetPreferredBlockSizeRequestProto();
  GetPreferredBlockSizeResponseProto::default_instance_ = new GetPreferredBlockSizeResponseProto();
  SetSafeModeRequestProto::default_instance_ = new SetSafeModeRequestProto();
  SetSafeModeResponseProto::default_instance_ = new SetSafeModeResponseProto();
  SaveNamespaceRequestProto::default_instance_ = new SaveNamespaceRequestProto();
  SaveNamespaceResponseProto::default_instance_ = new SaveNamespaceResponseProto();
  RollEditsRequestProto::default_instance_ = new RollEditsRequestProto();
  RollEditsResponseProto::default_instance_ = new RollEditsResponseProto();
  RestoreFailedStorageRequestProto::default_instance_ = new RestoreFailedStorageRequestProto();
  RestoreFailedStorageResponseProto::default_instance_ = new RestoreFailedStorageResponseProto();
  RefreshNodesRequestProto::default_instance_ = new RefreshNodesRequestProto();
  RefreshNodesResponseProto::default_instance_ = new RefreshNodesResponseProto();
  FinalizeUpgradeRequestProto::default_instance_ = new FinalizeUpgradeRequestProto();
  FinalizeUpgradeResponseProto::default_instance_ = new FinalizeUpgradeResponseProto();
  ListCorruptFileBlocksRequestProto::default_instance_ = new ListCorruptFileBlocksRequestProto();
  ListCorruptFileBlocksResponseProto::default_instance_ = new ListCorruptFileBlocksResponseProto();
  MetaSaveRequestProto::default_instance_ = new MetaSaveRequestProto();
  MetaSaveResponseProto::default_instance_ = new MetaSaveResponseProto();
  GetFileInfoRequestProto::default_instance_ = new GetFileInfoRequestProto();
  GetFileInfoResponseProto::default_instance_ = new GetFileInfoResponseProto();
  IsFileClosedRequestProto::default_instance_ = new IsFileClosedRequestProto();
  IsFileClosedResponseProto::default_instance_ = new IsFileClosedResponseProto();
  CacheDirectiveInfoProto::default_instance_ = new CacheDirectiveInfoProto();
  CacheDirectiveInfoExpirationProto::default_instance_ = new CacheDirectiveInfoExpirationProto();
  CacheDirectiveStatsProto::default_instance_ = new CacheDirectiveStatsProto();
  AddCacheDirectiveRequestProto::default_instance_ = new AddCacheDirectiveRequestProto();
  AddCacheDirectiveResponseProto::default_instance_ = new AddCacheDirectiveResponseProto();
  ModifyCacheDirectiveRequestProto::default_instance_ = new ModifyCacheDirectiveRequestProto();
  ModifyCacheDirectiveResponseProto::default_instance_ = new ModifyCacheDirectiveResponseProto();
  RemoveCacheDirectiveRequestProto::default_instance_ = new RemoveCacheDirectiveRequestProto();
  RemoveCacheDirectiveResponseProto::default_instance_ = new RemoveCacheDirectiveResponseProto();
  ListCacheDirectivesRequestProto::default_instance_ = new ListCacheDirectivesRequestProto();
  CacheDirectiveEntryProto::default_instance_ = new CacheDirectiveEntryProto();
  ListCacheDirectivesResponseProto::default_instance_ = new ListCacheDirectivesResponseProto();
  CachePoolInfoProto::default_instance_ = new CachePoolInfoProto();
  CachePoolStatsProto::default_instance_ = new CachePoolStatsProto();
  AddCachePoolRequestProto::default_instance_ = new AddCachePoolRequestProto();
  AddCachePoolResponseProto::default_instance_ = new AddCachePoolResponseProto();
  ModifyCachePoolRequestProto::default_instance_ = new ModifyCachePoolRequestProto();
  ModifyCachePoolResponseProto::default_instance_ = new ModifyCachePoolResponseProto();
  RemoveCachePoolRequestProto::default_instance_ = new RemoveCachePoolRequestProto();
  RemoveCachePoolResponseProto::default_instance_ = new RemoveCachePoolResponseProto();
  ListCachePoolsRequestProto::default_instance_ = new ListCachePoolsRequestProto();
  ListCachePoolsResponseProto::default_instance_ = new ListCachePoolsResponseProto();
  CachePoolEntryProto::default_instance_ = new CachePoolEntryProto();
  GetFileLinkInfoRequestProto::default_instance_ = new GetFileLinkInfoRequestProto();
  GetFileLinkInfoResponseProto::default_instance_ = new GetFileLinkInfoResponseProto();
  GetContentSummaryRequestProto::default_instance_ = new GetContentSummaryRequestProto();
  GetContentSummaryResponseProto::default_instance_ = new GetContentSummaryResponseProto();
  SetQuotaRequestProto::default_instance_ = new SetQuotaRequestProto();
  SetQuotaResponseProto::default_instance_ = new SetQuotaResponseProto();
  FsyncRequestProto::default_instance_ = new FsyncRequestProto();
  FsyncResponseProto::default_instance_ = new FsyncResponseProto();
  SetTimesRequestProto::default_instance_ = new SetTimesRequestProto();
  SetTimesResponseProto::default_instance_ = new SetTimesResponseProto();
  CreateSymlinkRequestProto::default_instance_ = new CreateSymlinkRequestProto();
  CreateSymlinkResponseProto::default_instance_ = new CreateSymlinkResponseProto();
  GetLinkTargetRequestProto::default_instance_ = new GetLinkTargetRequestProto();
  GetLinkTargetResponseProto::default_instance_ = new GetLinkTargetResponseProto();
  UpdateBlockForPipelineRequestProto::default_instance_ = new UpdateBlockForPipelineRequestProto();
  UpdateBlockForPipelineResponseProto::default_instance_ = new UpdateBlockForPipelineResponseProto();
  UpdatePipelineRequestProto::default_instance_ = new UpdatePipelineRequestProto();
  UpdatePipelineResponseProto::default_instance_ = new UpdatePipelineResponseProto();
  SetBalancerBandwidthRequestProto::default_instance_ = new SetBalancerBandwidthRequestProto();
  SetBalancerBandwidthResponseProto::default_instance_ = new SetBalancerBandwidthResponseProto();
  GetDataEncryptionKeyRequestProto::default_instance_ = new GetDataEncryptionKeyRequestProto();
  GetDataEncryptionKeyResponseProto::default_instance_ = new GetDataEncryptionKeyResponseProto();
  CreateSnapshotRequestProto::default_instance_ = new CreateSnapshotRequestProto();
  CreateSnapshotResponseProto::default_instance_ = new CreateSnapshotResponseProto();
  RenameSnapshotRequestProto::default_instance_ = new RenameSnapshotRequestProto();
  RenameSnapshotResponseProto::default_instance_ = new RenameSnapshotResponseProto();
  AllowSnapshotRequestProto::default_instance_ = new AllowSnapshotRequestProto();
  AllowSnapshotResponseProto::default_instance_ = new AllowSnapshotResponseProto();
  DisallowSnapshotRequestProto::default_instance_ = new DisallowSnapshotRequestProto();
  DisallowSnapshotResponseProto::default_instance_ = new DisallowSnapshotResponseProto();
  DeleteSnapshotRequestProto::default_instance_ = new DeleteSnapshotRequestProto();
  DeleteSnapshotResponseProto::default_instance_ = new DeleteSnapshotResponseProto();
  GetBlockLocationsRequestProto::default_instance_->InitAsDefaultInstance();
  GetBlockLocationsResponseProto::default_instance_->InitAsDefaultInstance();
  GetServerDefaultsRequestProto::default_instance_->InitAsDefaultInstance();
  GetServerDefaultsResponseProto::default_instance_->InitAsDefaultInstance();
  CreateRequestProto::default_instance_->InitAsDefaultInstance();
  CreateResponseProto::default_instance_->InitAsDefaultInstance();
  AppendRequestProto::default_instance_->InitAsDefaultInstance();
  AppendResponseProto::default_instance_->InitAsDefaultInstance();
  SetReplicationRequestProto::default_instance_->InitAsDefaultInstance();
  SetReplicationResponseProto::default_instance_->InitAsDefaultInstance();
  SetPermissionRequestProto::default_instance_->InitAsDefaultInstance();
  SetPermissionResponseProto::default_instance_->InitAsDefaultInstance();
  SetOwnerRequestProto::default_instance_->InitAsDefaultInstance();
  SetOwnerResponseProto::default_instance_->InitAsDefaultInstance();
  AbandonBlockRequestProto::default_instance_->InitAsDefaultInstance();
  AbandonBlockResponseProto::default_instance_->InitAsDefaultInstance();
  AddBlockRequestProto::default_instance_->InitAsDefaultInstance();
  AddBlockResponseProto::default_instance_->InitAsDefaultInstance();
  GetAdditionalDatanodeRequestProto::default_instance_->InitAsDefaultInstance();
  GetAdditionalDatanodeResponseProto::default_instance_->InitAsDefaultInstance();
  CompleteRequestProto::default_instance_->InitAsDefaultInstance();
  CompleteResponseProto::default_instance_->InitAsDefaultInstance();
  ReportBadBlocksRequestProto::default_instance_->InitAsDefaultInstance();
  ReportBadBlocksResponseProto::default_instance_->InitAsDefaultInstance();
  ConcatRequestProto::default_instance_->InitAsDefaultInstance();
  ConcatResponseProto::default_instance_->InitAsDefaultInstance();
  TruncateRequestProto::default_instance_->InitAsDefaultInstance();
  TruncateResponseProto::default_instance_->InitAsDefaultInstance();
  GetLeaseRequestProto::default_instance_->InitAsDefaultInstance();
  GetLeaseResponseProto::default_instance_->InitAsDefaultInstance();
  ReleaseLeaseRequestProto::default_instance_->InitAsDefaultInstance();
  ReleaseLeaseResponseProto::default_instance_->InitAsDefaultInstance();
  RenameRequestProto::default_instance_->InitAsDefaultInstance();
  RenameResponseProto::default_instance_->InitAsDefaultInstance();
  Rename2RequestProto::default_instance_->InitAsDefaultInstance();
  Rename2ResponseProto::default_instance_->InitAsDefaultInstance();
  DeleteRequestProto::default_instance_->InitAsDefaultInstance();
  DeleteResponseProto::default_instance_->InitAsDefaultInstance();
  MkdirsRequestProto::default_instance_->InitAsDefaultInstance();
  MkdirsResponseProto::default_instance_->InitAsDefaultInstance();
  GetListingRequestProto::default_instance_->InitAsDefaultInstance();
  GetListingResponseProto::default_instance_->InitAsDefaultInstance();
  GetSnapshottableDirListingRequestProto::default_instance_->InitAsDefaultInstance();
  GetSnapshottableDirListingResponseProto::default_instance_->InitAsDefaultInstance();
  GetSnapshotDiffReportRequestProto::default_instance_->InitAsDefaultInstance();
  GetSnapshotDiffReportResponseProto::default_instance_->InitAsDefaultInstance();
  RenewLeaseRequestProto::default_instance_->InitAsDefaultInstance();
  RenewLeaseResponseProto::default_instance_->InitAsDefaultInstance();
  RecoverLeaseRequestProto::default_instance_->InitAsDefaultInstance();
  RecoverLeaseResponseProto::default_instance_->InitAsDefaultInstance();
  GetFsStatusRequestProto::default_instance_->InitAsDefaultInstance();
  GetFsStatsResponseProto::default_instance_->InitAsDefaultInstance();
  GetDatanodeReportRequestProto::default_instance_->InitAsDefaultInstance();
  GetDatanodeReportResponseProto::default_instance_->InitAsDefaultInstance();
  GetPreferredBlockSizeRequestProto::default_instance_->InitAsDefaultInstance();
  GetPreferredBlockSizeResponseProto::default_instance_->InitAsDefaultInstance();
  SetSafeModeRequestProto::default_instance_->InitAsDefaultInstance();
  SetSafeModeResponseProto::default_instance_->InitAsDefaultInstance();
  SaveNamespaceRequestProto::default_instance_->InitAsDefaultInstance();
  SaveNamespaceResponseProto::default_instance_->InitAsDefaultInstance();
  RollEditsRequestProto::default_instance_->InitAsDefaultInstance();
  RollEditsResponseProto::default_instance_->InitAsDefaultInstance();
  RestoreFailedStorageRequestProto::default_instance_->InitAsDefaultInstance();
  RestoreFailedStorageResponseProto::default_instance_->InitAsDefaultInstance();
  RefreshNodesRequestProto::default_instance_->InitAsDefaultInstance();
  RefreshNodesResponseProto::default_instance_->InitAsDefaultInstance();
  FinalizeUpgradeRequestProto::default_instance_->InitAsDefaultInstance();
  FinalizeUpgradeResponseProto::default_instance_->InitAsDefaultInstance();
  ListCorruptFileBlocksRequestProto::default_instance_->InitAsDefaultInstance();
  ListCorruptFileBlocksResponseProto::default_instance_->InitAsDefaultInstance();
  MetaSaveRequestProto::default_instance_->InitAsDefaultInstance();
  MetaSaveResponseProto::default_instance_->InitAsDefaultInstance();
  GetFileInfoRequestProto::default_instance_->InitAsDefaultInstance();
  GetFileInfoResponseProto::default_instance_->InitAsDefaultInstance();
  IsFileClosedRequestProto::default_instance_->InitAsDefaultInstance();
  IsFileClosedResponseProto::default_instance_->InitAsDefaultInstance();
  CacheDirectiveInfoProto::default_instance_->InitAsDefaultInstance();
  CacheDirectiveInfoExpirationProto::default_instance_->InitAsDefaultInstance();
  CacheDirectiveStatsProto::default_instance_->InitAsDefaultInstance();
  AddCacheDirectiveRequestProto::default_instance_->InitAsDefaultInstance();
  AddCacheDirectiveResponseProto::default_instance_->InitAsDefaultInstance();
  ModifyCacheDirectiveRequestProto::default_instance_->InitAsDefaultInstance();
  ModifyCacheDirectiveResponseProto::default_instance_->InitAsDefaultInstance();
  RemoveCacheDirectiveRequestProto::default_instance_->InitAsDefaultInstance();
  RemoveCacheDirectiveResponseProto::default_instance_->InitAsDefaultInstance();
  ListCacheDirectivesRequestProto::default_instance_->InitAsDefaultInstance();
  CacheDirectiveEntryProto::default_instance_->InitAsDefaultInstance();
  ListCacheDirectivesResponseProto::default_instance_->InitAsDefaultInstance();
  CachePoolInfoProto::default_instance_->InitAsDefaultInstance();
  CachePoolStatsProto::default_instance_->InitAsDefaultInstance();
  AddCachePoolRequestProto::default_instance_->InitAsDefaultInstance();
  AddCachePoolResponseProto::default_instance_->InitAsDefaultInstance();
  ModifyCachePoolRequestProto::default_instance_->InitAsDefaultInstance();
  ModifyCachePoolResponseProto::default_instance_->InitAsDefaultInstance();
  RemoveCachePoolRequestProto::default_instance_->InitAsDefaultInstance();
  RemoveCachePoolResponseProto::default_instance_->InitAsDefaultInstance();
  ListCachePoolsRequestProto::default_instance_->InitAsDefaultInstance();
  ListCachePoolsResponseProto::default_instance_->InitAsDefaultInstance();
  CachePoolEntryProto::default_instance_->InitAsDefaultInstance();
  GetFileLinkInfoRequestProto::default_instance_->InitAsDefaultInstance();
  GetFileLinkInfoResponseProto::default_instance_->InitAsDefaultInstance();
  GetContentSummaryRequestProto::default_instance_->InitAsDefaultInstance();
  GetContentSummaryResponseProto::default_instance_->InitAsDefaultInstance();
  SetQuotaRequestProto::default_instance_->InitAsDefaultInstance();
  SetQuotaResponseProto::default_instance_->InitAsDefaultInstance();
  FsyncRequestProto::default_instance_->InitAsDefaultInstance();
  FsyncResponseProto::default_instance_->InitAsDefaultInstance();
  SetTimesRequestProto::default_instance_->InitAsDefaultInstance();
  SetTimesResponseProto::default_instance_->InitAsDefaultInstance();
  CreateSymlinkRequestProto::default_instance_->InitAsDefaultInstance();
  CreateSymlinkResponseProto::default_instance_->InitAsDefaultInstance();
  GetLinkTargetRequestProto::default_instance_->InitAsDefaultInstance();
  GetLinkTargetResponseProto::default_instance_->InitAsDefaultInstance();
  UpdateBlockForPipelineRequestProto::default_instance_->InitAsDefaultInstance();
  UpdateBlockForPipelineResponseProto::default_instance_->InitAsDefaultInstance();
  UpdatePipelineRequestProto::default_instance_->InitAsDefaultInstance();
  UpdatePipelineResponseProto::default_instance_->InitAsDefaultInstance();
  SetBalancerBandwidthRequestProto::default_instance_->InitAsDefaultInstance();
  SetBalancerBandwidthResponseProto::default_instance_->InitAsDefaultInstance();
  GetDataEncryptionKeyRequestProto::default_instance_->InitAsDefaultInstance();
  GetDataEncryptionKeyResponseProto::default_instance_->InitAsDefaultInstance();
  CreateSnapshotRequestProto::default_instance_->InitAsDefaultInstance();
  CreateSnapshotResponseProto::default_instance_->InitAsDefaultInstance();
  RenameSnapshotRequestProto::default_instance_->InitAsDefaultInstance();
  RenameSnapshotResponseProto::default_instance_->InitAsDefaultInstance();
  AllowSnapshotRequestProto::default_instance_->InitAsDefaultInstance();
  AllowSnapshotResponseProto::default_instance_->InitAsDefaultInstance();
  DisallowSnapshotRequestProto::default_instance_->InitAsDefaultInstance();
  DisallowSnapshotResponseProto::default_instance_->InitAsDefaultInstance();
  DeleteSnapshotRequestProto::default_instance_->InitAsDefaultInstance();
  DeleteSnapshotResponseProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientNamenodeProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientNamenodeProtocol_2eproto {
  StaticDescriptorInitializer_ClientNamenodeProtocol_2eproto() {
    protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  }
} static_descriptor_initializer_ClientNamenodeProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* CreateFlagProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateFlagProto_descriptor_;
}
bool CreateFlagProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DatanodeReportTypeProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatanodeReportTypeProto_descriptor_;
}
bool DatanodeReportTypeProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SafeModeActionProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SafeModeActionProto_descriptor_;
}
bool SafeModeActionProto_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CacheFlagProto_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheFlagProto_descriptor_;
}
bool CacheFlagProto_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GetBlockLocationsRequestProto::kSrcFieldNumber;
const int GetBlockLocationsRequestProto::kOffsetFieldNumber;
const int GetBlockLocationsRequestProto::kLengthFieldNumber;
#endif  // !_MSC_VER

GetBlockLocationsRequestProto::GetBlockLocationsRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBlockLocationsRequestProto::InitAsDefaultInstance() {
}

GetBlockLocationsRequestProto::GetBlockLocationsRequestProto(const GetBlockLocationsRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBlockLocationsRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlockLocationsRequestProto::~GetBlockLocationsRequestProto() {
  SharedDtor();
}

void GetBlockLocationsRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void GetBlockLocationsRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlockLocationsRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlockLocationsRequestProto_descriptor_;
}

const GetBlockLocationsRequestProto& GetBlockLocationsRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetBlockLocationsRequestProto* GetBlockLocationsRequestProto::default_instance_ = NULL;

GetBlockLocationsRequestProto* GetBlockLocationsRequestProto::New() const {
  return new GetBlockLocationsRequestProto;
}

void GetBlockLocationsRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    offset_ = GOOGLE_ULONGLONG(0);
    length_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlockLocationsRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required uint64 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }

      // required uint64 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBlockLocationsRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required uint64 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }

  // required uint64 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBlockLocationsRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required uint64 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }

  // required uint64 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBlockLocationsRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required uint64 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // required uint64 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlockLocationsRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlockLocationsRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlockLocationsRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlockLocationsRequestProto::MergeFrom(const GetBlockLocationsRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlockLocationsRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockLocationsRequestProto::CopyFrom(const GetBlockLocationsRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockLocationsRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetBlockLocationsRequestProto::Swap(GetBlockLocationsRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlockLocationsRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlockLocationsRequestProto_descriptor_;
  metadata.reflection = GetBlockLocationsRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBlockLocationsResponseProto::kLocationsFieldNumber;
#endif  // !_MSC_VER

GetBlockLocationsResponseProto::GetBlockLocationsResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBlockLocationsResponseProto::InitAsDefaultInstance() {
  locations_ = const_cast< ::Hdfs::Internal::LocatedBlocksProto*>(&::Hdfs::Internal::LocatedBlocksProto::default_instance());
}

GetBlockLocationsResponseProto::GetBlockLocationsResponseProto(const GetBlockLocationsResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBlockLocationsResponseProto::SharedCtor() {
  _cached_size_ = 0;
  locations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBlockLocationsResponseProto::~GetBlockLocationsResponseProto() {
  SharedDtor();
}

void GetBlockLocationsResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete locations_;
  }
}

void GetBlockLocationsResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBlockLocationsResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBlockLocationsResponseProto_descriptor_;
}

const GetBlockLocationsResponseProto& GetBlockLocationsResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetBlockLocationsResponseProto* GetBlockLocationsResponseProto::default_instance_ = NULL;

GetBlockLocationsResponseProto* GetBlockLocationsResponseProto::New() const {
  return new GetBlockLocationsResponseProto;
}

void GetBlockLocationsResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_locations()) {
      if (locations_ != NULL) locations_->::Hdfs::Internal::LocatedBlocksProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBlockLocationsResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBlockLocationsResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
  if (has_locations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->locations(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBlockLocationsResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
  if (has_locations()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->locations(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBlockLocationsResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Hdfs.Internal.LocatedBlocksProto locations = 1;
    if (has_locations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locations());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBlockLocationsResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBlockLocationsResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBlockLocationsResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBlockLocationsResponseProto::MergeFrom(const GetBlockLocationsResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_locations()) {
      mutable_locations()->::Hdfs::Internal::LocatedBlocksProto::MergeFrom(from.locations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBlockLocationsResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockLocationsResponseProto::CopyFrom(const GetBlockLocationsResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockLocationsResponseProto::IsInitialized() const {

  if (has_locations()) {
    if (!this->locations().IsInitialized()) return false;
  }
  return true;
}

void GetBlockLocationsResponseProto::Swap(GetBlockLocationsResponseProto* other) {
  if (other != this) {
    std::swap(locations_, other->locations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBlockLocationsResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBlockLocationsResponseProto_descriptor_;
  metadata.reflection = GetBlockLocationsResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetServerDefaultsRequestProto::GetServerDefaultsRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServerDefaultsRequestProto::InitAsDefaultInstance() {
}

GetServerDefaultsRequestProto::GetServerDefaultsRequestProto(const GetServerDefaultsRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServerDefaultsRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerDefaultsRequestProto::~GetServerDefaultsRequestProto() {
  SharedDtor();
}

void GetServerDefaultsRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetServerDefaultsRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerDefaultsRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerDefaultsRequestProto_descriptor_;
}

const GetServerDefaultsRequestProto& GetServerDefaultsRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetServerDefaultsRequestProto* GetServerDefaultsRequestProto::default_instance_ = NULL;

GetServerDefaultsRequestProto* GetServerDefaultsRequestProto::New() const {
  return new GetServerDefaultsRequestProto;
}

void GetServerDefaultsRequestProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerDefaultsRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetServerDefaultsRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServerDefaultsRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServerDefaultsRequestProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerDefaultsRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerDefaultsRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerDefaultsRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerDefaultsRequestProto::MergeFrom(const GetServerDefaultsRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerDefaultsRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerDefaultsRequestProto::CopyFrom(const GetServerDefaultsRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerDefaultsRequestProto::IsInitialized() const {

  return true;
}

void GetServerDefaultsRequestProto::Swap(GetServerDefaultsRequestProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerDefaultsRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerDefaultsRequestProto_descriptor_;
  metadata.reflection = GetServerDefaultsRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetServerDefaultsResponseProto::kServerDefaultsFieldNumber;
#endif  // !_MSC_VER

GetServerDefaultsResponseProto::GetServerDefaultsResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetServerDefaultsResponseProto::InitAsDefaultInstance() {
  serverdefaults_ = const_cast< ::Hdfs::Internal::FsServerDefaultsProto*>(&::Hdfs::Internal::FsServerDefaultsProto::default_instance());
}

GetServerDefaultsResponseProto::GetServerDefaultsResponseProto(const GetServerDefaultsResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetServerDefaultsResponseProto::SharedCtor() {
  _cached_size_ = 0;
  serverdefaults_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetServerDefaultsResponseProto::~GetServerDefaultsResponseProto() {
  SharedDtor();
}

void GetServerDefaultsResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete serverdefaults_;
  }
}

void GetServerDefaultsResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServerDefaultsResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetServerDefaultsResponseProto_descriptor_;
}

const GetServerDefaultsResponseProto& GetServerDefaultsResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetServerDefaultsResponseProto* GetServerDefaultsResponseProto::default_instance_ = NULL;

GetServerDefaultsResponseProto* GetServerDefaultsResponseProto::New() const {
  return new GetServerDefaultsResponseProto;
}

void GetServerDefaultsResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serverdefaults()) {
      if (serverdefaults_ != NULL) serverdefaults_->::Hdfs::Internal::FsServerDefaultsProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetServerDefaultsResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serverdefaults()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetServerDefaultsResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
  if (has_serverdefaults()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serverdefaults(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetServerDefaultsResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
  if (has_serverdefaults()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serverdefaults(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetServerDefaultsResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.FsServerDefaultsProto serverDefaults = 1;
    if (has_serverdefaults()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->serverdefaults());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServerDefaultsResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetServerDefaultsResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetServerDefaultsResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetServerDefaultsResponseProto::MergeFrom(const GetServerDefaultsResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverdefaults()) {
      mutable_serverdefaults()->::Hdfs::Internal::FsServerDefaultsProto::MergeFrom(from.serverdefaults());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetServerDefaultsResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServerDefaultsResponseProto::CopyFrom(const GetServerDefaultsResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServerDefaultsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_serverdefaults()) {
    if (!this->serverdefaults().IsInitialized()) return false;
  }
  return true;
}

void GetServerDefaultsResponseProto::Swap(GetServerDefaultsResponseProto* other) {
  if (other != this) {
    std::swap(serverdefaults_, other->serverdefaults_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetServerDefaultsResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetServerDefaultsResponseProto_descriptor_;
  metadata.reflection = GetServerDefaultsResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRequestProto::kSrcFieldNumber;
const int CreateRequestProto::kMaskedFieldNumber;
const int CreateRequestProto::kClientNameFieldNumber;
const int CreateRequestProto::kCreateFlagFieldNumber;
const int CreateRequestProto::kCreateParentFieldNumber;
const int CreateRequestProto::kReplicationFieldNumber;
const int CreateRequestProto::kBlockSizeFieldNumber;
const int CreateRequestProto::kCryptoProtocolVersionFieldNumber;
#endif  // !_MSC_VER

CreateRequestProto::CreateRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRequestProto::InitAsDefaultInstance() {
  masked_ = const_cast< ::Hdfs::Internal::FsPermissionProto*>(&::Hdfs::Internal::FsPermissionProto::default_instance());
}

CreateRequestProto::CreateRequestProto(const CreateRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  masked_ = NULL;
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createflag_ = 0u;
  createparent_ = false;
  replication_ = 0u;
  blocksize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRequestProto::~CreateRequestProto() {
  SharedDtor();
}

void CreateRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
    delete masked_;
  }
}

void CreateRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRequestProto_descriptor_;
}

const CreateRequestProto& CreateRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CreateRequestProto* CreateRequestProto::default_instance_ = NULL;

CreateRequestProto* CreateRequestProto::New() const {
  return new CreateRequestProto;
}

void CreateRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_masked()) {
      if (masked_ != NULL) masked_->::Hdfs::Internal::FsPermissionProto::Clear();
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
    createflag_ = 0u;
    createparent_ = false;
    replication_ = 0u;
    blocksize_ = GOOGLE_ULONGLONG(0);
  }
  cryptoprotocolversion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masked;
        break;
      }

      // required .Hdfs.Internal.FsPermissionProto masked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_masked()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clientName;
        break;
      }

      // required string clientName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createFlag;
        break;
      }

      // required uint32 createFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createflag_)));
          set_has_createflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_createParent;
        break;
      }

      // required bool createParent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createParent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &createparent_)));
          set_has_createparent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_replication;
        break;
      }

      // required uint32 replication = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replication_)));
          set_has_replication();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_blockSize;
        break;
      }

      // required uint64 blockSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blockSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blocksize_)));
          set_has_blocksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cryptoProtocolVersion;
        break;
      }

      // repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cryptoProtocolVersion:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Hdfs::Internal::CryptoProtocolVersionProto_IsValid(value)) {
            add_cryptoprotocolversion(static_cast< ::Hdfs::Internal::CryptoProtocolVersionProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::Hdfs::Internal::CryptoProtocolVersionProto_IsValid,
                 this->mutable_cryptoprotocolversion())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cryptoProtocolVersion;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  if (has_masked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->masked(), output);
  }

  // required string clientName = 3;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->clientname(), output);
  }

  // required uint32 createFlag = 4;
  if (has_createflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->createflag(), output);
  }

  // required bool createParent = 5;
  if (has_createparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->createparent(), output);
  }

  // required uint32 replication = 6;
  if (has_replication()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->replication(), output);
  }

  // required uint64 blockSize = 7;
  if (has_blocksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->blocksize(), output);
  }

  // repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 8;
  for (int i = 0; i < this->cryptoprotocolversion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->cryptoprotocolversion(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  if (has_masked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->masked(), target);
  }

  // required string clientName = 3;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientname(), target);
  }

  // required uint32 createFlag = 4;
  if (has_createflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->createflag(), target);
  }

  // required bool createParent = 5;
  if (has_createparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->createparent(), target);
  }

  // required uint32 replication = 6;
  if (has_replication()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->replication(), target);
  }

  // required uint64 blockSize = 7;
  if (has_blocksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->blocksize(), target);
  }

  // repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 8;
  for (int i = 0; i < this->cryptoprotocolversion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->cryptoprotocolversion(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required .Hdfs.Internal.FsPermissionProto masked = 2;
    if (has_masked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->masked());
    }

    // required string clientName = 3;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

    // required uint32 createFlag = 4;
    if (has_createflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createflag());
    }

    // required bool createParent = 5;
    if (has_createparent()) {
      total_size += 1 + 1;
    }

    // required uint32 replication = 6;
    if (has_replication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replication());
    }

    // required uint64 blockSize = 7;
    if (has_blocksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blocksize());
    }

  }
  // repeated .Hdfs.Internal.CryptoProtocolVersionProto cryptoProtocolVersion = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cryptoprotocolversion_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->cryptoprotocolversion(i));
    }
    total_size += 1 * this->cryptoprotocolversion_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRequestProto::MergeFrom(const CreateRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  cryptoprotocolversion_.MergeFrom(from.cryptoprotocolversion_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_masked()) {
      mutable_masked()->::Hdfs::Internal::FsPermissionProto::MergeFrom(from.masked());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
    if (from.has_createflag()) {
      set_createflag(from.createflag());
    }
    if (from.has_createparent()) {
      set_createparent(from.createparent());
    }
    if (from.has_replication()) {
      set_replication(from.replication());
    }
    if (from.has_blocksize()) {
      set_blocksize(from.blocksize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRequestProto::CopyFrom(const CreateRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_masked()) {
    if (!this->masked().IsInitialized()) return false;
  }
  return true;
}

void CreateRequestProto::Swap(CreateRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(masked_, other->masked_);
    std::swap(clientname_, other->clientname_);
    std::swap(createflag_, other->createflag_);
    std::swap(createparent_, other->createparent_);
    std::swap(replication_, other->replication_);
    std::swap(blocksize_, other->blocksize_);
    cryptoprotocolversion_.Swap(&other->cryptoprotocolversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRequestProto_descriptor_;
  metadata.reflection = CreateRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateResponseProto::kFsFieldNumber;
#endif  // !_MSC_VER

CreateResponseProto::CreateResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateResponseProto::InitAsDefaultInstance() {
  fs_ = const_cast< ::Hdfs::Internal::HdfsFileStatusProto*>(&::Hdfs::Internal::HdfsFileStatusProto::default_instance());
}

CreateResponseProto::CreateResponseProto(const CreateResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateResponseProto::SharedCtor() {
  _cached_size_ = 0;
  fs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateResponseProto::~CreateResponseProto() {
  SharedDtor();
}

void CreateResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete fs_;
  }
}

void CreateResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateResponseProto_descriptor_;
}

const CreateResponseProto& CreateResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CreateResponseProto* CreateResponseProto::default_instance_ = NULL;

CreateResponseProto* CreateResponseProto::New() const {
  return new CreateResponseProto;
}

void CreateResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fs()) {
      if (fs_ != NULL) fs_->::Hdfs::Internal::HdfsFileStatusProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
    if (has_fs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateResponseProto::MergeFrom(const CreateResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fs()) {
      mutable_fs()->::Hdfs::Internal::HdfsFileStatusProto::MergeFrom(from.fs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResponseProto::CopyFrom(const CreateResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponseProto::IsInitialized() const {

  if (has_fs()) {
    if (!this->fs().IsInitialized()) return false;
  }
  return true;
}

void CreateResponseProto::Swap(CreateResponseProto* other) {
  if (other != this) {
    std::swap(fs_, other->fs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateResponseProto_descriptor_;
  metadata.reflection = CreateResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendRequestProto::kSrcFieldNumber;
const int AppendRequestProto::kClientNameFieldNumber;
#endif  // !_MSC_VER

AppendRequestProto::AppendRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendRequestProto::InitAsDefaultInstance() {
}

AppendRequestProto::AppendRequestProto(const AppendRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendRequestProto::~AppendRequestProto() {
  SharedDtor();
}

void AppendRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
  }
}

void AppendRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendRequestProto_descriptor_;
}

const AppendRequestProto& AppendRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AppendRequestProto* AppendRequestProto::default_instance_ = NULL;

AppendRequestProto* AppendRequestProto::New() const {
  return new AppendRequestProto;
}

void AppendRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientName;
        break;
      }

      // required string clientName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string clientName = 2;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendRequestProto::MergeFrom(const AppendRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendRequestProto::CopyFrom(const AppendRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AppendRequestProto::Swap(AppendRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(clientname_, other->clientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendRequestProto_descriptor_;
  metadata.reflection = AppendRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppendResponseProto::kBlockFieldNumber;
const int AppendResponseProto::kStatFieldNumber;
#endif  // !_MSC_VER

AppendResponseProto::AppendResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AppendResponseProto::InitAsDefaultInstance() {
  block_ = const_cast< ::Hdfs::Internal::LocatedBlockProto*>(&::Hdfs::Internal::LocatedBlockProto::default_instance());
  stat_ = const_cast< ::Hdfs::Internal::HdfsFileStatusProto*>(&::Hdfs::Internal::HdfsFileStatusProto::default_instance());
}

AppendResponseProto::AppendResponseProto(const AppendResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AppendResponseProto::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  stat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppendResponseProto::~AppendResponseProto() {
  SharedDtor();
}

void AppendResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
    delete stat_;
  }
}

void AppendResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppendResponseProto_descriptor_;
}

const AppendResponseProto& AppendResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AppendResponseProto* AppendResponseProto::default_instance_ = NULL;

AppendResponseProto* AppendResponseProto::New() const {
  return new AppendResponseProto;
}

void AppendResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::Hdfs::Internal::LocatedBlockProto::Clear();
    }
    if (has_stat()) {
      if (stat_ != NULL) stat_->::Hdfs::Internal::HdfsFileStatusProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppendResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Hdfs.Internal.LocatedBlockProto block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stat;
        break;
      }

      // optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AppendResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Hdfs.Internal.LocatedBlockProto block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  // optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AppendResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Hdfs.Internal.LocatedBlockProto block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  // optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
  if (has_stat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AppendResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Hdfs.Internal.LocatedBlockProto block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

    // optional .Hdfs.Internal.HdfsFileStatusProto stat = 2;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppendResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AppendResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppendResponseProto::MergeFrom(const AppendResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::Hdfs::Internal::LocatedBlockProto::MergeFrom(from.block());
    }
    if (from.has_stat()) {
      mutable_stat()->::Hdfs::Internal::HdfsFileStatusProto::MergeFrom(from.stat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppendResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendResponseProto::CopyFrom(const AppendResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendResponseProto::IsInitialized() const {

  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  if (has_stat()) {
    if (!this->stat().IsInitialized()) return false;
  }
  return true;
}

void AppendResponseProto::Swap(AppendResponseProto* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(stat_, other->stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AppendResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppendResponseProto_descriptor_;
  metadata.reflection = AppendResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetReplicationRequestProto::kSrcFieldNumber;
const int SetReplicationRequestProto::kReplicationFieldNumber;
#endif  // !_MSC_VER

SetReplicationRequestProto::SetReplicationRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetReplicationRequestProto::InitAsDefaultInstance() {
}

SetReplicationRequestProto::SetReplicationRequestProto(const SetReplicationRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetReplicationRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replication_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetReplicationRequestProto::~SetReplicationRequestProto() {
  SharedDtor();
}

void SetReplicationRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void SetReplicationRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetReplicationRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetReplicationRequestProto_descriptor_;
}

const SetReplicationRequestProto& SetReplicationRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetReplicationRequestProto* SetReplicationRequestProto::default_instance_ = NULL;

SetReplicationRequestProto* SetReplicationRequestProto::New() const {
  return new SetReplicationRequestProto;
}

void SetReplicationRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    replication_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetReplicationRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replication;
        break;
      }

      // required uint32 replication = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replication_)));
          set_has_replication();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetReplicationRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required uint32 replication = 2;
  if (has_replication()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replication(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetReplicationRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required uint32 replication = 2;
  if (has_replication()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replication(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetReplicationRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required uint32 replication = 2;
    if (has_replication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replication());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetReplicationRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetReplicationRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetReplicationRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetReplicationRequestProto::MergeFrom(const SetReplicationRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_replication()) {
      set_replication(from.replication());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetReplicationRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetReplicationRequestProto::CopyFrom(const SetReplicationRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReplicationRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetReplicationRequestProto::Swap(SetReplicationRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(replication_, other->replication_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetReplicationRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetReplicationRequestProto_descriptor_;
  metadata.reflection = SetReplicationRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetReplicationResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

SetReplicationResponseProto::SetReplicationResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetReplicationResponseProto::InitAsDefaultInstance() {
}

SetReplicationResponseProto::SetReplicationResponseProto(const SetReplicationResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetReplicationResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetReplicationResponseProto::~SetReplicationResponseProto() {
  SharedDtor();
}

void SetReplicationResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetReplicationResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetReplicationResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetReplicationResponseProto_descriptor_;
}

const SetReplicationResponseProto& SetReplicationResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetReplicationResponseProto* SetReplicationResponseProto::default_instance_ = NULL;

SetReplicationResponseProto* SetReplicationResponseProto::New() const {
  return new SetReplicationResponseProto;
}

void SetReplicationResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetReplicationResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetReplicationResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetReplicationResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetReplicationResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetReplicationResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetReplicationResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetReplicationResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetReplicationResponseProto::MergeFrom(const SetReplicationResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetReplicationResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetReplicationResponseProto::CopyFrom(const SetReplicationResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetReplicationResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetReplicationResponseProto::Swap(SetReplicationResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetReplicationResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetReplicationResponseProto_descriptor_;
  metadata.reflection = SetReplicationResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetPermissionRequestProto::kSrcFieldNumber;
const int SetPermissionRequestProto::kPermissionFieldNumber;
#endif  // !_MSC_VER

SetPermissionRequestProto::SetPermissionRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPermissionRequestProto::InitAsDefaultInstance() {
  permission_ = const_cast< ::Hdfs::Internal::FsPermissionProto*>(&::Hdfs::Internal::FsPermissionProto::default_instance());
}

SetPermissionRequestProto::SetPermissionRequestProto(const SetPermissionRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPermissionRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  permission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPermissionRequestProto::~SetPermissionRequestProto() {
  SharedDtor();
}

void SetPermissionRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
    delete permission_;
  }
}

void SetPermissionRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPermissionRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPermissionRequestProto_descriptor_;
}

const SetPermissionRequestProto& SetPermissionRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetPermissionRequestProto* SetPermissionRequestProto::default_instance_ = NULL;

SetPermissionRequestProto* SetPermissionRequestProto::New() const {
  return new SetPermissionRequestProto;
}

void SetPermissionRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_permission()) {
      if (permission_ != NULL) permission_->::Hdfs::Internal::FsPermissionProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPermissionRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_permission;
        break;
      }

      // required .Hdfs.Internal.FsPermissionProto permission = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_permission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_permission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetPermissionRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required .Hdfs.Internal.FsPermissionProto permission = 2;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->permission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPermissionRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required .Hdfs.Internal.FsPermissionProto permission = 2;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->permission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPermissionRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required .Hdfs.Internal.FsPermissionProto permission = 2;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->permission());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPermissionRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPermissionRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPermissionRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPermissionRequestProto::MergeFrom(const SetPermissionRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_permission()) {
      mutable_permission()->::Hdfs::Internal::FsPermissionProto::MergeFrom(from.permission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPermissionRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPermissionRequestProto::CopyFrom(const SetPermissionRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPermissionRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_permission()) {
    if (!this->permission().IsInitialized()) return false;
  }
  return true;
}

void SetPermissionRequestProto::Swap(SetPermissionRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(permission_, other->permission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPermissionRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPermissionRequestProto_descriptor_;
  metadata.reflection = SetPermissionRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetPermissionResponseProto::SetPermissionResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetPermissionResponseProto::InitAsDefaultInstance() {
}

SetPermissionResponseProto::SetPermissionResponseProto(const SetPermissionResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetPermissionResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetPermissionResponseProto::~SetPermissionResponseProto() {
  SharedDtor();
}

void SetPermissionResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetPermissionResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetPermissionResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetPermissionResponseProto_descriptor_;
}

const SetPermissionResponseProto& SetPermissionResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetPermissionResponseProto* SetPermissionResponseProto::default_instance_ = NULL;

SetPermissionResponseProto* SetPermissionResponseProto::New() const {
  return new SetPermissionResponseProto;
}

void SetPermissionResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetPermissionResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetPermissionResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetPermissionResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetPermissionResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetPermissionResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetPermissionResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetPermissionResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetPermissionResponseProto::MergeFrom(const SetPermissionResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetPermissionResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPermissionResponseProto::CopyFrom(const SetPermissionResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPermissionResponseProto::IsInitialized() const {

  return true;
}

void SetPermissionResponseProto::Swap(SetPermissionResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetPermissionResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetPermissionResponseProto_descriptor_;
  metadata.reflection = SetPermissionResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetOwnerRequestProto::kSrcFieldNumber;
const int SetOwnerRequestProto::kUsernameFieldNumber;
const int SetOwnerRequestProto::kGroupnameFieldNumber;
#endif  // !_MSC_VER

SetOwnerRequestProto::SetOwnerRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetOwnerRequestProto::InitAsDefaultInstance() {
}

SetOwnerRequestProto::SetOwnerRequestProto(const SetOwnerRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetOwnerRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetOwnerRequestProto::~SetOwnerRequestProto() {
  SharedDtor();
}

void SetOwnerRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void SetOwnerRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetOwnerRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOwnerRequestProto_descriptor_;
}

const SetOwnerRequestProto& SetOwnerRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetOwnerRequestProto* SetOwnerRequestProto::default_instance_ = NULL;

SetOwnerRequestProto* SetOwnerRequestProto::New() const {
  return new SetOwnerRequestProto;
}

void SetOwnerRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetOwnerRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }

      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_groupname;
        break;
      }

      // optional string groupname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetOwnerRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }

  // optional string groupname = 3;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->groupname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetOwnerRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional string groupname = 3;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetOwnerRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string groupname = 3;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetOwnerRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetOwnerRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetOwnerRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetOwnerRequestProto::MergeFrom(const SetOwnerRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetOwnerRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOwnerRequestProto::CopyFrom(const SetOwnerRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOwnerRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetOwnerRequestProto::Swap(SetOwnerRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(username_, other->username_);
    std::swap(groupname_, other->groupname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetOwnerRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetOwnerRequestProto_descriptor_;
  metadata.reflection = SetOwnerRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetOwnerResponseProto::SetOwnerResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetOwnerResponseProto::InitAsDefaultInstance() {
}

SetOwnerResponseProto::SetOwnerResponseProto(const SetOwnerResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetOwnerResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetOwnerResponseProto::~SetOwnerResponseProto() {
  SharedDtor();
}

void SetOwnerResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetOwnerResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetOwnerResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOwnerResponseProto_descriptor_;
}

const SetOwnerResponseProto& SetOwnerResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetOwnerResponseProto* SetOwnerResponseProto::default_instance_ = NULL;

SetOwnerResponseProto* SetOwnerResponseProto::New() const {
  return new SetOwnerResponseProto;
}

void SetOwnerResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetOwnerResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetOwnerResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetOwnerResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetOwnerResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetOwnerResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetOwnerResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetOwnerResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetOwnerResponseProto::MergeFrom(const SetOwnerResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetOwnerResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOwnerResponseProto::CopyFrom(const SetOwnerResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOwnerResponseProto::IsInitialized() const {

  return true;
}

void SetOwnerResponseProto::Swap(SetOwnerResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetOwnerResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetOwnerResponseProto_descriptor_;
  metadata.reflection = SetOwnerResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AbandonBlockRequestProto::kBFieldNumber;
const int AbandonBlockRequestProto::kSrcFieldNumber;
const int AbandonBlockRequestProto::kHolderFieldNumber;
#endif  // !_MSC_VER

AbandonBlockRequestProto::AbandonBlockRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AbandonBlockRequestProto::InitAsDefaultInstance() {
  b_ = const_cast< ::Hdfs::Internal::ExtendedBlockProto*>(&::Hdfs::Internal::ExtendedBlockProto::default_instance());
}

AbandonBlockRequestProto::AbandonBlockRequestProto(const AbandonBlockRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AbandonBlockRequestProto::SharedCtor() {
  _cached_size_ = 0;
  b_ = NULL;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  holder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbandonBlockRequestProto::~AbandonBlockRequestProto() {
  SharedDtor();
}

void AbandonBlockRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (holder_ != &::google::protobuf::internal::kEmptyString) {
    delete holder_;
  }
  if (this != default_instance_) {
    delete b_;
  }
}

void AbandonBlockRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbandonBlockRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbandonBlockRequestProto_descriptor_;
}

const AbandonBlockRequestProto& AbandonBlockRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AbandonBlockRequestProto* AbandonBlockRequestProto::default_instance_ = NULL;

AbandonBlockRequestProto* AbandonBlockRequestProto::New() const {
  return new AbandonBlockRequestProto;
}

void AbandonBlockRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_b()) {
      if (b_ != NULL) b_->::Hdfs::Internal::ExtendedBlockProto::Clear();
    }
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_holder()) {
      if (holder_ != &::google::protobuf::internal::kEmptyString) {
        holder_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbandonBlockRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.ExtendedBlockProto b = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_src;
        break;
      }

      // required string src = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_holder;
        break;
      }

      // required string holder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_holder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_holder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->holder().data(), this->holder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AbandonBlockRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.ExtendedBlockProto b = 1;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->b(), output);
  }

  // required string src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->src(), output);
  }

  // required string holder = 3;
  if (has_holder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->holder().data(), this->holder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->holder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AbandonBlockRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.ExtendedBlockProto b = 1;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->b(), target);
  }

  // required string src = 2;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->src(), target);
  }

  // required string holder = 3;
  if (has_holder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->holder().data(), this->holder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->holder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AbandonBlockRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.ExtendedBlockProto b = 1;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

    // required string src = 2;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string holder = 3;
    if (has_holder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->holder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbandonBlockRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbandonBlockRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbandonBlockRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbandonBlockRequestProto::MergeFrom(const AbandonBlockRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_b()) {
      mutable_b()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(from.b());
    }
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_holder()) {
      set_holder(from.holder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbandonBlockRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbandonBlockRequestProto::CopyFrom(const AbandonBlockRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbandonBlockRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_b()) {
    if (!this->b().IsInitialized()) return false;
  }
  return true;
}

void AbandonBlockRequestProto::Swap(AbandonBlockRequestProto* other) {
  if (other != this) {
    std::swap(b_, other->b_);
    std::swap(src_, other->src_);
    std::swap(holder_, other->holder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbandonBlockRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbandonBlockRequestProto_descriptor_;
  metadata.reflection = AbandonBlockRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AbandonBlockResponseProto::AbandonBlockResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AbandonBlockResponseProto::InitAsDefaultInstance() {
}

AbandonBlockResponseProto::AbandonBlockResponseProto(const AbandonBlockResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AbandonBlockResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbandonBlockResponseProto::~AbandonBlockResponseProto() {
  SharedDtor();
}

void AbandonBlockResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AbandonBlockResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbandonBlockResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbandonBlockResponseProto_descriptor_;
}

const AbandonBlockResponseProto& AbandonBlockResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AbandonBlockResponseProto* AbandonBlockResponseProto::default_instance_ = NULL;

AbandonBlockResponseProto* AbandonBlockResponseProto::New() const {
  return new AbandonBlockResponseProto;
}

void AbandonBlockResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AbandonBlockResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AbandonBlockResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AbandonBlockResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AbandonBlockResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbandonBlockResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AbandonBlockResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AbandonBlockResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AbandonBlockResponseProto::MergeFrom(const AbandonBlockResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AbandonBlockResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbandonBlockResponseProto::CopyFrom(const AbandonBlockResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbandonBlockResponseProto::IsInitialized() const {

  return true;
}

void AbandonBlockResponseProto::Swap(AbandonBlockResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AbandonBlockResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbandonBlockResponseProto_descriptor_;
  metadata.reflection = AbandonBlockResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBlockRequestProto::kSrcFieldNumber;
const int AddBlockRequestProto::kClientNameFieldNumber;
const int AddBlockRequestProto::kPreviousFieldNumber;
const int AddBlockRequestProto::kExcludeNodesFieldNumber;
const int AddBlockRequestProto::kFileIdFieldNumber;
const int AddBlockRequestProto::kFavoredNodesFieldNumber;
#endif  // !_MSC_VER

AddBlockRequestProto::AddBlockRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddBlockRequestProto::InitAsDefaultInstance() {
  previous_ = const_cast< ::Hdfs::Internal::ExtendedBlockProto*>(&::Hdfs::Internal::ExtendedBlockProto::default_instance());
}

AddBlockRequestProto::AddBlockRequestProto(const AddBlockRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddBlockRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  previous_ = NULL;
  fileid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBlockRequestProto::~AddBlockRequestProto() {
  SharedDtor();
}

void AddBlockRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
    delete previous_;
  }
}

void AddBlockRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBlockRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBlockRequestProto_descriptor_;
}

const AddBlockRequestProto& AddBlockRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AddBlockRequestProto* AddBlockRequestProto::default_instance_ = NULL;

AddBlockRequestProto* AddBlockRequestProto::New() const {
  return new AddBlockRequestProto;
}

void AddBlockRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
    if (has_previous()) {
      if (previous_ != NULL) previous_->::Hdfs::Internal::ExtendedBlockProto::Clear();
    }
    fileid_ = GOOGLE_ULONGLONG(0);
  }
  excludenodes_.Clear();
  favorednodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBlockRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientName;
        break;
      }

      // required string clientName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_previous;
        break;
      }

      // optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_previous:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_previous()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_excludeNodes;
        break;
      }

      // repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_excludeNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_excludenodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_excludeNodes;
        if (input->ExpectTag(40)) goto parse_fileId;
        break;
      }

      // optional uint64 fileId = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_favoredNodes;
        break;
      }

      // repeated string favoredNodes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_favoredNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_favorednodes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->favorednodes(this->favorednodes_size() - 1).data(),
            this->favorednodes(this->favorednodes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_favoredNodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBlockRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientname(), output);
  }

  // optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
  if (has_previous()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->previous(), output);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
  for (int i = 0; i < this->excludenodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->excludenodes(i), output);
  }

  // optional uint64 fileId = 5 [default = 0];
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fileid(), output);
  }

  // repeated string favoredNodes = 6;
  for (int i = 0; i < this->favorednodes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->favorednodes(i).data(), this->favorednodes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->favorednodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBlockRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientname(), target);
  }

  // optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
  if (has_previous()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->previous(), target);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
  for (int i = 0; i < this->excludenodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->excludenodes(i), target);
  }

  // optional uint64 fileId = 5 [default = 0];
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fileid(), target);
  }

  // repeated string favoredNodes = 6;
  for (int i = 0; i < this->favorednodes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->favorednodes(i).data(), this->favorednodes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->favorednodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBlockRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string clientName = 2;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

    // optional .Hdfs.Internal.ExtendedBlockProto previous = 3;
    if (has_previous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->previous());
    }

    // optional uint64 fileId = 5 [default = 0];
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fileid());
    }

  }
  // repeated .Hdfs.Internal.DatanodeInfoProto excludeNodes = 4;
  total_size += 1 * this->excludenodes_size();
  for (int i = 0; i < this->excludenodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->excludenodes(i));
  }

  // repeated string favoredNodes = 6;
  total_size += 1 * this->favorednodes_size();
  for (int i = 0; i < this->favorednodes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->favorednodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBlockRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBlockRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBlockRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBlockRequestProto::MergeFrom(const AddBlockRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  excludenodes_.MergeFrom(from.excludenodes_);
  favorednodes_.MergeFrom(from.favorednodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
    if (from.has_previous()) {
      mutable_previous()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(from.previous());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBlockRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlockRequestProto::CopyFrom(const AddBlockRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_previous()) {
    if (!this->previous().IsInitialized()) return false;
  }
  for (int i = 0; i < excludenodes_size(); i++) {
    if (!this->excludenodes(i).IsInitialized()) return false;
  }
  return true;
}

void AddBlockRequestProto::Swap(AddBlockRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(clientname_, other->clientname_);
    std::swap(previous_, other->previous_);
    excludenodes_.Swap(&other->excludenodes_);
    std::swap(fileid_, other->fileid_);
    favorednodes_.Swap(&other->favorednodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBlockRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBlockRequestProto_descriptor_;
  metadata.reflection = AddBlockRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddBlockResponseProto::kBlockFieldNumber;
#endif  // !_MSC_VER

AddBlockResponseProto::AddBlockResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddBlockResponseProto::InitAsDefaultInstance() {
  block_ = const_cast< ::Hdfs::Internal::LocatedBlockProto*>(&::Hdfs::Internal::LocatedBlockProto::default_instance());
}

AddBlockResponseProto::AddBlockResponseProto(const AddBlockResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddBlockResponseProto::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBlockResponseProto::~AddBlockResponseProto() {
  SharedDtor();
}

void AddBlockResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void AddBlockResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBlockResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBlockResponseProto_descriptor_;
}

const AddBlockResponseProto& AddBlockResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AddBlockResponseProto* AddBlockResponseProto::default_instance_ = NULL;

AddBlockResponseProto* AddBlockResponseProto::New() const {
  return new AddBlockResponseProto;
}

void AddBlockResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::Hdfs::Internal::LocatedBlockProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBlockResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.LocatedBlockProto block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBlockResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBlockResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBlockResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.LocatedBlockProto block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBlockResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBlockResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBlockResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBlockResponseProto::MergeFrom(const AddBlockResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::Hdfs::Internal::LocatedBlockProto::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBlockResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBlockResponseProto::CopyFrom(const AddBlockResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBlockResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  return true;
}

void AddBlockResponseProto::Swap(AddBlockResponseProto* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBlockResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBlockResponseProto_descriptor_;
  metadata.reflection = AddBlockResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAdditionalDatanodeRequestProto::kSrcFieldNumber;
const int GetAdditionalDatanodeRequestProto::kBlkFieldNumber;
const int GetAdditionalDatanodeRequestProto::kExistingsFieldNumber;
const int GetAdditionalDatanodeRequestProto::kExcludesFieldNumber;
const int GetAdditionalDatanodeRequestProto::kNumAdditionalNodesFieldNumber;
const int GetAdditionalDatanodeRequestProto::kClientNameFieldNumber;
const int GetAdditionalDatanodeRequestProto::kExistingStorageUuidsFieldNumber;
#endif  // !_MSC_VER

GetAdditionalDatanodeRequestProto::GetAdditionalDatanodeRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAdditionalDatanodeRequestProto::InitAsDefaultInstance() {
  blk_ = const_cast< ::Hdfs::Internal::ExtendedBlockProto*>(&::Hdfs::Internal::ExtendedBlockProto::default_instance());
}

GetAdditionalDatanodeRequestProto::GetAdditionalDatanodeRequestProto(const GetAdditionalDatanodeRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAdditionalDatanodeRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blk_ = NULL;
  numadditionalnodes_ = 0u;
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAdditionalDatanodeRequestProto::~GetAdditionalDatanodeRequestProto() {
  SharedDtor();
}

void GetAdditionalDatanodeRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
    delete blk_;
  }
}

void GetAdditionalDatanodeRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAdditionalDatanodeRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAdditionalDatanodeRequestProto_descriptor_;
}

const GetAdditionalDatanodeRequestProto& GetAdditionalDatanodeRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetAdditionalDatanodeRequestProto* GetAdditionalDatanodeRequestProto::default_instance_ = NULL;

GetAdditionalDatanodeRequestProto* GetAdditionalDatanodeRequestProto::New() const {
  return new GetAdditionalDatanodeRequestProto;
}

void GetAdditionalDatanodeRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_blk()) {
      if (blk_ != NULL) blk_->::Hdfs::Internal::ExtendedBlockProto::Clear();
    }
    numadditionalnodes_ = 0u;
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
  }
  existings_.Clear();
  excludes_.Clear();
  existingstorageuuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAdditionalDatanodeRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blk;
        break;
      }

      // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_existings;
        break;
      }

      // repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_existings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_existings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_existings;
        if (input->ExpectTag(34)) goto parse_excludes;
        break;
      }

      // repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_excludes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_excludes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_excludes;
        if (input->ExpectTag(40)) goto parse_numAdditionalNodes;
        break;
      }

      // required uint32 numAdditionalNodes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numAdditionalNodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numadditionalnodes_)));
          set_has_numadditionalnodes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_clientName;
        break;
      }

      // required string clientName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_existingStorageUuids;
        break;
      }

      // repeated string existingStorageUuids = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_existingStorageUuids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_existingstorageuuids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->existingstorageuuids(this->existingstorageuuids_size() - 1).data(),
            this->existingstorageuuids(this->existingstorageuuids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_existingStorageUuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAdditionalDatanodeRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
  if (has_blk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blk(), output);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
  for (int i = 0; i < this->existings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->existings(i), output);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
  for (int i = 0; i < this->excludes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->excludes(i), output);
  }

  // required uint32 numAdditionalNodes = 5;
  if (has_numadditionalnodes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numadditionalnodes(), output);
  }

  // required string clientName = 6;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->clientname(), output);
  }

  // repeated string existingStorageUuids = 7;
  for (int i = 0; i < this->existingstorageuuids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->existingstorageuuids(i).data(), this->existingstorageuuids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->existingstorageuuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAdditionalDatanodeRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
  if (has_blk()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blk(), target);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
  for (int i = 0; i < this->existings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->existings(i), target);
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
  for (int i = 0; i < this->excludes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->excludes(i), target);
  }

  // required uint32 numAdditionalNodes = 5;
  if (has_numadditionalnodes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->numadditionalnodes(), target);
  }

  // required string clientName = 6;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->clientname(), target);
  }

  // repeated string existingStorageUuids = 7;
  for (int i = 0; i < this->existingstorageuuids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->existingstorageuuids(i).data(), this->existingstorageuuids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->existingstorageuuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAdditionalDatanodeRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required .Hdfs.Internal.ExtendedBlockProto blk = 2;
    if (has_blk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blk());
    }

    // required uint32 numAdditionalNodes = 5;
    if (has_numadditionalnodes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numadditionalnodes());
    }

    // required string clientName = 6;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  // repeated .Hdfs.Internal.DatanodeInfoProto existings = 3;
  total_size += 1 * this->existings_size();
  for (int i = 0; i < this->existings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->existings(i));
  }

  // repeated .Hdfs.Internal.DatanodeInfoProto excludes = 4;
  total_size += 1 * this->excludes_size();
  for (int i = 0; i < this->excludes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->excludes(i));
  }

  // repeated string existingStorageUuids = 7;
  total_size += 1 * this->existingstorageuuids_size();
  for (int i = 0; i < this->existingstorageuuids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->existingstorageuuids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAdditionalDatanodeRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAdditionalDatanodeRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAdditionalDatanodeRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAdditionalDatanodeRequestProto::MergeFrom(const GetAdditionalDatanodeRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  existings_.MergeFrom(from.existings_);
  excludes_.MergeFrom(from.excludes_);
  existingstorageuuids_.MergeFrom(from.existingstorageuuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_blk()) {
      mutable_blk()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(from.blk());
    }
    if (from.has_numadditionalnodes()) {
      set_numadditionalnodes(from.numadditionalnodes());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAdditionalDatanodeRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAdditionalDatanodeRequestProto::CopyFrom(const GetAdditionalDatanodeRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAdditionalDatanodeRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;

  if (has_blk()) {
    if (!this->blk().IsInitialized()) return false;
  }
  for (int i = 0; i < existings_size(); i++) {
    if (!this->existings(i).IsInitialized()) return false;
  }
  for (int i = 0; i < excludes_size(); i++) {
    if (!this->excludes(i).IsInitialized()) return false;
  }
  return true;
}

void GetAdditionalDatanodeRequestProto::Swap(GetAdditionalDatanodeRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(blk_, other->blk_);
    existings_.Swap(&other->existings_);
    excludes_.Swap(&other->excludes_);
    std::swap(numadditionalnodes_, other->numadditionalnodes_);
    std::swap(clientname_, other->clientname_);
    existingstorageuuids_.Swap(&other->existingstorageuuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAdditionalDatanodeRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAdditionalDatanodeRequestProto_descriptor_;
  metadata.reflection = GetAdditionalDatanodeRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAdditionalDatanodeResponseProto::kBlockFieldNumber;
#endif  // !_MSC_VER

GetAdditionalDatanodeResponseProto::GetAdditionalDatanodeResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAdditionalDatanodeResponseProto::InitAsDefaultInstance() {
  block_ = const_cast< ::Hdfs::Internal::LocatedBlockProto*>(&::Hdfs::Internal::LocatedBlockProto::default_instance());
}

GetAdditionalDatanodeResponseProto::GetAdditionalDatanodeResponseProto(const GetAdditionalDatanodeResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAdditionalDatanodeResponseProto::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAdditionalDatanodeResponseProto::~GetAdditionalDatanodeResponseProto() {
  SharedDtor();
}

void GetAdditionalDatanodeResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void GetAdditionalDatanodeResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAdditionalDatanodeResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAdditionalDatanodeResponseProto_descriptor_;
}

const GetAdditionalDatanodeResponseProto& GetAdditionalDatanodeResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetAdditionalDatanodeResponseProto* GetAdditionalDatanodeResponseProto::default_instance_ = NULL;

GetAdditionalDatanodeResponseProto* GetAdditionalDatanodeResponseProto::New() const {
  return new GetAdditionalDatanodeResponseProto;
}

void GetAdditionalDatanodeResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::Hdfs::Internal::LocatedBlockProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAdditionalDatanodeResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.LocatedBlockProto block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAdditionalDatanodeResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAdditionalDatanodeResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAdditionalDatanodeResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.LocatedBlockProto block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAdditionalDatanodeResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAdditionalDatanodeResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAdditionalDatanodeResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAdditionalDatanodeResponseProto::MergeFrom(const GetAdditionalDatanodeResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::Hdfs::Internal::LocatedBlockProto::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAdditionalDatanodeResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAdditionalDatanodeResponseProto::CopyFrom(const GetAdditionalDatanodeResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAdditionalDatanodeResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  return true;
}

void GetAdditionalDatanodeResponseProto::Swap(GetAdditionalDatanodeResponseProto* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAdditionalDatanodeResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAdditionalDatanodeResponseProto_descriptor_;
  metadata.reflection = GetAdditionalDatanodeResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompleteRequestProto::kSrcFieldNumber;
const int CompleteRequestProto::kClientNameFieldNumber;
const int CompleteRequestProto::kLastFieldNumber;
const int CompleteRequestProto::kFileIdFieldNumber;
#endif  // !_MSC_VER

CompleteRequestProto::CompleteRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompleteRequestProto::InitAsDefaultInstance() {
  last_ = const_cast< ::Hdfs::Internal::ExtendedBlockProto*>(&::Hdfs::Internal::ExtendedBlockProto::default_instance());
}

CompleteRequestProto::CompleteRequestProto(const CompleteRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompleteRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_ = NULL;
  fileid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompleteRequestProto::~CompleteRequestProto() {
  SharedDtor();
}

void CompleteRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
    delete last_;
  }
}

void CompleteRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompleteRequestProto_descriptor_;
}

const CompleteRequestProto& CompleteRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CompleteRequestProto* CompleteRequestProto::default_instance_ = NULL;

CompleteRequestProto* CompleteRequestProto::New() const {
  return new CompleteRequestProto;
}

void CompleteRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
    if (has_last()) {
      if (last_ != NULL) last_->::Hdfs::Internal::ExtendedBlockProto::Clear();
    }
    fileid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompleteRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientName;
        break;
      }

      // required string clientName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_last;
        break;
      }

      // optional .Hdfs.Internal.ExtendedBlockProto last = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_last()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fileId;
        break;
      }

      // optional uint64 fileId = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fileid_)));
          set_has_fileid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompleteRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientname(), output);
  }

  // optional .Hdfs.Internal.ExtendedBlockProto last = 3;
  if (has_last()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->last(), output);
  }

  // optional uint64 fileId = 4 [default = 0];
  if (has_fileid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fileid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompleteRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientname(), target);
  }

  // optional .Hdfs.Internal.ExtendedBlockProto last = 3;
  if (has_last()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->last(), target);
  }

  // optional uint64 fileId = 4 [default = 0];
  if (has_fileid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fileid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompleteRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string clientName = 2;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

    // optional .Hdfs.Internal.ExtendedBlockProto last = 3;
    if (has_last()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->last());
    }

    // optional uint64 fileId = 4 [default = 0];
    if (has_fileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fileid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompleteRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompleteRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompleteRequestProto::MergeFrom(const CompleteRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
    if (from.has_last()) {
      mutable_last()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(from.last());
    }
    if (from.has_fileid()) {
      set_fileid(from.fileid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompleteRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteRequestProto::CopyFrom(const CompleteRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_last()) {
    if (!this->last().IsInitialized()) return false;
  }
  return true;
}

void CompleteRequestProto::Swap(CompleteRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(clientname_, other->clientname_);
    std::swap(last_, other->last_);
    std::swap(fileid_, other->fileid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompleteRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompleteRequestProto_descriptor_;
  metadata.reflection = CompleteRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompleteResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

CompleteResponseProto::CompleteResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompleteResponseProto::InitAsDefaultInstance() {
}

CompleteResponseProto::CompleteResponseProto(const CompleteResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompleteResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompleteResponseProto::~CompleteResponseProto() {
  SharedDtor();
}

void CompleteResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompleteResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompleteResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompleteResponseProto_descriptor_;
}

const CompleteResponseProto& CompleteResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CompleteResponseProto* CompleteResponseProto::default_instance_ = NULL;

CompleteResponseProto* CompleteResponseProto::New() const {
  return new CompleteResponseProto;
}

void CompleteResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompleteResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompleteResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompleteResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompleteResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompleteResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompleteResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompleteResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompleteResponseProto::MergeFrom(const CompleteResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompleteResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteResponseProto::CopyFrom(const CompleteResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CompleteResponseProto::Swap(CompleteResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompleteResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompleteResponseProto_descriptor_;
  metadata.reflection = CompleteResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportBadBlocksRequestProto::kBlocksFieldNumber;
#endif  // !_MSC_VER

ReportBadBlocksRequestProto::ReportBadBlocksRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportBadBlocksRequestProto::InitAsDefaultInstance() {
}

ReportBadBlocksRequestProto::ReportBadBlocksRequestProto(const ReportBadBlocksRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportBadBlocksRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportBadBlocksRequestProto::~ReportBadBlocksRequestProto() {
  SharedDtor();
}

void ReportBadBlocksRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportBadBlocksRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportBadBlocksRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportBadBlocksRequestProto_descriptor_;
}

const ReportBadBlocksRequestProto& ReportBadBlocksRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ReportBadBlocksRequestProto* ReportBadBlocksRequestProto::default_instance_ = NULL;

ReportBadBlocksRequestProto* ReportBadBlocksRequestProto::New() const {
  return new ReportBadBlocksRequestProto;
}

void ReportBadBlocksRequestProto::Clear() {
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportBadBlocksRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportBadBlocksRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blocks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportBadBlocksRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blocks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportBadBlocksRequestProto::ByteSize() const {
  int total_size = 0;

  // repeated .Hdfs.Internal.LocatedBlockProto blocks = 1;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportBadBlocksRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportBadBlocksRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportBadBlocksRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportBadBlocksRequestProto::MergeFrom(const ReportBadBlocksRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportBadBlocksRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBadBlocksRequestProto::CopyFrom(const ReportBadBlocksRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBadBlocksRequestProto::IsInitialized() const {

  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void ReportBadBlocksRequestProto::Swap(ReportBadBlocksRequestProto* other) {
  if (other != this) {
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportBadBlocksRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportBadBlocksRequestProto_descriptor_;
  metadata.reflection = ReportBadBlocksRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReportBadBlocksResponseProto::ReportBadBlocksResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportBadBlocksResponseProto::InitAsDefaultInstance() {
}

ReportBadBlocksResponseProto::ReportBadBlocksResponseProto(const ReportBadBlocksResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportBadBlocksResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportBadBlocksResponseProto::~ReportBadBlocksResponseProto() {
  SharedDtor();
}

void ReportBadBlocksResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportBadBlocksResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportBadBlocksResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportBadBlocksResponseProto_descriptor_;
}

const ReportBadBlocksResponseProto& ReportBadBlocksResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ReportBadBlocksResponseProto* ReportBadBlocksResponseProto::default_instance_ = NULL;

ReportBadBlocksResponseProto* ReportBadBlocksResponseProto::New() const {
  return new ReportBadBlocksResponseProto;
}

void ReportBadBlocksResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportBadBlocksResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReportBadBlocksResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportBadBlocksResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportBadBlocksResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportBadBlocksResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportBadBlocksResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportBadBlocksResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportBadBlocksResponseProto::MergeFrom(const ReportBadBlocksResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportBadBlocksResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportBadBlocksResponseProto::CopyFrom(const ReportBadBlocksResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportBadBlocksResponseProto::IsInitialized() const {

  return true;
}

void ReportBadBlocksResponseProto::Swap(ReportBadBlocksResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportBadBlocksResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportBadBlocksResponseProto_descriptor_;
  metadata.reflection = ReportBadBlocksResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConcatRequestProto::kTrgFieldNumber;
const int ConcatRequestProto::kSrcsFieldNumber;
#endif  // !_MSC_VER

ConcatRequestProto::ConcatRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConcatRequestProto::InitAsDefaultInstance() {
}

ConcatRequestProto::ConcatRequestProto(const ConcatRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConcatRequestProto::SharedCtor() {
  _cached_size_ = 0;
  trg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcatRequestProto::~ConcatRequestProto() {
  SharedDtor();
}

void ConcatRequestProto::SharedDtor() {
  if (trg_ != &::google::protobuf::internal::kEmptyString) {
    delete trg_;
  }
  if (this != default_instance_) {
  }
}

void ConcatRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcatRequestProto_descriptor_;
}

const ConcatRequestProto& ConcatRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ConcatRequestProto* ConcatRequestProto::default_instance_ = NULL;

ConcatRequestProto* ConcatRequestProto::New() const {
  return new ConcatRequestProto;
}

void ConcatRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trg()) {
      if (trg_ != &::google::protobuf::internal::kEmptyString) {
        trg_->clear();
      }
    }
  }
  srcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcatRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string trg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trg().data(), this->trg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_srcs;
        break;
      }

      // repeated string srcs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_srcs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srcs(this->srcs_size() - 1).data(),
            this->srcs(this->srcs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_srcs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConcatRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string trg = 1;
  if (has_trg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trg().data(), this->trg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trg(), output);
  }

  // repeated string srcs = 2;
  for (int i = 0; i < this->srcs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->srcs(i).data(), this->srcs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->srcs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConcatRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string trg = 1;
  if (has_trg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trg().data(), this->trg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trg(), target);
  }

  // repeated string srcs = 2;
  for (int i = 0; i < this->srcs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srcs(i).data(), this->srcs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->srcs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConcatRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string trg = 1;
    if (has_trg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trg());
    }

  }
  // repeated string srcs = 2;
  total_size += 1 * this->srcs_size();
  for (int i = 0; i < this->srcs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->srcs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcatRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcatRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcatRequestProto::MergeFrom(const ConcatRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  srcs_.MergeFrom(from.srcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trg()) {
      set_trg(from.trg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcatRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatRequestProto::CopyFrom(const ConcatRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ConcatRequestProto::Swap(ConcatRequestProto* other) {
  if (other != this) {
    std::swap(trg_, other->trg_);
    srcs_.Swap(&other->srcs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcatRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcatRequestProto_descriptor_;
  metadata.reflection = ConcatRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ConcatResponseProto::ConcatResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConcatResponseProto::InitAsDefaultInstance() {
}

ConcatResponseProto::ConcatResponseProto(const ConcatResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConcatResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConcatResponseProto::~ConcatResponseProto() {
  SharedDtor();
}

void ConcatResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConcatResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConcatResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConcatResponseProto_descriptor_;
}

const ConcatResponseProto& ConcatResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ConcatResponseProto* ConcatResponseProto::default_instance_ = NULL;

ConcatResponseProto* ConcatResponseProto::New() const {
  return new ConcatResponseProto;
}

void ConcatResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConcatResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ConcatResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConcatResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConcatResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConcatResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConcatResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConcatResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConcatResponseProto::MergeFrom(const ConcatResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConcatResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConcatResponseProto::CopyFrom(const ConcatResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConcatResponseProto::IsInitialized() const {

  return true;
}

void ConcatResponseProto::Swap(ConcatResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConcatResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConcatResponseProto_descriptor_;
  metadata.reflection = ConcatResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruncateRequestProto::kSrcFieldNumber;
const int TruncateRequestProto::kNewLengthFieldNumber;
const int TruncateRequestProto::kClientNameFieldNumber;
#endif  // !_MSC_VER

TruncateRequestProto::TruncateRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TruncateRequestProto::InitAsDefaultInstance() {
}

TruncateRequestProto::TruncateRequestProto(const TruncateRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TruncateRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newlength_ = GOOGLE_ULONGLONG(0);
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruncateRequestProto::~TruncateRequestProto() {
  SharedDtor();
}

void TruncateRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
  }
}

void TruncateRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruncateRequestProto_descriptor_;
}

const TruncateRequestProto& TruncateRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

TruncateRequestProto* TruncateRequestProto::default_instance_ = NULL;

TruncateRequestProto* TruncateRequestProto::New() const {
  return new TruncateRequestProto;
}

void TruncateRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    newlength_ = GOOGLE_ULONGLONG(0);
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruncateRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newLength;
        break;
      }

      // required uint64 newLength = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newlength_)));
          set_has_newlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clientName;
        break;
      }

      // required string clientName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TruncateRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required uint64 newLength = 2;
  if (has_newlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->newlength(), output);
  }

  // required string clientName = 3;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->clientname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TruncateRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required uint64 newLength = 2;
  if (has_newlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->newlength(), target);
  }

  // required string clientName = 3;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clientname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TruncateRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required uint64 newLength = 2;
    if (has_newlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newlength());
    }

    // required string clientName = 3;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruncateRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruncateRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruncateRequestProto::MergeFrom(const TruncateRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_newlength()) {
      set_newlength(from.newlength());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruncateRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateRequestProto::CopyFrom(const TruncateRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TruncateRequestProto::Swap(TruncateRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(newlength_, other->newlength_);
    std::swap(clientname_, other->clientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruncateRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruncateRequestProto_descriptor_;
  metadata.reflection = TruncateRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TruncateResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

TruncateResponseProto::TruncateResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TruncateResponseProto::InitAsDefaultInstance() {
}

TruncateResponseProto::TruncateResponseProto(const TruncateResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TruncateResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TruncateResponseProto::~TruncateResponseProto() {
  SharedDtor();
}

void TruncateResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TruncateResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TruncateResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TruncateResponseProto_descriptor_;
}

const TruncateResponseProto& TruncateResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

TruncateResponseProto* TruncateResponseProto::default_instance_ = NULL;

TruncateResponseProto* TruncateResponseProto::New() const {
  return new TruncateResponseProto;
}

void TruncateResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TruncateResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TruncateResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TruncateResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TruncateResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TruncateResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TruncateResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TruncateResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TruncateResponseProto::MergeFrom(const TruncateResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TruncateResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TruncateResponseProto::CopyFrom(const TruncateResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TruncateResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TruncateResponseProto::Swap(TruncateResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TruncateResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TruncateResponseProto_descriptor_;
  metadata.reflection = TruncateResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLeaseRequestProto::kSrcFieldNumber;
const int GetLeaseRequestProto::kClientNameFieldNumber;
#endif  // !_MSC_VER

GetLeaseRequestProto::GetLeaseRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLeaseRequestProto::InitAsDefaultInstance() {
}

GetLeaseRequestProto::GetLeaseRequestProto(const GetLeaseRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLeaseRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLeaseRequestProto::~GetLeaseRequestProto() {
  SharedDtor();
}

void GetLeaseRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
  }
}

void GetLeaseRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLeaseRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLeaseRequestProto_descriptor_;
}

const GetLeaseRequestProto& GetLeaseRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetLeaseRequestProto* GetLeaseRequestProto::default_instance_ = NULL;

GetLeaseRequestProto* GetLeaseRequestProto::New() const {
  return new GetLeaseRequestProto;
}

void GetLeaseRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLeaseRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientName;
        break;
      }

      // required string clientName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLeaseRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLeaseRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLeaseRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string clientName = 2;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLeaseRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLeaseRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLeaseRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLeaseRequestProto::MergeFrom(const GetLeaseRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLeaseRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLeaseRequestProto::CopyFrom(const GetLeaseRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaseRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetLeaseRequestProto::Swap(GetLeaseRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(clientname_, other->clientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLeaseRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLeaseRequestProto_descriptor_;
  metadata.reflection = GetLeaseRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetLeaseResponseProto::GetLeaseResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLeaseResponseProto::InitAsDefaultInstance() {
}

GetLeaseResponseProto::GetLeaseResponseProto(const GetLeaseResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLeaseResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLeaseResponseProto::~GetLeaseResponseProto() {
  SharedDtor();
}

void GetLeaseResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLeaseResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLeaseResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLeaseResponseProto_descriptor_;
}

const GetLeaseResponseProto& GetLeaseResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetLeaseResponseProto* GetLeaseResponseProto::default_instance_ = NULL;

GetLeaseResponseProto* GetLeaseResponseProto::New() const {
  return new GetLeaseResponseProto;
}

void GetLeaseResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLeaseResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetLeaseResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLeaseResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLeaseResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLeaseResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLeaseResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLeaseResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLeaseResponseProto::MergeFrom(const GetLeaseResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLeaseResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLeaseResponseProto::CopyFrom(const GetLeaseResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLeaseResponseProto::IsInitialized() const {

  return true;
}

void GetLeaseResponseProto::Swap(GetLeaseResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLeaseResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLeaseResponseProto_descriptor_;
  metadata.reflection = GetLeaseResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReleaseLeaseRequestProto::kSrcFieldNumber;
const int ReleaseLeaseRequestProto::kClientNameFieldNumber;
#endif  // !_MSC_VER

ReleaseLeaseRequestProto::ReleaseLeaseRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReleaseLeaseRequestProto::InitAsDefaultInstance() {
}

ReleaseLeaseRequestProto::ReleaseLeaseRequestProto(const ReleaseLeaseRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReleaseLeaseRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReleaseLeaseRequestProto::~ReleaseLeaseRequestProto() {
  SharedDtor();
}

void ReleaseLeaseRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
  }
}

void ReleaseLeaseRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseLeaseRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseLeaseRequestProto_descriptor_;
}

const ReleaseLeaseRequestProto& ReleaseLeaseRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ReleaseLeaseRequestProto* ReleaseLeaseRequestProto::default_instance_ = NULL;

ReleaseLeaseRequestProto* ReleaseLeaseRequestProto::New() const {
  return new ReleaseLeaseRequestProto;
}

void ReleaseLeaseRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReleaseLeaseRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientName;
        break;
      }

      // required string clientName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReleaseLeaseRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReleaseLeaseRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReleaseLeaseRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string clientName = 2;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseLeaseRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReleaseLeaseRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReleaseLeaseRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReleaseLeaseRequestProto::MergeFrom(const ReleaseLeaseRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReleaseLeaseRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseLeaseRequestProto::CopyFrom(const ReleaseLeaseRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseLeaseRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReleaseLeaseRequestProto::Swap(ReleaseLeaseRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(clientname_, other->clientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReleaseLeaseRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseLeaseRequestProto_descriptor_;
  metadata.reflection = ReleaseLeaseRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReleaseLeaseResponseProto::ReleaseLeaseResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReleaseLeaseResponseProto::InitAsDefaultInstance() {
}

ReleaseLeaseResponseProto::ReleaseLeaseResponseProto(const ReleaseLeaseResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReleaseLeaseResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReleaseLeaseResponseProto::~ReleaseLeaseResponseProto() {
  SharedDtor();
}

void ReleaseLeaseResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReleaseLeaseResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReleaseLeaseResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReleaseLeaseResponseProto_descriptor_;
}

const ReleaseLeaseResponseProto& ReleaseLeaseResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ReleaseLeaseResponseProto* ReleaseLeaseResponseProto::default_instance_ = NULL;

ReleaseLeaseResponseProto* ReleaseLeaseResponseProto::New() const {
  return new ReleaseLeaseResponseProto;
}

void ReleaseLeaseResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReleaseLeaseResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReleaseLeaseResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReleaseLeaseResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReleaseLeaseResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReleaseLeaseResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReleaseLeaseResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReleaseLeaseResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReleaseLeaseResponseProto::MergeFrom(const ReleaseLeaseResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReleaseLeaseResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReleaseLeaseResponseProto::CopyFrom(const ReleaseLeaseResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseLeaseResponseProto::IsInitialized() const {

  return true;
}

void ReleaseLeaseResponseProto::Swap(ReleaseLeaseResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReleaseLeaseResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReleaseLeaseResponseProto_descriptor_;
  metadata.reflection = ReleaseLeaseResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameRequestProto::kSrcFieldNumber;
const int RenameRequestProto::kDstFieldNumber;
#endif  // !_MSC_VER

RenameRequestProto::RenameRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameRequestProto::InitAsDefaultInstance() {
}

RenameRequestProto::RenameRequestProto(const RenameRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameRequestProto::~RenameRequestProto() {
  SharedDtor();
}

void RenameRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void RenameRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameRequestProto_descriptor_;
}

const RenameRequestProto& RenameRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RenameRequestProto* RenameRequestProto::default_instance_ = NULL;

RenameRequestProto* RenameRequestProto::New() const {
  return new RenameRequestProto;
}

void RenameRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameRequestProto::MergeFrom(const RenameRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameRequestProto::CopyFrom(const RenameRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RenameRequestProto::Swap(RenameRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameRequestProto_descriptor_;
  metadata.reflection = RenameRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

RenameResponseProto::RenameResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameResponseProto::InitAsDefaultInstance() {
}

RenameResponseProto::RenameResponseProto(const RenameResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameResponseProto::~RenameResponseProto() {
  SharedDtor();
}

void RenameResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RenameResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameResponseProto_descriptor_;
}

const RenameResponseProto& RenameResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RenameResponseProto* RenameResponseProto::default_instance_ = NULL;

RenameResponseProto* RenameResponseProto::New() const {
  return new RenameResponseProto;
}

void RenameResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameResponseProto::MergeFrom(const RenameResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameResponseProto::CopyFrom(const RenameResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RenameResponseProto::Swap(RenameResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameResponseProto_descriptor_;
  metadata.reflection = RenameResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rename2RequestProto::kSrcFieldNumber;
const int Rename2RequestProto::kDstFieldNumber;
const int Rename2RequestProto::kOverwriteDestFieldNumber;
#endif  // !_MSC_VER

Rename2RequestProto::Rename2RequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rename2RequestProto::InitAsDefaultInstance() {
}

Rename2RequestProto::Rename2RequestProto(const Rename2RequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rename2RequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  overwritedest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rename2RequestProto::~Rename2RequestProto() {
  SharedDtor();
}

void Rename2RequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void Rename2RequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rename2RequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rename2RequestProto_descriptor_;
}

const Rename2RequestProto& Rename2RequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

Rename2RequestProto* Rename2RequestProto::default_instance_ = NULL;

Rename2RequestProto* Rename2RequestProto::New() const {
  return new Rename2RequestProto;
}

void Rename2RequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
    overwritedest_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rename2RequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_overwriteDest;
        break;
      }

      // required bool overwriteDest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overwriteDest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwritedest_)));
          set_has_overwritedest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rename2RequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }

  // required bool overwriteDest = 3;
  if (has_overwritedest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->overwritedest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rename2RequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  // required bool overwriteDest = 3;
  if (has_overwritedest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->overwritedest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rename2RequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

    // required bool overwriteDest = 3;
    if (has_overwritedest()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rename2RequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rename2RequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rename2RequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rename2RequestProto::MergeFrom(const Rename2RequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_overwritedest()) {
      set_overwritedest(from.overwritedest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rename2RequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rename2RequestProto::CopyFrom(const Rename2RequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rename2RequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Rename2RequestProto::Swap(Rename2RequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(overwritedest_, other->overwritedest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rename2RequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rename2RequestProto_descriptor_;
  metadata.reflection = Rename2RequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Rename2ResponseProto::Rename2ResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rename2ResponseProto::InitAsDefaultInstance() {
}

Rename2ResponseProto::Rename2ResponseProto(const Rename2ResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rename2ResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rename2ResponseProto::~Rename2ResponseProto() {
  SharedDtor();
}

void Rename2ResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rename2ResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rename2ResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rename2ResponseProto_descriptor_;
}

const Rename2ResponseProto& Rename2ResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

Rename2ResponseProto* Rename2ResponseProto::default_instance_ = NULL;

Rename2ResponseProto* Rename2ResponseProto::New() const {
  return new Rename2ResponseProto;
}

void Rename2ResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rename2ResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Rename2ResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rename2ResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rename2ResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rename2ResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rename2ResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rename2ResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rename2ResponseProto::MergeFrom(const Rename2ResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rename2ResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rename2ResponseProto::CopyFrom(const Rename2ResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rename2ResponseProto::IsInitialized() const {

  return true;
}

void Rename2ResponseProto::Swap(Rename2ResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rename2ResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rename2ResponseProto_descriptor_;
  metadata.reflection = Rename2ResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteRequestProto::kSrcFieldNumber;
const int DeleteRequestProto::kRecursiveFieldNumber;
#endif  // !_MSC_VER

DeleteRequestProto::DeleteRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteRequestProto::InitAsDefaultInstance() {
}

DeleteRequestProto::DeleteRequestProto(const DeleteRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recursive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRequestProto::~DeleteRequestProto() {
  SharedDtor();
}

void DeleteRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void DeleteRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRequestProto_descriptor_;
}

const DeleteRequestProto& DeleteRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

DeleteRequestProto* DeleteRequestProto::default_instance_ = NULL;

DeleteRequestProto* DeleteRequestProto::New() const {
  return new DeleteRequestProto;
}

void DeleteRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    recursive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recursive;
        break;
      }

      // required bool recursive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recursive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recursive_)));
          set_has_recursive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required bool recursive = 2;
  if (has_recursive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->recursive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required bool recursive = 2;
  if (has_recursive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->recursive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required bool recursive = 2;
    if (has_recursive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteRequestProto::MergeFrom(const DeleteRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_recursive()) {
      set_recursive(from.recursive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequestProto::CopyFrom(const DeleteRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteRequestProto::Swap(DeleteRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(recursive_, other->recursive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRequestProto_descriptor_;
  metadata.reflection = DeleteRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

DeleteResponseProto::DeleteResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteResponseProto::InitAsDefaultInstance() {
}

DeleteResponseProto::DeleteResponseProto(const DeleteResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteResponseProto::~DeleteResponseProto() {
  SharedDtor();
}

void DeleteResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteResponseProto_descriptor_;
}

const DeleteResponseProto& DeleteResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

DeleteResponseProto* DeleteResponseProto::default_instance_ = NULL;

DeleteResponseProto* DeleteResponseProto::New() const {
  return new DeleteResponseProto;
}

void DeleteResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteResponseProto::MergeFrom(const DeleteResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponseProto::CopyFrom(const DeleteResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteResponseProto::Swap(DeleteResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteResponseProto_descriptor_;
  metadata.reflection = DeleteResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MkdirsRequestProto::kSrcFieldNumber;
const int MkdirsRequestProto::kMaskedFieldNumber;
const int MkdirsRequestProto::kCreateParentFieldNumber;
#endif  // !_MSC_VER

MkdirsRequestProto::MkdirsRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MkdirsRequestProto::InitAsDefaultInstance() {
  masked_ = const_cast< ::Hdfs::Internal::FsPermissionProto*>(&::Hdfs::Internal::FsPermissionProto::default_instance());
}

MkdirsRequestProto::MkdirsRequestProto(const MkdirsRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MkdirsRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  masked_ = NULL;
  createparent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MkdirsRequestProto::~MkdirsRequestProto() {
  SharedDtor();
}

void MkdirsRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
    delete masked_;
  }
}

void MkdirsRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MkdirsRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MkdirsRequestProto_descriptor_;
}

const MkdirsRequestProto& MkdirsRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

MkdirsRequestProto* MkdirsRequestProto::default_instance_ = NULL;

MkdirsRequestProto* MkdirsRequestProto::New() const {
  return new MkdirsRequestProto;
}

void MkdirsRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_masked()) {
      if (masked_ != NULL) masked_->::Hdfs::Internal::FsPermissionProto::Clear();
    }
    createparent_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MkdirsRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masked;
        break;
      }

      // required .Hdfs.Internal.FsPermissionProto masked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masked:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_masked()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_createParent;
        break;
      }

      // required bool createParent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createParent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &createparent_)));
          set_has_createparent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MkdirsRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  if (has_masked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->masked(), output);
  }

  // required bool createParent = 3;
  if (has_createparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->createparent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MkdirsRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required .Hdfs.Internal.FsPermissionProto masked = 2;
  if (has_masked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->masked(), target);
  }

  // required bool createParent = 3;
  if (has_createparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->createparent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MkdirsRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required .Hdfs.Internal.FsPermissionProto masked = 2;
    if (has_masked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->masked());
    }

    // required bool createParent = 3;
    if (has_createparent()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MkdirsRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MkdirsRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MkdirsRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MkdirsRequestProto::MergeFrom(const MkdirsRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_masked()) {
      mutable_masked()->::Hdfs::Internal::FsPermissionProto::MergeFrom(from.masked());
    }
    if (from.has_createparent()) {
      set_createparent(from.createparent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MkdirsRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkdirsRequestProto::CopyFrom(const MkdirsRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirsRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_masked()) {
    if (!this->masked().IsInitialized()) return false;
  }
  return true;
}

void MkdirsRequestProto::Swap(MkdirsRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(masked_, other->masked_);
    std::swap(createparent_, other->createparent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MkdirsRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MkdirsRequestProto_descriptor_;
  metadata.reflection = MkdirsRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MkdirsResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

MkdirsResponseProto::MkdirsResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MkdirsResponseProto::InitAsDefaultInstance() {
}

MkdirsResponseProto::MkdirsResponseProto(const MkdirsResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MkdirsResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MkdirsResponseProto::~MkdirsResponseProto() {
  SharedDtor();
}

void MkdirsResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MkdirsResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MkdirsResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MkdirsResponseProto_descriptor_;
}

const MkdirsResponseProto& MkdirsResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

MkdirsResponseProto* MkdirsResponseProto::default_instance_ = NULL;

MkdirsResponseProto* MkdirsResponseProto::New() const {
  return new MkdirsResponseProto;
}

void MkdirsResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MkdirsResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MkdirsResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MkdirsResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MkdirsResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MkdirsResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MkdirsResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MkdirsResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MkdirsResponseProto::MergeFrom(const MkdirsResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MkdirsResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkdirsResponseProto::CopyFrom(const MkdirsResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MkdirsResponseProto::Swap(MkdirsResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MkdirsResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MkdirsResponseProto_descriptor_;
  metadata.reflection = MkdirsResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetListingRequestProto::kSrcFieldNumber;
const int GetListingRequestProto::kStartAfterFieldNumber;
const int GetListingRequestProto::kNeedLocationFieldNumber;
#endif  // !_MSC_VER

GetListingRequestProto::GetListingRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetListingRequestProto::InitAsDefaultInstance() {
}

GetListingRequestProto::GetListingRequestProto(const GetListingRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetListingRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startafter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  needlocation_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetListingRequestProto::~GetListingRequestProto() {
  SharedDtor();
}

void GetListingRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (startafter_ != &::google::protobuf::internal::kEmptyString) {
    delete startafter_;
  }
  if (this != default_instance_) {
  }
}

void GetListingRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetListingRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetListingRequestProto_descriptor_;
}

const GetListingRequestProto& GetListingRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetListingRequestProto* GetListingRequestProto::default_instance_ = NULL;

GetListingRequestProto* GetListingRequestProto::New() const {
  return new GetListingRequestProto;
}

void GetListingRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_startafter()) {
      if (startafter_ != &::google::protobuf::internal::kEmptyString) {
        startafter_->clear();
      }
    }
    needlocation_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetListingRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_startAfter;
        break;
      }

      // required bytes startAfter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startAfter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_startafter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needLocation;
        break;
      }

      // required bool needLocation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needLocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needlocation_)));
          set_has_needlocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetListingRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required bytes startAfter = 2;
  if (has_startafter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->startafter(), output);
  }

  // required bool needLocation = 3;
  if (has_needlocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needlocation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetListingRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required bytes startAfter = 2;
  if (has_startafter()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->startafter(), target);
  }

  // required bool needLocation = 3;
  if (has_needlocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needlocation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetListingRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required bytes startAfter = 2;
    if (has_startafter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->startafter());
    }

    // required bool needLocation = 3;
    if (has_needlocation()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetListingRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetListingRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetListingRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetListingRequestProto::MergeFrom(const GetListingRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_startafter()) {
      set_startafter(from.startafter());
    }
    if (from.has_needlocation()) {
      set_needlocation(from.needlocation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetListingRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetListingRequestProto::CopyFrom(const GetListingRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListingRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetListingRequestProto::Swap(GetListingRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(startafter_, other->startafter_);
    std::swap(needlocation_, other->needlocation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetListingRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetListingRequestProto_descriptor_;
  metadata.reflection = GetListingRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetListingResponseProto::kDirListFieldNumber;
#endif  // !_MSC_VER

GetListingResponseProto::GetListingResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetListingResponseProto::InitAsDefaultInstance() {
  dirlist_ = const_cast< ::Hdfs::Internal::DirectoryListingProto*>(&::Hdfs::Internal::DirectoryListingProto::default_instance());
}

GetListingResponseProto::GetListingResponseProto(const GetListingResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetListingResponseProto::SharedCtor() {
  _cached_size_ = 0;
  dirlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetListingResponseProto::~GetListingResponseProto() {
  SharedDtor();
}

void GetListingResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete dirlist_;
  }
}

void GetListingResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetListingResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetListingResponseProto_descriptor_;
}

const GetListingResponseProto& GetListingResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetListingResponseProto* GetListingResponseProto::default_instance_ = NULL;

GetListingResponseProto* GetListingResponseProto::New() const {
  return new GetListingResponseProto;
}

void GetListingResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dirlist()) {
      if (dirlist_ != NULL) dirlist_->::Hdfs::Internal::DirectoryListingProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetListingResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dirlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetListingResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
  if (has_dirlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dirlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetListingResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
  if (has_dirlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dirlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetListingResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Hdfs.Internal.DirectoryListingProto dirList = 1;
    if (has_dirlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetListingResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetListingResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetListingResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetListingResponseProto::MergeFrom(const GetListingResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dirlist()) {
      mutable_dirlist()->::Hdfs::Internal::DirectoryListingProto::MergeFrom(from.dirlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetListingResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetListingResponseProto::CopyFrom(const GetListingResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetListingResponseProto::IsInitialized() const {

  if (has_dirlist()) {
    if (!this->dirlist().IsInitialized()) return false;
  }
  return true;
}

void GetListingResponseProto::Swap(GetListingResponseProto* other) {
  if (other != this) {
    std::swap(dirlist_, other->dirlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetListingResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetListingResponseProto_descriptor_;
  metadata.reflection = GetListingResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetSnapshottableDirListingRequestProto::GetSnapshottableDirListingRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSnapshottableDirListingRequestProto::InitAsDefaultInstance() {
}

GetSnapshottableDirListingRequestProto::GetSnapshottableDirListingRequestProto(const GetSnapshottableDirListingRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSnapshottableDirListingRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSnapshottableDirListingRequestProto::~GetSnapshottableDirListingRequestProto() {
  SharedDtor();
}

void GetSnapshottableDirListingRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetSnapshottableDirListingRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSnapshottableDirListingRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSnapshottableDirListingRequestProto_descriptor_;
}

const GetSnapshottableDirListingRequestProto& GetSnapshottableDirListingRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetSnapshottableDirListingRequestProto* GetSnapshottableDirListingRequestProto::default_instance_ = NULL;

GetSnapshottableDirListingRequestProto* GetSnapshottableDirListingRequestProto::New() const {
  return new GetSnapshottableDirListingRequestProto;
}

void GetSnapshottableDirListingRequestProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSnapshottableDirListingRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetSnapshottableDirListingRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSnapshottableDirListingRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSnapshottableDirListingRequestProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSnapshottableDirListingRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSnapshottableDirListingRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSnapshottableDirListingRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSnapshottableDirListingRequestProto::MergeFrom(const GetSnapshottableDirListingRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSnapshottableDirListingRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshottableDirListingRequestProto::CopyFrom(const GetSnapshottableDirListingRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshottableDirListingRequestProto::IsInitialized() const {

  return true;
}

void GetSnapshottableDirListingRequestProto::Swap(GetSnapshottableDirListingRequestProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSnapshottableDirListingRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSnapshottableDirListingRequestProto_descriptor_;
  metadata.reflection = GetSnapshottableDirListingRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSnapshottableDirListingResponseProto::kSnapshottableDirListFieldNumber;
#endif  // !_MSC_VER

GetSnapshottableDirListingResponseProto::GetSnapshottableDirListingResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSnapshottableDirListingResponseProto::InitAsDefaultInstance() {
  snapshottabledirlist_ = const_cast< ::Hdfs::Internal::SnapshottableDirectoryListingProto*>(&::Hdfs::Internal::SnapshottableDirectoryListingProto::default_instance());
}

GetSnapshottableDirListingResponseProto::GetSnapshottableDirListingResponseProto(const GetSnapshottableDirListingResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSnapshottableDirListingResponseProto::SharedCtor() {
  _cached_size_ = 0;
  snapshottabledirlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSnapshottableDirListingResponseProto::~GetSnapshottableDirListingResponseProto() {
  SharedDtor();
}

void GetSnapshottableDirListingResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete snapshottabledirlist_;
  }
}

void GetSnapshottableDirListingResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSnapshottableDirListingResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSnapshottableDirListingResponseProto_descriptor_;
}

const GetSnapshottableDirListingResponseProto& GetSnapshottableDirListingResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetSnapshottableDirListingResponseProto* GetSnapshottableDirListingResponseProto::default_instance_ = NULL;

GetSnapshottableDirListingResponseProto* GetSnapshottableDirListingResponseProto::New() const {
  return new GetSnapshottableDirListingResponseProto;
}

void GetSnapshottableDirListingResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshottabledirlist()) {
      if (snapshottabledirlist_ != NULL) snapshottabledirlist_->::Hdfs::Internal::SnapshottableDirectoryListingProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSnapshottableDirListingResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Hdfs.Internal.SnapshottableDirectoryListingProto snapshottableDirList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_snapshottabledirlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSnapshottableDirListingResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Hdfs.Internal.SnapshottableDirectoryListingProto snapshottableDirList = 1;
  if (has_snapshottabledirlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snapshottabledirlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSnapshottableDirListingResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Hdfs.Internal.SnapshottableDirectoryListingProto snapshottableDirList = 1;
  if (has_snapshottabledirlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->snapshottabledirlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSnapshottableDirListingResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Hdfs.Internal.SnapshottableDirectoryListingProto snapshottableDirList = 1;
    if (has_snapshottabledirlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->snapshottabledirlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSnapshottableDirListingResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSnapshottableDirListingResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSnapshottableDirListingResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSnapshottableDirListingResponseProto::MergeFrom(const GetSnapshottableDirListingResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshottabledirlist()) {
      mutable_snapshottabledirlist()->::Hdfs::Internal::SnapshottableDirectoryListingProto::MergeFrom(from.snapshottabledirlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSnapshottableDirListingResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshottableDirListingResponseProto::CopyFrom(const GetSnapshottableDirListingResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshottableDirListingResponseProto::IsInitialized() const {

  if (has_snapshottabledirlist()) {
    if (!this->snapshottabledirlist().IsInitialized()) return false;
  }
  return true;
}

void GetSnapshottableDirListingResponseProto::Swap(GetSnapshottableDirListingResponseProto* other) {
  if (other != this) {
    std::swap(snapshottabledirlist_, other->snapshottabledirlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSnapshottableDirListingResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSnapshottableDirListingResponseProto_descriptor_;
  metadata.reflection = GetSnapshottableDirListingResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSnapshotDiffReportRequestProto::kSnapshotRootFieldNumber;
const int GetSnapshotDiffReportRequestProto::kFromSnapshotFieldNumber;
const int GetSnapshotDiffReportRequestProto::kToSnapshotFieldNumber;
#endif  // !_MSC_VER

GetSnapshotDiffReportRequestProto::GetSnapshotDiffReportRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSnapshotDiffReportRequestProto::InitAsDefaultInstance() {
}

GetSnapshotDiffReportRequestProto::GetSnapshotDiffReportRequestProto(const GetSnapshotDiffReportRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSnapshotDiffReportRequestProto::SharedCtor() {
  _cached_size_ = 0;
  snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromsnapshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tosnapshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSnapshotDiffReportRequestProto::~GetSnapshotDiffReportRequestProto() {
  SharedDtor();
}

void GetSnapshotDiffReportRequestProto::SharedDtor() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (fromsnapshot_ != &::google::protobuf::internal::kEmptyString) {
    delete fromsnapshot_;
  }
  if (tosnapshot_ != &::google::protobuf::internal::kEmptyString) {
    delete tosnapshot_;
  }
  if (this != default_instance_) {
  }
}

void GetSnapshotDiffReportRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSnapshotDiffReportRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSnapshotDiffReportRequestProto_descriptor_;
}

const GetSnapshotDiffReportRequestProto& GetSnapshotDiffReportRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetSnapshotDiffReportRequestProto* GetSnapshotDiffReportRequestProto::default_instance_ = NULL;

GetSnapshotDiffReportRequestProto* GetSnapshotDiffReportRequestProto::New() const {
  return new GetSnapshotDiffReportRequestProto;
}

void GetSnapshotDiffReportRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshotroot()) {
      if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
        snapshotroot_->clear();
      }
    }
    if (has_fromsnapshot()) {
      if (fromsnapshot_ != &::google::protobuf::internal::kEmptyString) {
        fromsnapshot_->clear();
      }
    }
    if (has_tosnapshot()) {
      if (tosnapshot_ != &::google::protobuf::internal::kEmptyString) {
        tosnapshot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSnapshotDiffReportRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshotRoot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotroot().data(), this->snapshotroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fromSnapshot;
        break;
      }

      // required string fromSnapshot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromSnapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromsnapshot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fromsnapshot().data(), this->fromsnapshot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toSnapshot;
        break;
      }

      // required string toSnapshot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toSnapshot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tosnapshot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tosnapshot().data(), this->tosnapshot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSnapshotDiffReportRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshotroot(), output);
  }

  // required string fromSnapshot = 2;
  if (has_fromsnapshot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromsnapshot().data(), this->fromsnapshot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fromsnapshot(), output);
  }

  // required string toSnapshot = 3;
  if (has_tosnapshot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tosnapshot().data(), this->tosnapshot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tosnapshot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSnapshotDiffReportRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshotroot(), target);
  }

  // required string fromSnapshot = 2;
  if (has_fromsnapshot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fromsnapshot().data(), this->fromsnapshot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromsnapshot(), target);
  }

  // required string toSnapshot = 3;
  if (has_tosnapshot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tosnapshot().data(), this->tosnapshot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tosnapshot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSnapshotDiffReportRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshotRoot = 1;
    if (has_snapshotroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotroot());
    }

    // required string fromSnapshot = 2;
    if (has_fromsnapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromsnapshot());
    }

    // required string toSnapshot = 3;
    if (has_tosnapshot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tosnapshot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSnapshotDiffReportRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSnapshotDiffReportRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSnapshotDiffReportRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSnapshotDiffReportRequestProto::MergeFrom(const GetSnapshotDiffReportRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotroot()) {
      set_snapshotroot(from.snapshotroot());
    }
    if (from.has_fromsnapshot()) {
      set_fromsnapshot(from.fromsnapshot());
    }
    if (from.has_tosnapshot()) {
      set_tosnapshot(from.tosnapshot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSnapshotDiffReportRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotDiffReportRequestProto::CopyFrom(const GetSnapshotDiffReportRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotDiffReportRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetSnapshotDiffReportRequestProto::Swap(GetSnapshotDiffReportRequestProto* other) {
  if (other != this) {
    std::swap(snapshotroot_, other->snapshotroot_);
    std::swap(fromsnapshot_, other->fromsnapshot_);
    std::swap(tosnapshot_, other->tosnapshot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSnapshotDiffReportRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSnapshotDiffReportRequestProto_descriptor_;
  metadata.reflection = GetSnapshotDiffReportRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetSnapshotDiffReportResponseProto::kDiffReportFieldNumber;
#endif  // !_MSC_VER

GetSnapshotDiffReportResponseProto::GetSnapshotDiffReportResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetSnapshotDiffReportResponseProto::InitAsDefaultInstance() {
  diffreport_ = const_cast< ::Hdfs::Internal::SnapshotDiffReportProto*>(&::Hdfs::Internal::SnapshotDiffReportProto::default_instance());
}

GetSnapshotDiffReportResponseProto::GetSnapshotDiffReportResponseProto(const GetSnapshotDiffReportResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetSnapshotDiffReportResponseProto::SharedCtor() {
  _cached_size_ = 0;
  diffreport_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSnapshotDiffReportResponseProto::~GetSnapshotDiffReportResponseProto() {
  SharedDtor();
}

void GetSnapshotDiffReportResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete diffreport_;
  }
}

void GetSnapshotDiffReportResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSnapshotDiffReportResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetSnapshotDiffReportResponseProto_descriptor_;
}

const GetSnapshotDiffReportResponseProto& GetSnapshotDiffReportResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetSnapshotDiffReportResponseProto* GetSnapshotDiffReportResponseProto::default_instance_ = NULL;

GetSnapshotDiffReportResponseProto* GetSnapshotDiffReportResponseProto::New() const {
  return new GetSnapshotDiffReportResponseProto;
}

void GetSnapshotDiffReportResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_diffreport()) {
      if (diffreport_ != NULL) diffreport_->::Hdfs::Internal::SnapshotDiffReportProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetSnapshotDiffReportResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffreport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSnapshotDiffReportResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
  if (has_diffreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->diffreport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetSnapshotDiffReportResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
  if (has_diffreport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->diffreport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetSnapshotDiffReportResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.SnapshotDiffReportProto diffReport = 1;
    if (has_diffreport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diffreport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSnapshotDiffReportResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetSnapshotDiffReportResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetSnapshotDiffReportResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetSnapshotDiffReportResponseProto::MergeFrom(const GetSnapshotDiffReportResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diffreport()) {
      mutable_diffreport()->::Hdfs::Internal::SnapshotDiffReportProto::MergeFrom(from.diffreport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetSnapshotDiffReportResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotDiffReportResponseProto::CopyFrom(const GetSnapshotDiffReportResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotDiffReportResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_diffreport()) {
    if (!this->diffreport().IsInitialized()) return false;
  }
  return true;
}

void GetSnapshotDiffReportResponseProto::Swap(GetSnapshotDiffReportResponseProto* other) {
  if (other != this) {
    std::swap(diffreport_, other->diffreport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetSnapshotDiffReportResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetSnapshotDiffReportResponseProto_descriptor_;
  metadata.reflection = GetSnapshotDiffReportResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenewLeaseRequestProto::kClientNameFieldNumber;
#endif  // !_MSC_VER

RenewLeaseRequestProto::RenewLeaseRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenewLeaseRequestProto::InitAsDefaultInstance() {
}

RenewLeaseRequestProto::RenewLeaseRequestProto(const RenewLeaseRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenewLeaseRequestProto::SharedCtor() {
  _cached_size_ = 0;
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenewLeaseRequestProto::~RenewLeaseRequestProto() {
  SharedDtor();
}

void RenewLeaseRequestProto::SharedDtor() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
  }
}

void RenewLeaseRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenewLeaseRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenewLeaseRequestProto_descriptor_;
}

const RenewLeaseRequestProto& RenewLeaseRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RenewLeaseRequestProto* RenewLeaseRequestProto::default_instance_ = NULL;

RenewLeaseRequestProto* RenewLeaseRequestProto::New() const {
  return new RenewLeaseRequestProto;
}

void RenewLeaseRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenewLeaseRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenewLeaseRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string clientName = 1;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenewLeaseRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string clientName = 1;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenewLeaseRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string clientName = 1;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenewLeaseRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenewLeaseRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenewLeaseRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenewLeaseRequestProto::MergeFrom(const RenewLeaseRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenewLeaseRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewLeaseRequestProto::CopyFrom(const RenewLeaseRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewLeaseRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RenewLeaseRequestProto::Swap(RenewLeaseRequestProto* other) {
  if (other != this) {
    std::swap(clientname_, other->clientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenewLeaseRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenewLeaseRequestProto_descriptor_;
  metadata.reflection = RenewLeaseRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RenewLeaseResponseProto::RenewLeaseResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenewLeaseResponseProto::InitAsDefaultInstance() {
}

RenewLeaseResponseProto::RenewLeaseResponseProto(const RenewLeaseResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenewLeaseResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenewLeaseResponseProto::~RenewLeaseResponseProto() {
  SharedDtor();
}

void RenewLeaseResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RenewLeaseResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenewLeaseResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenewLeaseResponseProto_descriptor_;
}

const RenewLeaseResponseProto& RenewLeaseResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RenewLeaseResponseProto* RenewLeaseResponseProto::default_instance_ = NULL;

RenewLeaseResponseProto* RenewLeaseResponseProto::New() const {
  return new RenewLeaseResponseProto;
}

void RenewLeaseResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenewLeaseResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RenewLeaseResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenewLeaseResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenewLeaseResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenewLeaseResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenewLeaseResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenewLeaseResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenewLeaseResponseProto::MergeFrom(const RenewLeaseResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenewLeaseResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenewLeaseResponseProto::CopyFrom(const RenewLeaseResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenewLeaseResponseProto::IsInitialized() const {

  return true;
}

void RenewLeaseResponseProto::Swap(RenewLeaseResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenewLeaseResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenewLeaseResponseProto_descriptor_;
  metadata.reflection = RenewLeaseResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoverLeaseRequestProto::kSrcFieldNumber;
const int RecoverLeaseRequestProto::kClientNameFieldNumber;
#endif  // !_MSC_VER

RecoverLeaseRequestProto::RecoverLeaseRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverLeaseRequestProto::InitAsDefaultInstance() {
}

RecoverLeaseRequestProto::RecoverLeaseRequestProto(const RecoverLeaseRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverLeaseRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverLeaseRequestProto::~RecoverLeaseRequestProto() {
  SharedDtor();
}

void RecoverLeaseRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
  }
}

void RecoverLeaseRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverLeaseRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverLeaseRequestProto_descriptor_;
}

const RecoverLeaseRequestProto& RecoverLeaseRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RecoverLeaseRequestProto* RecoverLeaseRequestProto::default_instance_ = NULL;

RecoverLeaseRequestProto* RecoverLeaseRequestProto::New() const {
  return new RecoverLeaseRequestProto;
}

void RecoverLeaseRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverLeaseRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientName;
        break;
      }

      // required string clientName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverLeaseRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverLeaseRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverLeaseRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string clientName = 2;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverLeaseRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverLeaseRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverLeaseRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverLeaseRequestProto::MergeFrom(const RecoverLeaseRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverLeaseRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverLeaseRequestProto::CopyFrom(const RecoverLeaseRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverLeaseRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RecoverLeaseRequestProto::Swap(RecoverLeaseRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(clientname_, other->clientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverLeaseRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverLeaseRequestProto_descriptor_;
  metadata.reflection = RecoverLeaseRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoverLeaseResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

RecoverLeaseResponseProto::RecoverLeaseResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverLeaseResponseProto::InitAsDefaultInstance() {
}

RecoverLeaseResponseProto::RecoverLeaseResponseProto(const RecoverLeaseResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverLeaseResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverLeaseResponseProto::~RecoverLeaseResponseProto() {
  SharedDtor();
}

void RecoverLeaseResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverLeaseResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverLeaseResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverLeaseResponseProto_descriptor_;
}

const RecoverLeaseResponseProto& RecoverLeaseResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RecoverLeaseResponseProto* RecoverLeaseResponseProto::default_instance_ = NULL;

RecoverLeaseResponseProto* RecoverLeaseResponseProto::New() const {
  return new RecoverLeaseResponseProto;
}

void RecoverLeaseResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverLeaseResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverLeaseResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverLeaseResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverLeaseResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverLeaseResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverLeaseResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverLeaseResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverLeaseResponseProto::MergeFrom(const RecoverLeaseResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverLeaseResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverLeaseResponseProto::CopyFrom(const RecoverLeaseResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverLeaseResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RecoverLeaseResponseProto::Swap(RecoverLeaseResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverLeaseResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverLeaseResponseProto_descriptor_;
  metadata.reflection = RecoverLeaseResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetFsStatusRequestProto::GetFsStatusRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFsStatusRequestProto::InitAsDefaultInstance() {
}

GetFsStatusRequestProto::GetFsStatusRequestProto(const GetFsStatusRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFsStatusRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFsStatusRequestProto::~GetFsStatusRequestProto() {
  SharedDtor();
}

void GetFsStatusRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFsStatusRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFsStatusRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFsStatusRequestProto_descriptor_;
}

const GetFsStatusRequestProto& GetFsStatusRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetFsStatusRequestProto* GetFsStatusRequestProto::default_instance_ = NULL;

GetFsStatusRequestProto* GetFsStatusRequestProto::New() const {
  return new GetFsStatusRequestProto;
}

void GetFsStatusRequestProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFsStatusRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetFsStatusRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFsStatusRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFsStatusRequestProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFsStatusRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFsStatusRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFsStatusRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFsStatusRequestProto::MergeFrom(const GetFsStatusRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFsStatusRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFsStatusRequestProto::CopyFrom(const GetFsStatusRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFsStatusRequestProto::IsInitialized() const {

  return true;
}

void GetFsStatusRequestProto::Swap(GetFsStatusRequestProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFsStatusRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFsStatusRequestProto_descriptor_;
  metadata.reflection = GetFsStatusRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFsStatsResponseProto::kCapacityFieldNumber;
const int GetFsStatsResponseProto::kUsedFieldNumber;
const int GetFsStatsResponseProto::kRemainingFieldNumber;
const int GetFsStatsResponseProto::kUnderReplicatedFieldNumber;
const int GetFsStatsResponseProto::kCorruptBlocksFieldNumber;
const int GetFsStatsResponseProto::kMissingBlocksFieldNumber;
#endif  // !_MSC_VER

GetFsStatsResponseProto::GetFsStatsResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFsStatsResponseProto::InitAsDefaultInstance() {
}

GetFsStatsResponseProto::GetFsStatsResponseProto(const GetFsStatsResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFsStatsResponseProto::SharedCtor() {
  _cached_size_ = 0;
  capacity_ = GOOGLE_ULONGLONG(0);
  used_ = GOOGLE_ULONGLONG(0);
  remaining_ = GOOGLE_ULONGLONG(0);
  under_replicated_ = GOOGLE_ULONGLONG(0);
  corrupt_blocks_ = GOOGLE_ULONGLONG(0);
  missing_blocks_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFsStatsResponseProto::~GetFsStatsResponseProto() {
  SharedDtor();
}

void GetFsStatsResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFsStatsResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFsStatsResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFsStatsResponseProto_descriptor_;
}

const GetFsStatsResponseProto& GetFsStatsResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetFsStatsResponseProto* GetFsStatsResponseProto::default_instance_ = NULL;

GetFsStatsResponseProto* GetFsStatsResponseProto::New() const {
  return new GetFsStatsResponseProto;
}

void GetFsStatsResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    capacity_ = GOOGLE_ULONGLONG(0);
    used_ = GOOGLE_ULONGLONG(0);
    remaining_ = GOOGLE_ULONGLONG(0);
    under_replicated_ = GOOGLE_ULONGLONG(0);
    corrupt_blocks_ = GOOGLE_ULONGLONG(0);
    missing_blocks_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFsStatsResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 capacity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_used;
        break;
      }

      // required uint64 used = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_)));
          set_has_used();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remaining;
        break;
      }

      // required uint64 remaining = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &remaining_)));
          set_has_remaining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_under_replicated;
        break;
      }

      // required uint64 under_replicated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_under_replicated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &under_replicated_)));
          set_has_under_replicated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_corrupt_blocks;
        break;
      }

      // required uint64 corrupt_blocks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_corrupt_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &corrupt_blocks_)));
          set_has_corrupt_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_missing_blocks;
        break;
      }

      // required uint64 missing_blocks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missing_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &missing_blocks_)));
          set_has_missing_blocks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFsStatsResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 capacity = 1;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->capacity(), output);
  }

  // required uint64 used = 2;
  if (has_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->used(), output);
  }

  // required uint64 remaining = 3;
  if (has_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->remaining(), output);
  }

  // required uint64 under_replicated = 4;
  if (has_under_replicated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->under_replicated(), output);
  }

  // required uint64 corrupt_blocks = 5;
  if (has_corrupt_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->corrupt_blocks(), output);
  }

  // required uint64 missing_blocks = 6;
  if (has_missing_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->missing_blocks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFsStatsResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 capacity = 1;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->capacity(), target);
  }

  // required uint64 used = 2;
  if (has_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->used(), target);
  }

  // required uint64 remaining = 3;
  if (has_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->remaining(), target);
  }

  // required uint64 under_replicated = 4;
  if (has_under_replicated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->under_replicated(), target);
  }

  // required uint64 corrupt_blocks = 5;
  if (has_corrupt_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->corrupt_blocks(), target);
  }

  // required uint64 missing_blocks = 6;
  if (has_missing_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->missing_blocks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFsStatsResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 capacity = 1;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->capacity());
    }

    // required uint64 used = 2;
    if (has_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->used());
    }

    // required uint64 remaining = 3;
    if (has_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->remaining());
    }

    // required uint64 under_replicated = 4;
    if (has_under_replicated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->under_replicated());
    }

    // required uint64 corrupt_blocks = 5;
    if (has_corrupt_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->corrupt_blocks());
    }

    // required uint64 missing_blocks = 6;
    if (has_missing_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->missing_blocks());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFsStatsResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFsStatsResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFsStatsResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFsStatsResponseProto::MergeFrom(const GetFsStatsResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_used()) {
      set_used(from.used());
    }
    if (from.has_remaining()) {
      set_remaining(from.remaining());
    }
    if (from.has_under_replicated()) {
      set_under_replicated(from.under_replicated());
    }
    if (from.has_corrupt_blocks()) {
      set_corrupt_blocks(from.corrupt_blocks());
    }
    if (from.has_missing_blocks()) {
      set_missing_blocks(from.missing_blocks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFsStatsResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFsStatsResponseProto::CopyFrom(const GetFsStatsResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFsStatsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GetFsStatsResponseProto::Swap(GetFsStatsResponseProto* other) {
  if (other != this) {
    std::swap(capacity_, other->capacity_);
    std::swap(used_, other->used_);
    std::swap(remaining_, other->remaining_);
    std::swap(under_replicated_, other->under_replicated_);
    std::swap(corrupt_blocks_, other->corrupt_blocks_);
    std::swap(missing_blocks_, other->missing_blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFsStatsResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFsStatsResponseProto_descriptor_;
  metadata.reflection = GetFsStatsResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatanodeReportRequestProto::kTypeFieldNumber;
#endif  // !_MSC_VER

GetDatanodeReportRequestProto::GetDatanodeReportRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatanodeReportRequestProto::InitAsDefaultInstance() {
}

GetDatanodeReportRequestProto::GetDatanodeReportRequestProto(const GetDatanodeReportRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatanodeReportRequestProto::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatanodeReportRequestProto::~GetDatanodeReportRequestProto() {
  SharedDtor();
}

void GetDatanodeReportRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDatanodeReportRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatanodeReportRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatanodeReportRequestProto_descriptor_;
}

const GetDatanodeReportRequestProto& GetDatanodeReportRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetDatanodeReportRequestProto* GetDatanodeReportRequestProto::default_instance_ = NULL;

GetDatanodeReportRequestProto* GetDatanodeReportRequestProto::New() const {
  return new GetDatanodeReportRequestProto;
}

void GetDatanodeReportRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatanodeReportRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Hdfs::Internal::DatanodeReportTypeProto_IsValid(value)) {
            set_type(static_cast< ::Hdfs::Internal::DatanodeReportTypeProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatanodeReportRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatanodeReportRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatanodeReportRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.DatanodeReportTypeProto type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatanodeReportRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatanodeReportRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatanodeReportRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatanodeReportRequestProto::MergeFrom(const GetDatanodeReportRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatanodeReportRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatanodeReportRequestProto::CopyFrom(const GetDatanodeReportRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatanodeReportRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetDatanodeReportRequestProto::Swap(GetDatanodeReportRequestProto* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatanodeReportRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatanodeReportRequestProto_descriptor_;
  metadata.reflection = GetDatanodeReportRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDatanodeReportResponseProto::kDiFieldNumber;
#endif  // !_MSC_VER

GetDatanodeReportResponseProto::GetDatanodeReportResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDatanodeReportResponseProto::InitAsDefaultInstance() {
}

GetDatanodeReportResponseProto::GetDatanodeReportResponseProto(const GetDatanodeReportResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDatanodeReportResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDatanodeReportResponseProto::~GetDatanodeReportResponseProto() {
  SharedDtor();
}

void GetDatanodeReportResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDatanodeReportResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDatanodeReportResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDatanodeReportResponseProto_descriptor_;
}

const GetDatanodeReportResponseProto& GetDatanodeReportResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetDatanodeReportResponseProto* GetDatanodeReportResponseProto::default_instance_ = NULL;

GetDatanodeReportResponseProto* GetDatanodeReportResponseProto::New() const {
  return new GetDatanodeReportResponseProto;
}

void GetDatanodeReportResponseProto::Clear() {
  di_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDatanodeReportResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_di:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_di()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_di;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDatanodeReportResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
  for (int i = 0; i < this->di_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->di(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDatanodeReportResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
  for (int i = 0; i < this->di_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->di(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDatanodeReportResponseProto::ByteSize() const {
  int total_size = 0;

  // repeated .Hdfs.Internal.DatanodeInfoProto di = 1;
  total_size += 1 * this->di_size();
  for (int i = 0; i < this->di_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->di(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDatanodeReportResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDatanodeReportResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDatanodeReportResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDatanodeReportResponseProto::MergeFrom(const GetDatanodeReportResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  di_.MergeFrom(from.di_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDatanodeReportResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatanodeReportResponseProto::CopyFrom(const GetDatanodeReportResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatanodeReportResponseProto::IsInitialized() const {

  for (int i = 0; i < di_size(); i++) {
    if (!this->di(i).IsInitialized()) return false;
  }
  return true;
}

void GetDatanodeReportResponseProto::Swap(GetDatanodeReportResponseProto* other) {
  if (other != this) {
    di_.Swap(&other->di_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDatanodeReportResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDatanodeReportResponseProto_descriptor_;
  metadata.reflection = GetDatanodeReportResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPreferredBlockSizeRequestProto::kFilenameFieldNumber;
#endif  // !_MSC_VER

GetPreferredBlockSizeRequestProto::GetPreferredBlockSizeRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPreferredBlockSizeRequestProto::InitAsDefaultInstance() {
}

GetPreferredBlockSizeRequestProto::GetPreferredBlockSizeRequestProto(const GetPreferredBlockSizeRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPreferredBlockSizeRequestProto::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPreferredBlockSizeRequestProto::~GetPreferredBlockSizeRequestProto() {
  SharedDtor();
}

void GetPreferredBlockSizeRequestProto::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void GetPreferredBlockSizeRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPreferredBlockSizeRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPreferredBlockSizeRequestProto_descriptor_;
}

const GetPreferredBlockSizeRequestProto& GetPreferredBlockSizeRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetPreferredBlockSizeRequestProto* GetPreferredBlockSizeRequestProto::default_instance_ = NULL;

GetPreferredBlockSizeRequestProto* GetPreferredBlockSizeRequestProto::New() const {
  return new GetPreferredBlockSizeRequestProto;
}

void GetPreferredBlockSizeRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPreferredBlockSizeRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPreferredBlockSizeRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPreferredBlockSizeRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPreferredBlockSizeRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPreferredBlockSizeRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPreferredBlockSizeRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPreferredBlockSizeRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPreferredBlockSizeRequestProto::MergeFrom(const GetPreferredBlockSizeRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPreferredBlockSizeRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPreferredBlockSizeRequestProto::CopyFrom(const GetPreferredBlockSizeRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPreferredBlockSizeRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetPreferredBlockSizeRequestProto::Swap(GetPreferredBlockSizeRequestProto* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPreferredBlockSizeRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPreferredBlockSizeRequestProto_descriptor_;
  metadata.reflection = GetPreferredBlockSizeRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetPreferredBlockSizeResponseProto::kBsizeFieldNumber;
#endif  // !_MSC_VER

GetPreferredBlockSizeResponseProto::GetPreferredBlockSizeResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetPreferredBlockSizeResponseProto::InitAsDefaultInstance() {
}

GetPreferredBlockSizeResponseProto::GetPreferredBlockSizeResponseProto(const GetPreferredBlockSizeResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetPreferredBlockSizeResponseProto::SharedCtor() {
  _cached_size_ = 0;
  bsize_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetPreferredBlockSizeResponseProto::~GetPreferredBlockSizeResponseProto() {
  SharedDtor();
}

void GetPreferredBlockSizeResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetPreferredBlockSizeResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetPreferredBlockSizeResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetPreferredBlockSizeResponseProto_descriptor_;
}

const GetPreferredBlockSizeResponseProto& GetPreferredBlockSizeResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetPreferredBlockSizeResponseProto* GetPreferredBlockSizeResponseProto::default_instance_ = NULL;

GetPreferredBlockSizeResponseProto* GetPreferredBlockSizeResponseProto::New() const {
  return new GetPreferredBlockSizeResponseProto;
}

void GetPreferredBlockSizeResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bsize_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetPreferredBlockSizeResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 bsize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bsize_)));
          set_has_bsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetPreferredBlockSizeResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 bsize = 1;
  if (has_bsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetPreferredBlockSizeResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 bsize = 1;
  if (has_bsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->bsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetPreferredBlockSizeResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 bsize = 1;
    if (has_bsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetPreferredBlockSizeResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetPreferredBlockSizeResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetPreferredBlockSizeResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetPreferredBlockSizeResponseProto::MergeFrom(const GetPreferredBlockSizeResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bsize()) {
      set_bsize(from.bsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetPreferredBlockSizeResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPreferredBlockSizeResponseProto::CopyFrom(const GetPreferredBlockSizeResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPreferredBlockSizeResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetPreferredBlockSizeResponseProto::Swap(GetPreferredBlockSizeResponseProto* other) {
  if (other != this) {
    std::swap(bsize_, other->bsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetPreferredBlockSizeResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetPreferredBlockSizeResponseProto_descriptor_;
  metadata.reflection = GetPreferredBlockSizeResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSafeModeRequestProto::kActionFieldNumber;
const int SetSafeModeRequestProto::kCheckedFieldNumber;
#endif  // !_MSC_VER

SetSafeModeRequestProto::SetSafeModeRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSafeModeRequestProto::InitAsDefaultInstance() {
}

SetSafeModeRequestProto::SetSafeModeRequestProto(const SetSafeModeRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSafeModeRequestProto::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  checked_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSafeModeRequestProto::~SetSafeModeRequestProto() {
  SharedDtor();
}

void SetSafeModeRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetSafeModeRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSafeModeRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSafeModeRequestProto_descriptor_;
}

const SetSafeModeRequestProto& SetSafeModeRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetSafeModeRequestProto* SetSafeModeRequestProto::default_instance_ = NULL;

SetSafeModeRequestProto* SetSafeModeRequestProto::New() const {
  return new SetSafeModeRequestProto;
}

void SetSafeModeRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 1;
    checked_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSafeModeRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.SafeModeActionProto action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Hdfs::Internal::SafeModeActionProto_IsValid(value)) {
            set_action(static_cast< ::Hdfs::Internal::SafeModeActionProto >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_checked;
        break;
      }

      // optional bool checked = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_checked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checked_)));
          set_has_checked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSafeModeRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.SafeModeActionProto action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional bool checked = 2 [default = false];
  if (has_checked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->checked(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSafeModeRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.SafeModeActionProto action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional bool checked = 2 [default = false];
  if (has_checked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->checked(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSafeModeRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.SafeModeActionProto action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional bool checked = 2 [default = false];
    if (has_checked()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSafeModeRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSafeModeRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSafeModeRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSafeModeRequestProto::MergeFrom(const SetSafeModeRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_checked()) {
      set_checked(from.checked());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSafeModeRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSafeModeRequestProto::CopyFrom(const SetSafeModeRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSafeModeRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetSafeModeRequestProto::Swap(SetSafeModeRequestProto* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(checked_, other->checked_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSafeModeRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSafeModeRequestProto_descriptor_;
  metadata.reflection = SetSafeModeRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetSafeModeResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

SetSafeModeResponseProto::SetSafeModeResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetSafeModeResponseProto::InitAsDefaultInstance() {
}

SetSafeModeResponseProto::SetSafeModeResponseProto(const SetSafeModeResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetSafeModeResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetSafeModeResponseProto::~SetSafeModeResponseProto() {
  SharedDtor();
}

void SetSafeModeResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetSafeModeResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSafeModeResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetSafeModeResponseProto_descriptor_;
}

const SetSafeModeResponseProto& SetSafeModeResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetSafeModeResponseProto* SetSafeModeResponseProto::default_instance_ = NULL;

SetSafeModeResponseProto* SetSafeModeResponseProto::New() const {
  return new SetSafeModeResponseProto;
}

void SetSafeModeResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetSafeModeResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetSafeModeResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetSafeModeResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetSafeModeResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSafeModeResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetSafeModeResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetSafeModeResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetSafeModeResponseProto::MergeFrom(const SetSafeModeResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetSafeModeResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSafeModeResponseProto::CopyFrom(const SetSafeModeResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSafeModeResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetSafeModeResponseProto::Swap(SetSafeModeResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetSafeModeResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetSafeModeResponseProto_descriptor_;
  metadata.reflection = SetSafeModeResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SaveNamespaceRequestProto::SaveNamespaceRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveNamespaceRequestProto::InitAsDefaultInstance() {
}

SaveNamespaceRequestProto::SaveNamespaceRequestProto(const SaveNamespaceRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveNamespaceRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveNamespaceRequestProto::~SaveNamespaceRequestProto() {
  SharedDtor();
}

void SaveNamespaceRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveNamespaceRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveNamespaceRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveNamespaceRequestProto_descriptor_;
}

const SaveNamespaceRequestProto& SaveNamespaceRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SaveNamespaceRequestProto* SaveNamespaceRequestProto::default_instance_ = NULL;

SaveNamespaceRequestProto* SaveNamespaceRequestProto::New() const {
  return new SaveNamespaceRequestProto;
}

void SaveNamespaceRequestProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveNamespaceRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SaveNamespaceRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveNamespaceRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveNamespaceRequestProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveNamespaceRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveNamespaceRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveNamespaceRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveNamespaceRequestProto::MergeFrom(const SaveNamespaceRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveNamespaceRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveNamespaceRequestProto::CopyFrom(const SaveNamespaceRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveNamespaceRequestProto::IsInitialized() const {

  return true;
}

void SaveNamespaceRequestProto::Swap(SaveNamespaceRequestProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveNamespaceRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveNamespaceRequestProto_descriptor_;
  metadata.reflection = SaveNamespaceRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SaveNamespaceResponseProto::SaveNamespaceResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveNamespaceResponseProto::InitAsDefaultInstance() {
}

SaveNamespaceResponseProto::SaveNamespaceResponseProto(const SaveNamespaceResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveNamespaceResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveNamespaceResponseProto::~SaveNamespaceResponseProto() {
  SharedDtor();
}

void SaveNamespaceResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveNamespaceResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveNamespaceResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveNamespaceResponseProto_descriptor_;
}

const SaveNamespaceResponseProto& SaveNamespaceResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SaveNamespaceResponseProto* SaveNamespaceResponseProto::default_instance_ = NULL;

SaveNamespaceResponseProto* SaveNamespaceResponseProto::New() const {
  return new SaveNamespaceResponseProto;
}

void SaveNamespaceResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveNamespaceResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SaveNamespaceResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveNamespaceResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveNamespaceResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveNamespaceResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveNamespaceResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveNamespaceResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveNamespaceResponseProto::MergeFrom(const SaveNamespaceResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveNamespaceResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveNamespaceResponseProto::CopyFrom(const SaveNamespaceResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveNamespaceResponseProto::IsInitialized() const {

  return true;
}

void SaveNamespaceResponseProto::Swap(SaveNamespaceResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveNamespaceResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveNamespaceResponseProto_descriptor_;
  metadata.reflection = SaveNamespaceResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RollEditsRequestProto::RollEditsRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RollEditsRequestProto::InitAsDefaultInstance() {
}

RollEditsRequestProto::RollEditsRequestProto(const RollEditsRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RollEditsRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollEditsRequestProto::~RollEditsRequestProto() {
  SharedDtor();
}

void RollEditsRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RollEditsRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollEditsRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollEditsRequestProto_descriptor_;
}

const RollEditsRequestProto& RollEditsRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RollEditsRequestProto* RollEditsRequestProto::default_instance_ = NULL;

RollEditsRequestProto* RollEditsRequestProto::New() const {
  return new RollEditsRequestProto;
}

void RollEditsRequestProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RollEditsRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RollEditsRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RollEditsRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RollEditsRequestProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollEditsRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RollEditsRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RollEditsRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RollEditsRequestProto::MergeFrom(const RollEditsRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RollEditsRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollEditsRequestProto::CopyFrom(const RollEditsRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollEditsRequestProto::IsInitialized() const {

  return true;
}

void RollEditsRequestProto::Swap(RollEditsRequestProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RollEditsRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollEditsRequestProto_descriptor_;
  metadata.reflection = RollEditsRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RollEditsResponseProto::kNewSegmentTxIdFieldNumber;
#endif  // !_MSC_VER

RollEditsResponseProto::RollEditsResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RollEditsResponseProto::InitAsDefaultInstance() {
}

RollEditsResponseProto::RollEditsResponseProto(const RollEditsResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RollEditsResponseProto::SharedCtor() {
  _cached_size_ = 0;
  newsegmenttxid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollEditsResponseProto::~RollEditsResponseProto() {
  SharedDtor();
}

void RollEditsResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RollEditsResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollEditsResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollEditsResponseProto_descriptor_;
}

const RollEditsResponseProto& RollEditsResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RollEditsResponseProto* RollEditsResponseProto::default_instance_ = NULL;

RollEditsResponseProto* RollEditsResponseProto::New() const {
  return new RollEditsResponseProto;
}

void RollEditsResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newsegmenttxid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RollEditsResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 newSegmentTxId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newsegmenttxid_)));
          set_has_newsegmenttxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RollEditsResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 newSegmentTxId = 1;
  if (has_newsegmenttxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->newsegmenttxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RollEditsResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 newSegmentTxId = 1;
  if (has_newsegmenttxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->newsegmenttxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RollEditsResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 newSegmentTxId = 1;
    if (has_newsegmenttxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newsegmenttxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollEditsResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RollEditsResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RollEditsResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RollEditsResponseProto::MergeFrom(const RollEditsResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newsegmenttxid()) {
      set_newsegmenttxid(from.newsegmenttxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RollEditsResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollEditsResponseProto::CopyFrom(const RollEditsResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollEditsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RollEditsResponseProto::Swap(RollEditsResponseProto* other) {
  if (other != this) {
    std::swap(newsegmenttxid_, other->newsegmenttxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RollEditsResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollEditsResponseProto_descriptor_;
  metadata.reflection = RollEditsResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestoreFailedStorageRequestProto::kArgFieldNumber;
#endif  // !_MSC_VER

RestoreFailedStorageRequestProto::RestoreFailedStorageRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RestoreFailedStorageRequestProto::InitAsDefaultInstance() {
}

RestoreFailedStorageRequestProto::RestoreFailedStorageRequestProto(const RestoreFailedStorageRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RestoreFailedStorageRequestProto::SharedCtor() {
  _cached_size_ = 0;
  arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestoreFailedStorageRequestProto::~RestoreFailedStorageRequestProto() {
  SharedDtor();
}

void RestoreFailedStorageRequestProto::SharedDtor() {
  if (arg_ != &::google::protobuf::internal::kEmptyString) {
    delete arg_;
  }
  if (this != default_instance_) {
  }
}

void RestoreFailedStorageRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreFailedStorageRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestoreFailedStorageRequestProto_descriptor_;
}

const RestoreFailedStorageRequestProto& RestoreFailedStorageRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RestoreFailedStorageRequestProto* RestoreFailedStorageRequestProto::default_instance_ = NULL;

RestoreFailedStorageRequestProto* RestoreFailedStorageRequestProto::New() const {
  return new RestoreFailedStorageRequestProto;
}

void RestoreFailedStorageRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_arg()) {
      if (arg_ != &::google::protobuf::internal::kEmptyString) {
        arg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestoreFailedStorageRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string arg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->arg().data(), this->arg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RestoreFailedStorageRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string arg = 1;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arg().data(), this->arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->arg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RestoreFailedStorageRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string arg = 1;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->arg().data(), this->arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->arg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RestoreFailedStorageRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string arg = 1;
    if (has_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreFailedStorageRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestoreFailedStorageRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestoreFailedStorageRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestoreFailedStorageRequestProto::MergeFrom(const RestoreFailedStorageRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arg()) {
      set_arg(from.arg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestoreFailedStorageRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreFailedStorageRequestProto::CopyFrom(const RestoreFailedStorageRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreFailedStorageRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RestoreFailedStorageRequestProto::Swap(RestoreFailedStorageRequestProto* other) {
  if (other != this) {
    std::swap(arg_, other->arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestoreFailedStorageRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestoreFailedStorageRequestProto_descriptor_;
  metadata.reflection = RestoreFailedStorageRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RestoreFailedStorageResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

RestoreFailedStorageResponseProto::RestoreFailedStorageResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RestoreFailedStorageResponseProto::InitAsDefaultInstance() {
}

RestoreFailedStorageResponseProto::RestoreFailedStorageResponseProto(const RestoreFailedStorageResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RestoreFailedStorageResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RestoreFailedStorageResponseProto::~RestoreFailedStorageResponseProto() {
  SharedDtor();
}

void RestoreFailedStorageResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RestoreFailedStorageResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestoreFailedStorageResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestoreFailedStorageResponseProto_descriptor_;
}

const RestoreFailedStorageResponseProto& RestoreFailedStorageResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RestoreFailedStorageResponseProto* RestoreFailedStorageResponseProto::default_instance_ = NULL;

RestoreFailedStorageResponseProto* RestoreFailedStorageResponseProto::New() const {
  return new RestoreFailedStorageResponseProto;
}

void RestoreFailedStorageResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RestoreFailedStorageResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RestoreFailedStorageResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RestoreFailedStorageResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RestoreFailedStorageResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestoreFailedStorageResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RestoreFailedStorageResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RestoreFailedStorageResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RestoreFailedStorageResponseProto::MergeFrom(const RestoreFailedStorageResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RestoreFailedStorageResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreFailedStorageResponseProto::CopyFrom(const RestoreFailedStorageResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreFailedStorageResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RestoreFailedStorageResponseProto::Swap(RestoreFailedStorageResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RestoreFailedStorageResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RestoreFailedStorageResponseProto_descriptor_;
  metadata.reflection = RestoreFailedStorageResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RefreshNodesRequestProto::RefreshNodesRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshNodesRequestProto::InitAsDefaultInstance() {
}

RefreshNodesRequestProto::RefreshNodesRequestProto(const RefreshNodesRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshNodesRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshNodesRequestProto::~RefreshNodesRequestProto() {
  SharedDtor();
}

void RefreshNodesRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshNodesRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshNodesRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshNodesRequestProto_descriptor_;
}

const RefreshNodesRequestProto& RefreshNodesRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RefreshNodesRequestProto* RefreshNodesRequestProto::default_instance_ = NULL;

RefreshNodesRequestProto* RefreshNodesRequestProto::New() const {
  return new RefreshNodesRequestProto;
}

void RefreshNodesRequestProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshNodesRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RefreshNodesRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshNodesRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshNodesRequestProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshNodesRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshNodesRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshNodesRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshNodesRequestProto::MergeFrom(const RefreshNodesRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshNodesRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshNodesRequestProto::CopyFrom(const RefreshNodesRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshNodesRequestProto::IsInitialized() const {

  return true;
}

void RefreshNodesRequestProto::Swap(RefreshNodesRequestProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshNodesRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshNodesRequestProto_descriptor_;
  metadata.reflection = RefreshNodesRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RefreshNodesResponseProto::RefreshNodesResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefreshNodesResponseProto::InitAsDefaultInstance() {
}

RefreshNodesResponseProto::RefreshNodesResponseProto(const RefreshNodesResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefreshNodesResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshNodesResponseProto::~RefreshNodesResponseProto() {
  SharedDtor();
}

void RefreshNodesResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefreshNodesResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshNodesResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshNodesResponseProto_descriptor_;
}

const RefreshNodesResponseProto& RefreshNodesResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RefreshNodesResponseProto* RefreshNodesResponseProto::default_instance_ = NULL;

RefreshNodesResponseProto* RefreshNodesResponseProto::New() const {
  return new RefreshNodesResponseProto;
}

void RefreshNodesResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshNodesResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RefreshNodesResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefreshNodesResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefreshNodesResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshNodesResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshNodesResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshNodesResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshNodesResponseProto::MergeFrom(const RefreshNodesResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshNodesResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshNodesResponseProto::CopyFrom(const RefreshNodesResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshNodesResponseProto::IsInitialized() const {

  return true;
}

void RefreshNodesResponseProto::Swap(RefreshNodesResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshNodesResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshNodesResponseProto_descriptor_;
  metadata.reflection = RefreshNodesResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FinalizeUpgradeRequestProto::FinalizeUpgradeRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinalizeUpgradeRequestProto::InitAsDefaultInstance() {
}

FinalizeUpgradeRequestProto::FinalizeUpgradeRequestProto(const FinalizeUpgradeRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinalizeUpgradeRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinalizeUpgradeRequestProto::~FinalizeUpgradeRequestProto() {
  SharedDtor();
}

void FinalizeUpgradeRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinalizeUpgradeRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinalizeUpgradeRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalizeUpgradeRequestProto_descriptor_;
}

const FinalizeUpgradeRequestProto& FinalizeUpgradeRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

FinalizeUpgradeRequestProto* FinalizeUpgradeRequestProto::default_instance_ = NULL;

FinalizeUpgradeRequestProto* FinalizeUpgradeRequestProto::New() const {
  return new FinalizeUpgradeRequestProto;
}

void FinalizeUpgradeRequestProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinalizeUpgradeRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FinalizeUpgradeRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinalizeUpgradeRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinalizeUpgradeRequestProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinalizeUpgradeRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinalizeUpgradeRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinalizeUpgradeRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinalizeUpgradeRequestProto::MergeFrom(const FinalizeUpgradeRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinalizeUpgradeRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalizeUpgradeRequestProto::CopyFrom(const FinalizeUpgradeRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeUpgradeRequestProto::IsInitialized() const {

  return true;
}

void FinalizeUpgradeRequestProto::Swap(FinalizeUpgradeRequestProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinalizeUpgradeRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinalizeUpgradeRequestProto_descriptor_;
  metadata.reflection = FinalizeUpgradeRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FinalizeUpgradeResponseProto::FinalizeUpgradeResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinalizeUpgradeResponseProto::InitAsDefaultInstance() {
}

FinalizeUpgradeResponseProto::FinalizeUpgradeResponseProto(const FinalizeUpgradeResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinalizeUpgradeResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinalizeUpgradeResponseProto::~FinalizeUpgradeResponseProto() {
  SharedDtor();
}

void FinalizeUpgradeResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinalizeUpgradeResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinalizeUpgradeResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalizeUpgradeResponseProto_descriptor_;
}

const FinalizeUpgradeResponseProto& FinalizeUpgradeResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

FinalizeUpgradeResponseProto* FinalizeUpgradeResponseProto::default_instance_ = NULL;

FinalizeUpgradeResponseProto* FinalizeUpgradeResponseProto::New() const {
  return new FinalizeUpgradeResponseProto;
}

void FinalizeUpgradeResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinalizeUpgradeResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FinalizeUpgradeResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinalizeUpgradeResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinalizeUpgradeResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinalizeUpgradeResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinalizeUpgradeResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinalizeUpgradeResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinalizeUpgradeResponseProto::MergeFrom(const FinalizeUpgradeResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinalizeUpgradeResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalizeUpgradeResponseProto::CopyFrom(const FinalizeUpgradeResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalizeUpgradeResponseProto::IsInitialized() const {

  return true;
}

void FinalizeUpgradeResponseProto::Swap(FinalizeUpgradeResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinalizeUpgradeResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinalizeUpgradeResponseProto_descriptor_;
  metadata.reflection = FinalizeUpgradeResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListCorruptFileBlocksRequestProto::kPathFieldNumber;
const int ListCorruptFileBlocksRequestProto::kCookieFieldNumber;
#endif  // !_MSC_VER

ListCorruptFileBlocksRequestProto::ListCorruptFileBlocksRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListCorruptFileBlocksRequestProto::InitAsDefaultInstance() {
}

ListCorruptFileBlocksRequestProto::ListCorruptFileBlocksRequestProto(const ListCorruptFileBlocksRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListCorruptFileBlocksRequestProto::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListCorruptFileBlocksRequestProto::~ListCorruptFileBlocksRequestProto() {
  SharedDtor();
}

void ListCorruptFileBlocksRequestProto::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (cookie_ != &::google::protobuf::internal::kEmptyString) {
    delete cookie_;
  }
  if (this != default_instance_) {
  }
}

void ListCorruptFileBlocksRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCorruptFileBlocksRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListCorruptFileBlocksRequestProto_descriptor_;
}

const ListCorruptFileBlocksRequestProto& ListCorruptFileBlocksRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ListCorruptFileBlocksRequestProto* ListCorruptFileBlocksRequestProto::default_instance_ = NULL;

ListCorruptFileBlocksRequestProto* ListCorruptFileBlocksRequestProto::New() const {
  return new ListCorruptFileBlocksRequestProto;
}

void ListCorruptFileBlocksRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::kEmptyString) {
        cookie_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListCorruptFileBlocksRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cookie;
        break;
      }

      // optional string cookie = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cookie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cookie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cookie().data(), this->cookie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListCorruptFileBlocksRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // optional string cookie = 2;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cookie(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListCorruptFileBlocksRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string cookie = 2;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cookie().data(), this->cookie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cookie(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListCorruptFileBlocksRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string cookie = 2;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cookie());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCorruptFileBlocksRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListCorruptFileBlocksRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListCorruptFileBlocksRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListCorruptFileBlocksRequestProto::MergeFrom(const ListCorruptFileBlocksRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListCorruptFileBlocksRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCorruptFileBlocksRequestProto::CopyFrom(const ListCorruptFileBlocksRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCorruptFileBlocksRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ListCorruptFileBlocksRequestProto::Swap(ListCorruptFileBlocksRequestProto* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(cookie_, other->cookie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListCorruptFileBlocksRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListCorruptFileBlocksRequestProto_descriptor_;
  metadata.reflection = ListCorruptFileBlocksRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListCorruptFileBlocksResponseProto::kCorruptFieldNumber;
#endif  // !_MSC_VER

ListCorruptFileBlocksResponseProto::ListCorruptFileBlocksResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListCorruptFileBlocksResponseProto::InitAsDefaultInstance() {
  corrupt_ = const_cast< ::Hdfs::Internal::CorruptFileBlocksProto*>(&::Hdfs::Internal::CorruptFileBlocksProto::default_instance());
}

ListCorruptFileBlocksResponseProto::ListCorruptFileBlocksResponseProto(const ListCorruptFileBlocksResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListCorruptFileBlocksResponseProto::SharedCtor() {
  _cached_size_ = 0;
  corrupt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListCorruptFileBlocksResponseProto::~ListCorruptFileBlocksResponseProto() {
  SharedDtor();
}

void ListCorruptFileBlocksResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete corrupt_;
  }
}

void ListCorruptFileBlocksResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCorruptFileBlocksResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListCorruptFileBlocksResponseProto_descriptor_;
}

const ListCorruptFileBlocksResponseProto& ListCorruptFileBlocksResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ListCorruptFileBlocksResponseProto* ListCorruptFileBlocksResponseProto::default_instance_ = NULL;

ListCorruptFileBlocksResponseProto* ListCorruptFileBlocksResponseProto::New() const {
  return new ListCorruptFileBlocksResponseProto;
}

void ListCorruptFileBlocksResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_corrupt()) {
      if (corrupt_ != NULL) corrupt_->::Hdfs::Internal::CorruptFileBlocksProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListCorruptFileBlocksResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_corrupt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListCorruptFileBlocksResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
  if (has_corrupt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->corrupt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListCorruptFileBlocksResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
  if (has_corrupt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->corrupt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListCorruptFileBlocksResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.CorruptFileBlocksProto corrupt = 1;
    if (has_corrupt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->corrupt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCorruptFileBlocksResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListCorruptFileBlocksResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListCorruptFileBlocksResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListCorruptFileBlocksResponseProto::MergeFrom(const ListCorruptFileBlocksResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_corrupt()) {
      mutable_corrupt()->::Hdfs::Internal::CorruptFileBlocksProto::MergeFrom(from.corrupt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListCorruptFileBlocksResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCorruptFileBlocksResponseProto::CopyFrom(const ListCorruptFileBlocksResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCorruptFileBlocksResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_corrupt()) {
    if (!this->corrupt().IsInitialized()) return false;
  }
  return true;
}

void ListCorruptFileBlocksResponseProto::Swap(ListCorruptFileBlocksResponseProto* other) {
  if (other != this) {
    std::swap(corrupt_, other->corrupt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListCorruptFileBlocksResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListCorruptFileBlocksResponseProto_descriptor_;
  metadata.reflection = ListCorruptFileBlocksResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaSaveRequestProto::kFilenameFieldNumber;
#endif  // !_MSC_VER

MetaSaveRequestProto::MetaSaveRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaSaveRequestProto::InitAsDefaultInstance() {
}

MetaSaveRequestProto::MetaSaveRequestProto(const MetaSaveRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaSaveRequestProto::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaSaveRequestProto::~MetaSaveRequestProto() {
  SharedDtor();
}

void MetaSaveRequestProto::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void MetaSaveRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaSaveRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaSaveRequestProto_descriptor_;
}

const MetaSaveRequestProto& MetaSaveRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

MetaSaveRequestProto* MetaSaveRequestProto::default_instance_ = NULL;

MetaSaveRequestProto* MetaSaveRequestProto::New() const {
  return new MetaSaveRequestProto;
}

void MetaSaveRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaSaveRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaSaveRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaSaveRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string filename = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaSaveRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaSaveRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaSaveRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaSaveRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaSaveRequestProto::MergeFrom(const MetaSaveRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaSaveRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaSaveRequestProto::CopyFrom(const MetaSaveRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaSaveRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MetaSaveRequestProto::Swap(MetaSaveRequestProto* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaSaveRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaSaveRequestProto_descriptor_;
  metadata.reflection = MetaSaveRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MetaSaveResponseProto::MetaSaveResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaSaveResponseProto::InitAsDefaultInstance() {
}

MetaSaveResponseProto::MetaSaveResponseProto(const MetaSaveResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaSaveResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaSaveResponseProto::~MetaSaveResponseProto() {
  SharedDtor();
}

void MetaSaveResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetaSaveResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaSaveResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaSaveResponseProto_descriptor_;
}

const MetaSaveResponseProto& MetaSaveResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

MetaSaveResponseProto* MetaSaveResponseProto::default_instance_ = NULL;

MetaSaveResponseProto* MetaSaveResponseProto::New() const {
  return new MetaSaveResponseProto;
}

void MetaSaveResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaSaveResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MetaSaveResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaSaveResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaSaveResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaSaveResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaSaveResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaSaveResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaSaveResponseProto::MergeFrom(const MetaSaveResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaSaveResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaSaveResponseProto::CopyFrom(const MetaSaveResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaSaveResponseProto::IsInitialized() const {

  return true;
}

void MetaSaveResponseProto::Swap(MetaSaveResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaSaveResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaSaveResponseProto_descriptor_;
  metadata.reflection = MetaSaveResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileInfoRequestProto::kSrcFieldNumber;
#endif  // !_MSC_VER

GetFileInfoRequestProto::GetFileInfoRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileInfoRequestProto::InitAsDefaultInstance() {
}

GetFileInfoRequestProto::GetFileInfoRequestProto(const GetFileInfoRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileInfoRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileInfoRequestProto::~GetFileInfoRequestProto() {
  SharedDtor();
}

void GetFileInfoRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void GetFileInfoRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileInfoRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileInfoRequestProto_descriptor_;
}

const GetFileInfoRequestProto& GetFileInfoRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetFileInfoRequestProto* GetFileInfoRequestProto::default_instance_ = NULL;

GetFileInfoRequestProto* GetFileInfoRequestProto::New() const {
  return new GetFileInfoRequestProto;
}

void GetFileInfoRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileInfoRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileInfoRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileInfoRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileInfoRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileInfoRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileInfoRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileInfoRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileInfoRequestProto::MergeFrom(const GetFileInfoRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileInfoRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileInfoRequestProto::CopyFrom(const GetFileInfoRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileInfoRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFileInfoRequestProto::Swap(GetFileInfoRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileInfoRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileInfoRequestProto_descriptor_;
  metadata.reflection = GetFileInfoRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileInfoResponseProto::kFsFieldNumber;
#endif  // !_MSC_VER

GetFileInfoResponseProto::GetFileInfoResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileInfoResponseProto::InitAsDefaultInstance() {
  fs_ = const_cast< ::Hdfs::Internal::HdfsFileStatusProto*>(&::Hdfs::Internal::HdfsFileStatusProto::default_instance());
}

GetFileInfoResponseProto::GetFileInfoResponseProto(const GetFileInfoResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileInfoResponseProto::SharedCtor() {
  _cached_size_ = 0;
  fs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileInfoResponseProto::~GetFileInfoResponseProto() {
  SharedDtor();
}

void GetFileInfoResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete fs_;
  }
}

void GetFileInfoResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileInfoResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileInfoResponseProto_descriptor_;
}

const GetFileInfoResponseProto& GetFileInfoResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetFileInfoResponseProto* GetFileInfoResponseProto::default_instance_ = NULL;

GetFileInfoResponseProto* GetFileInfoResponseProto::New() const {
  return new GetFileInfoResponseProto;
}

void GetFileInfoResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fs()) {
      if (fs_ != NULL) fs_->::Hdfs::Internal::HdfsFileStatusProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileInfoResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileInfoResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileInfoResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileInfoResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
    if (has_fs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileInfoResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileInfoResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileInfoResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileInfoResponseProto::MergeFrom(const GetFileInfoResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fs()) {
      mutable_fs()->::Hdfs::Internal::HdfsFileStatusProto::MergeFrom(from.fs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileInfoResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileInfoResponseProto::CopyFrom(const GetFileInfoResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileInfoResponseProto::IsInitialized() const {

  if (has_fs()) {
    if (!this->fs().IsInitialized()) return false;
  }
  return true;
}

void GetFileInfoResponseProto::Swap(GetFileInfoResponseProto* other) {
  if (other != this) {
    std::swap(fs_, other->fs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileInfoResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileInfoResponseProto_descriptor_;
  metadata.reflection = GetFileInfoResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsFileClosedRequestProto::kSrcFieldNumber;
#endif  // !_MSC_VER

IsFileClosedRequestProto::IsFileClosedRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsFileClosedRequestProto::InitAsDefaultInstance() {
}

IsFileClosedRequestProto::IsFileClosedRequestProto(const IsFileClosedRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsFileClosedRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsFileClosedRequestProto::~IsFileClosedRequestProto() {
  SharedDtor();
}

void IsFileClosedRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void IsFileClosedRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsFileClosedRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsFileClosedRequestProto_descriptor_;
}

const IsFileClosedRequestProto& IsFileClosedRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

IsFileClosedRequestProto* IsFileClosedRequestProto::default_instance_ = NULL;

IsFileClosedRequestProto* IsFileClosedRequestProto::New() const {
  return new IsFileClosedRequestProto;
}

void IsFileClosedRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsFileClosedRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsFileClosedRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsFileClosedRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsFileClosedRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsFileClosedRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsFileClosedRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsFileClosedRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsFileClosedRequestProto::MergeFrom(const IsFileClosedRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsFileClosedRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsFileClosedRequestProto::CopyFrom(const IsFileClosedRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsFileClosedRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsFileClosedRequestProto::Swap(IsFileClosedRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsFileClosedRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsFileClosedRequestProto_descriptor_;
  metadata.reflection = IsFileClosedRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsFileClosedResponseProto::kResultFieldNumber;
#endif  // !_MSC_VER

IsFileClosedResponseProto::IsFileClosedResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsFileClosedResponseProto::InitAsDefaultInstance() {
}

IsFileClosedResponseProto::IsFileClosedResponseProto(const IsFileClosedResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsFileClosedResponseProto::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsFileClosedResponseProto::~IsFileClosedResponseProto() {
  SharedDtor();
}

void IsFileClosedResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsFileClosedResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsFileClosedResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsFileClosedResponseProto_descriptor_;
}

const IsFileClosedResponseProto& IsFileClosedResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

IsFileClosedResponseProto* IsFileClosedResponseProto::default_instance_ = NULL;

IsFileClosedResponseProto* IsFileClosedResponseProto::New() const {
  return new IsFileClosedResponseProto;
}

void IsFileClosedResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsFileClosedResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsFileClosedResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsFileClosedResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsFileClosedResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsFileClosedResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsFileClosedResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsFileClosedResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsFileClosedResponseProto::MergeFrom(const IsFileClosedResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsFileClosedResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsFileClosedResponseProto::CopyFrom(const IsFileClosedResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsFileClosedResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IsFileClosedResponseProto::Swap(IsFileClosedResponseProto* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsFileClosedResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsFileClosedResponseProto_descriptor_;
  metadata.reflection = IsFileClosedResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheDirectiveInfoProto::kIdFieldNumber;
const int CacheDirectiveInfoProto::kPathFieldNumber;
const int CacheDirectiveInfoProto::kReplicationFieldNumber;
const int CacheDirectiveInfoProto::kPoolFieldNumber;
const int CacheDirectiveInfoProto::kExpirationFieldNumber;
#endif  // !_MSC_VER

CacheDirectiveInfoProto::CacheDirectiveInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CacheDirectiveInfoProto::InitAsDefaultInstance() {
  expiration_ = const_cast< ::Hdfs::Internal::CacheDirectiveInfoExpirationProto*>(&::Hdfs::Internal::CacheDirectiveInfoExpirationProto::default_instance());
}

CacheDirectiveInfoProto::CacheDirectiveInfoProto(const CacheDirectiveInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CacheDirectiveInfoProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replication_ = 0u;
  pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expiration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheDirectiveInfoProto::~CacheDirectiveInfoProto() {
  SharedDtor();
}

void CacheDirectiveInfoProto::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (pool_ != &::google::protobuf::internal::kEmptyString) {
    delete pool_;
  }
  if (this != default_instance_) {
    delete expiration_;
  }
}

void CacheDirectiveInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheDirectiveInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheDirectiveInfoProto_descriptor_;
}

const CacheDirectiveInfoProto& CacheDirectiveInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CacheDirectiveInfoProto* CacheDirectiveInfoProto::default_instance_ = NULL;

CacheDirectiveInfoProto* CacheDirectiveInfoProto::New() const {
  return new CacheDirectiveInfoProto;
}

void CacheDirectiveInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    replication_ = 0u;
    if (has_pool()) {
      if (pool_ != &::google::protobuf::internal::kEmptyString) {
        pool_->clear();
      }
    }
    if (has_expiration()) {
      if (expiration_ != NULL) expiration_->::Hdfs::Internal::CacheDirectiveInfoExpirationProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheDirectiveInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replication;
        break;
      }

      // optional uint32 replication = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replication:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replication_)));
          set_has_replication();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pool;
        break;
      }

      // optional string pool = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pool().data(), this->pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_expiration;
        break;
      }

      // optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expiration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expiration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheDirectiveInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  // optional uint32 replication = 3;
  if (has_replication()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->replication(), output);
  }

  // optional string pool = 4;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pool(), output);
  }

  // optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
  if (has_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->expiration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CacheDirectiveInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional uint32 replication = 3;
  if (has_replication()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->replication(), target);
  }

  // optional string pool = 4;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pool(), target);
  }

  // optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
  if (has_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->expiration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CacheDirectiveInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional uint32 replication = 3;
    if (has_replication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replication());
    }

    // optional string pool = 4;
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pool());
    }

    // optional .Hdfs.Internal.CacheDirectiveInfoExpirationProto expiration = 5;
    if (has_expiration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expiration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheDirectiveInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheDirectiveInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheDirectiveInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheDirectiveInfoProto::MergeFrom(const CacheDirectiveInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_replication()) {
      set_replication(from.replication());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_expiration()) {
      mutable_expiration()->::Hdfs::Internal::CacheDirectiveInfoExpirationProto::MergeFrom(from.expiration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheDirectiveInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheDirectiveInfoProto::CopyFrom(const CacheDirectiveInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheDirectiveInfoProto::IsInitialized() const {

  if (has_expiration()) {
    if (!this->expiration().IsInitialized()) return false;
  }
  return true;
}

void CacheDirectiveInfoProto::Swap(CacheDirectiveInfoProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    std::swap(replication_, other->replication_);
    std::swap(pool_, other->pool_);
    std::swap(expiration_, other->expiration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheDirectiveInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheDirectiveInfoProto_descriptor_;
  metadata.reflection = CacheDirectiveInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheDirectiveInfoExpirationProto::kMillisFieldNumber;
const int CacheDirectiveInfoExpirationProto::kIsRelativeFieldNumber;
#endif  // !_MSC_VER

CacheDirectiveInfoExpirationProto::CacheDirectiveInfoExpirationProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CacheDirectiveInfoExpirationProto::InitAsDefaultInstance() {
}

CacheDirectiveInfoExpirationProto::CacheDirectiveInfoExpirationProto(const CacheDirectiveInfoExpirationProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CacheDirectiveInfoExpirationProto::SharedCtor() {
  _cached_size_ = 0;
  millis_ = GOOGLE_LONGLONG(0);
  isrelative_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheDirectiveInfoExpirationProto::~CacheDirectiveInfoExpirationProto() {
  SharedDtor();
}

void CacheDirectiveInfoExpirationProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheDirectiveInfoExpirationProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheDirectiveInfoExpirationProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheDirectiveInfoExpirationProto_descriptor_;
}

const CacheDirectiveInfoExpirationProto& CacheDirectiveInfoExpirationProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CacheDirectiveInfoExpirationProto* CacheDirectiveInfoExpirationProto::default_instance_ = NULL;

CacheDirectiveInfoExpirationProto* CacheDirectiveInfoExpirationProto::New() const {
  return new CacheDirectiveInfoExpirationProto;
}

void CacheDirectiveInfoExpirationProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    millis_ = GOOGLE_LONGLONG(0);
    isrelative_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheDirectiveInfoExpirationProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 millis = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &millis_)));
          set_has_millis();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isRelative;
        break;
      }

      // required bool isRelative = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRelative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrelative_)));
          set_has_isrelative();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheDirectiveInfoExpirationProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 millis = 1;
  if (has_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->millis(), output);
  }

  // required bool isRelative = 2;
  if (has_isrelative()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isrelative(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CacheDirectiveInfoExpirationProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 millis = 1;
  if (has_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->millis(), target);
  }

  // required bool isRelative = 2;
  if (has_isrelative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isrelative(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CacheDirectiveInfoExpirationProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 millis = 1;
    if (has_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->millis());
    }

    // required bool isRelative = 2;
    if (has_isrelative()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheDirectiveInfoExpirationProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheDirectiveInfoExpirationProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheDirectiveInfoExpirationProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheDirectiveInfoExpirationProto::MergeFrom(const CacheDirectiveInfoExpirationProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_millis()) {
      set_millis(from.millis());
    }
    if (from.has_isrelative()) {
      set_isrelative(from.isrelative());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheDirectiveInfoExpirationProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheDirectiveInfoExpirationProto::CopyFrom(const CacheDirectiveInfoExpirationProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheDirectiveInfoExpirationProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CacheDirectiveInfoExpirationProto::Swap(CacheDirectiveInfoExpirationProto* other) {
  if (other != this) {
    std::swap(millis_, other->millis_);
    std::swap(isrelative_, other->isrelative_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheDirectiveInfoExpirationProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheDirectiveInfoExpirationProto_descriptor_;
  metadata.reflection = CacheDirectiveInfoExpirationProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheDirectiveStatsProto::kBytesNeededFieldNumber;
const int CacheDirectiveStatsProto::kBytesCachedFieldNumber;
const int CacheDirectiveStatsProto::kFilesNeededFieldNumber;
const int CacheDirectiveStatsProto::kFilesCachedFieldNumber;
const int CacheDirectiveStatsProto::kHasExpiredFieldNumber;
#endif  // !_MSC_VER

CacheDirectiveStatsProto::CacheDirectiveStatsProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CacheDirectiveStatsProto::InitAsDefaultInstance() {
}

CacheDirectiveStatsProto::CacheDirectiveStatsProto(const CacheDirectiveStatsProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CacheDirectiveStatsProto::SharedCtor() {
  _cached_size_ = 0;
  bytesneeded_ = GOOGLE_LONGLONG(0);
  bytescached_ = GOOGLE_LONGLONG(0);
  filesneeded_ = GOOGLE_LONGLONG(0);
  filescached_ = GOOGLE_LONGLONG(0);
  hasexpired_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheDirectiveStatsProto::~CacheDirectiveStatsProto() {
  SharedDtor();
}

void CacheDirectiveStatsProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheDirectiveStatsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheDirectiveStatsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheDirectiveStatsProto_descriptor_;
}

const CacheDirectiveStatsProto& CacheDirectiveStatsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CacheDirectiveStatsProto* CacheDirectiveStatsProto::default_instance_ = NULL;

CacheDirectiveStatsProto* CacheDirectiveStatsProto::New() const {
  return new CacheDirectiveStatsProto;
}

void CacheDirectiveStatsProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytesneeded_ = GOOGLE_LONGLONG(0);
    bytescached_ = GOOGLE_LONGLONG(0);
    filesneeded_ = GOOGLE_LONGLONG(0);
    filescached_ = GOOGLE_LONGLONG(0);
    hasexpired_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheDirectiveStatsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 bytesNeeded = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytesneeded_)));
          set_has_bytesneeded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bytesCached;
        break;
      }

      // required int64 bytesCached = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytesCached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytescached_)));
          set_has_bytescached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filesNeeded;
        break;
      }

      // required int64 filesNeeded = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesNeeded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesneeded_)));
          set_has_filesneeded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filesCached;
        break;
      }

      // required int64 filesCached = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesCached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filescached_)));
          set_has_filescached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasExpired;
        break;
      }

      // required bool hasExpired = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasExpired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasexpired_)));
          set_has_hasexpired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheDirectiveStatsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 bytesNeeded = 1;
  if (has_bytesneeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bytesneeded(), output);
  }

  // required int64 bytesCached = 2;
  if (has_bytescached()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bytescached(), output);
  }

  // required int64 filesNeeded = 3;
  if (has_filesneeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->filesneeded(), output);
  }

  // required int64 filesCached = 4;
  if (has_filescached()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->filescached(), output);
  }

  // required bool hasExpired = 5;
  if (has_hasexpired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hasexpired(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CacheDirectiveStatsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 bytesNeeded = 1;
  if (has_bytesneeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bytesneeded(), target);
  }

  // required int64 bytesCached = 2;
  if (has_bytescached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bytescached(), target);
  }

  // required int64 filesNeeded = 3;
  if (has_filesneeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->filesneeded(), target);
  }

  // required int64 filesCached = 4;
  if (has_filescached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->filescached(), target);
  }

  // required bool hasExpired = 5;
  if (has_hasexpired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hasexpired(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CacheDirectiveStatsProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 bytesNeeded = 1;
    if (has_bytesneeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytesneeded());
    }

    // required int64 bytesCached = 2;
    if (has_bytescached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytescached());
    }

    // required int64 filesNeeded = 3;
    if (has_filesneeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesneeded());
    }

    // required int64 filesCached = 4;
    if (has_filescached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filescached());
    }

    // required bool hasExpired = 5;
    if (has_hasexpired()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheDirectiveStatsProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheDirectiveStatsProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheDirectiveStatsProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheDirectiveStatsProto::MergeFrom(const CacheDirectiveStatsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytesneeded()) {
      set_bytesneeded(from.bytesneeded());
    }
    if (from.has_bytescached()) {
      set_bytescached(from.bytescached());
    }
    if (from.has_filesneeded()) {
      set_filesneeded(from.filesneeded());
    }
    if (from.has_filescached()) {
      set_filescached(from.filescached());
    }
    if (from.has_hasexpired()) {
      set_hasexpired(from.hasexpired());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheDirectiveStatsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheDirectiveStatsProto::CopyFrom(const CacheDirectiveStatsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheDirectiveStatsProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CacheDirectiveStatsProto::Swap(CacheDirectiveStatsProto* other) {
  if (other != this) {
    std::swap(bytesneeded_, other->bytesneeded_);
    std::swap(bytescached_, other->bytescached_);
    std::swap(filesneeded_, other->filesneeded_);
    std::swap(filescached_, other->filescached_);
    std::swap(hasexpired_, other->hasexpired_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheDirectiveStatsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheDirectiveStatsProto_descriptor_;
  metadata.reflection = CacheDirectiveStatsProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCacheDirectiveRequestProto::kInfoFieldNumber;
const int AddCacheDirectiveRequestProto::kCacheFlagsFieldNumber;
#endif  // !_MSC_VER

AddCacheDirectiveRequestProto::AddCacheDirectiveRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCacheDirectiveRequestProto::InitAsDefaultInstance() {
  info_ = const_cast< ::Hdfs::Internal::CacheDirectiveInfoProto*>(&::Hdfs::Internal::CacheDirectiveInfoProto::default_instance());
}

AddCacheDirectiveRequestProto::AddCacheDirectiveRequestProto(const AddCacheDirectiveRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCacheDirectiveRequestProto::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  cacheflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCacheDirectiveRequestProto::~AddCacheDirectiveRequestProto() {
  SharedDtor();
}

void AddCacheDirectiveRequestProto::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void AddCacheDirectiveRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCacheDirectiveRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCacheDirectiveRequestProto_descriptor_;
}

const AddCacheDirectiveRequestProto& AddCacheDirectiveRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AddCacheDirectiveRequestProto* AddCacheDirectiveRequestProto::default_instance_ = NULL;

AddCacheDirectiveRequestProto* AddCacheDirectiveRequestProto::New() const {
  return new AddCacheDirectiveRequestProto;
}

void AddCacheDirectiveRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Hdfs::Internal::CacheDirectiveInfoProto::Clear();
    }
    cacheflags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCacheDirectiveRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cacheFlags;
        break;
      }

      // optional uint32 cacheFlags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cacheFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cacheflags_)));
          set_has_cacheflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCacheDirectiveRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional uint32 cacheFlags = 2;
  if (has_cacheflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cacheflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCacheDirectiveRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional uint32 cacheFlags = 2;
  if (has_cacheflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cacheflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCacheDirectiveRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 cacheFlags = 2;
    if (has_cacheflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cacheflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCacheDirectiveRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCacheDirectiveRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCacheDirectiveRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCacheDirectiveRequestProto::MergeFrom(const AddCacheDirectiveRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Hdfs::Internal::CacheDirectiveInfoProto::MergeFrom(from.info());
    }
    if (from.has_cacheflags()) {
      set_cacheflags(from.cacheflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCacheDirectiveRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCacheDirectiveRequestProto::CopyFrom(const AddCacheDirectiveRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCacheDirectiveRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void AddCacheDirectiveRequestProto::Swap(AddCacheDirectiveRequestProto* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(cacheflags_, other->cacheflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCacheDirectiveRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCacheDirectiveRequestProto_descriptor_;
  metadata.reflection = AddCacheDirectiveRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCacheDirectiveResponseProto::kIdFieldNumber;
#endif  // !_MSC_VER

AddCacheDirectiveResponseProto::AddCacheDirectiveResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCacheDirectiveResponseProto::InitAsDefaultInstance() {
}

AddCacheDirectiveResponseProto::AddCacheDirectiveResponseProto(const AddCacheDirectiveResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCacheDirectiveResponseProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCacheDirectiveResponseProto::~AddCacheDirectiveResponseProto() {
  SharedDtor();
}

void AddCacheDirectiveResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddCacheDirectiveResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCacheDirectiveResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCacheDirectiveResponseProto_descriptor_;
}

const AddCacheDirectiveResponseProto& AddCacheDirectiveResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AddCacheDirectiveResponseProto* AddCacheDirectiveResponseProto::default_instance_ = NULL;

AddCacheDirectiveResponseProto* AddCacheDirectiveResponseProto::New() const {
  return new AddCacheDirectiveResponseProto;
}

void AddCacheDirectiveResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCacheDirectiveResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCacheDirectiveResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCacheDirectiveResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCacheDirectiveResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCacheDirectiveResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCacheDirectiveResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCacheDirectiveResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCacheDirectiveResponseProto::MergeFrom(const AddCacheDirectiveResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCacheDirectiveResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCacheDirectiveResponseProto::CopyFrom(const AddCacheDirectiveResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCacheDirectiveResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddCacheDirectiveResponseProto::Swap(AddCacheDirectiveResponseProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCacheDirectiveResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCacheDirectiveResponseProto_descriptor_;
  metadata.reflection = AddCacheDirectiveResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyCacheDirectiveRequestProto::kInfoFieldNumber;
const int ModifyCacheDirectiveRequestProto::kCacheFlagsFieldNumber;
#endif  // !_MSC_VER

ModifyCacheDirectiveRequestProto::ModifyCacheDirectiveRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyCacheDirectiveRequestProto::InitAsDefaultInstance() {
  info_ = const_cast< ::Hdfs::Internal::CacheDirectiveInfoProto*>(&::Hdfs::Internal::CacheDirectiveInfoProto::default_instance());
}

ModifyCacheDirectiveRequestProto::ModifyCacheDirectiveRequestProto(const ModifyCacheDirectiveRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyCacheDirectiveRequestProto::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  cacheflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyCacheDirectiveRequestProto::~ModifyCacheDirectiveRequestProto() {
  SharedDtor();
}

void ModifyCacheDirectiveRequestProto::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ModifyCacheDirectiveRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyCacheDirectiveRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyCacheDirectiveRequestProto_descriptor_;
}

const ModifyCacheDirectiveRequestProto& ModifyCacheDirectiveRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ModifyCacheDirectiveRequestProto* ModifyCacheDirectiveRequestProto::default_instance_ = NULL;

ModifyCacheDirectiveRequestProto* ModifyCacheDirectiveRequestProto::New() const {
  return new ModifyCacheDirectiveRequestProto;
}

void ModifyCacheDirectiveRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Hdfs::Internal::CacheDirectiveInfoProto::Clear();
    }
    cacheflags_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyCacheDirectiveRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cacheFlags;
        break;
      }

      // optional uint32 cacheFlags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cacheFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cacheflags_)));
          set_has_cacheflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyCacheDirectiveRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional uint32 cacheFlags = 2;
  if (has_cacheflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cacheflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyCacheDirectiveRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional uint32 cacheFlags = 2;
  if (has_cacheflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cacheflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyCacheDirectiveRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 cacheFlags = 2;
    if (has_cacheflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cacheflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyCacheDirectiveRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyCacheDirectiveRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyCacheDirectiveRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyCacheDirectiveRequestProto::MergeFrom(const ModifyCacheDirectiveRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Hdfs::Internal::CacheDirectiveInfoProto::MergeFrom(from.info());
    }
    if (from.has_cacheflags()) {
      set_cacheflags(from.cacheflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyCacheDirectiveRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyCacheDirectiveRequestProto::CopyFrom(const ModifyCacheDirectiveRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyCacheDirectiveRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ModifyCacheDirectiveRequestProto::Swap(ModifyCacheDirectiveRequestProto* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(cacheflags_, other->cacheflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyCacheDirectiveRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyCacheDirectiveRequestProto_descriptor_;
  metadata.reflection = ModifyCacheDirectiveRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ModifyCacheDirectiveResponseProto::ModifyCacheDirectiveResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyCacheDirectiveResponseProto::InitAsDefaultInstance() {
}

ModifyCacheDirectiveResponseProto::ModifyCacheDirectiveResponseProto(const ModifyCacheDirectiveResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyCacheDirectiveResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyCacheDirectiveResponseProto::~ModifyCacheDirectiveResponseProto() {
  SharedDtor();
}

void ModifyCacheDirectiveResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifyCacheDirectiveResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyCacheDirectiveResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyCacheDirectiveResponseProto_descriptor_;
}

const ModifyCacheDirectiveResponseProto& ModifyCacheDirectiveResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ModifyCacheDirectiveResponseProto* ModifyCacheDirectiveResponseProto::default_instance_ = NULL;

ModifyCacheDirectiveResponseProto* ModifyCacheDirectiveResponseProto::New() const {
  return new ModifyCacheDirectiveResponseProto;
}

void ModifyCacheDirectiveResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyCacheDirectiveResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ModifyCacheDirectiveResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyCacheDirectiveResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyCacheDirectiveResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyCacheDirectiveResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyCacheDirectiveResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyCacheDirectiveResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyCacheDirectiveResponseProto::MergeFrom(const ModifyCacheDirectiveResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyCacheDirectiveResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyCacheDirectiveResponseProto::CopyFrom(const ModifyCacheDirectiveResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyCacheDirectiveResponseProto::IsInitialized() const {

  return true;
}

void ModifyCacheDirectiveResponseProto::Swap(ModifyCacheDirectiveResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyCacheDirectiveResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyCacheDirectiveResponseProto_descriptor_;
  metadata.reflection = ModifyCacheDirectiveResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveCacheDirectiveRequestProto::kIdFieldNumber;
#endif  // !_MSC_VER

RemoveCacheDirectiveRequestProto::RemoveCacheDirectiveRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveCacheDirectiveRequestProto::InitAsDefaultInstance() {
}

RemoveCacheDirectiveRequestProto::RemoveCacheDirectiveRequestProto(const RemoveCacheDirectiveRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveCacheDirectiveRequestProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveCacheDirectiveRequestProto::~RemoveCacheDirectiveRequestProto() {
  SharedDtor();
}

void RemoveCacheDirectiveRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveCacheDirectiveRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveCacheDirectiveRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveCacheDirectiveRequestProto_descriptor_;
}

const RemoveCacheDirectiveRequestProto& RemoveCacheDirectiveRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RemoveCacheDirectiveRequestProto* RemoveCacheDirectiveRequestProto::default_instance_ = NULL;

RemoveCacheDirectiveRequestProto* RemoveCacheDirectiveRequestProto::New() const {
  return new RemoveCacheDirectiveRequestProto;
}

void RemoveCacheDirectiveRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveCacheDirectiveRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveCacheDirectiveRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveCacheDirectiveRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveCacheDirectiveRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveCacheDirectiveRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveCacheDirectiveRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveCacheDirectiveRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveCacheDirectiveRequestProto::MergeFrom(const RemoveCacheDirectiveRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveCacheDirectiveRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCacheDirectiveRequestProto::CopyFrom(const RemoveCacheDirectiveRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCacheDirectiveRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveCacheDirectiveRequestProto::Swap(RemoveCacheDirectiveRequestProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveCacheDirectiveRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveCacheDirectiveRequestProto_descriptor_;
  metadata.reflection = RemoveCacheDirectiveRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RemoveCacheDirectiveResponseProto::RemoveCacheDirectiveResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveCacheDirectiveResponseProto::InitAsDefaultInstance() {
}

RemoveCacheDirectiveResponseProto::RemoveCacheDirectiveResponseProto(const RemoveCacheDirectiveResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveCacheDirectiveResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveCacheDirectiveResponseProto::~RemoveCacheDirectiveResponseProto() {
  SharedDtor();
}

void RemoveCacheDirectiveResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveCacheDirectiveResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveCacheDirectiveResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveCacheDirectiveResponseProto_descriptor_;
}

const RemoveCacheDirectiveResponseProto& RemoveCacheDirectiveResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RemoveCacheDirectiveResponseProto* RemoveCacheDirectiveResponseProto::default_instance_ = NULL;

RemoveCacheDirectiveResponseProto* RemoveCacheDirectiveResponseProto::New() const {
  return new RemoveCacheDirectiveResponseProto;
}

void RemoveCacheDirectiveResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveCacheDirectiveResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RemoveCacheDirectiveResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveCacheDirectiveResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveCacheDirectiveResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveCacheDirectiveResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveCacheDirectiveResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveCacheDirectiveResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveCacheDirectiveResponseProto::MergeFrom(const RemoveCacheDirectiveResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveCacheDirectiveResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCacheDirectiveResponseProto::CopyFrom(const RemoveCacheDirectiveResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCacheDirectiveResponseProto::IsInitialized() const {

  return true;
}

void RemoveCacheDirectiveResponseProto::Swap(RemoveCacheDirectiveResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveCacheDirectiveResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveCacheDirectiveResponseProto_descriptor_;
  metadata.reflection = RemoveCacheDirectiveResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListCacheDirectivesRequestProto::kPrevIdFieldNumber;
const int ListCacheDirectivesRequestProto::kFilterFieldNumber;
#endif  // !_MSC_VER

ListCacheDirectivesRequestProto::ListCacheDirectivesRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListCacheDirectivesRequestProto::InitAsDefaultInstance() {
  filter_ = const_cast< ::Hdfs::Internal::CacheDirectiveInfoProto*>(&::Hdfs::Internal::CacheDirectiveInfoProto::default_instance());
}

ListCacheDirectivesRequestProto::ListCacheDirectivesRequestProto(const ListCacheDirectivesRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListCacheDirectivesRequestProto::SharedCtor() {
  _cached_size_ = 0;
  previd_ = GOOGLE_LONGLONG(0);
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListCacheDirectivesRequestProto::~ListCacheDirectivesRequestProto() {
  SharedDtor();
}

void ListCacheDirectivesRequestProto::SharedDtor() {
  if (this != default_instance_) {
    delete filter_;
  }
}

void ListCacheDirectivesRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCacheDirectivesRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListCacheDirectivesRequestProto_descriptor_;
}

const ListCacheDirectivesRequestProto& ListCacheDirectivesRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ListCacheDirectivesRequestProto* ListCacheDirectivesRequestProto::default_instance_ = NULL;

ListCacheDirectivesRequestProto* ListCacheDirectivesRequestProto::New() const {
  return new ListCacheDirectivesRequestProto;
}

void ListCacheDirectivesRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    previd_ = GOOGLE_LONGLONG(0);
    if (has_filter()) {
      if (filter_ != NULL) filter_->::Hdfs::Internal::CacheDirectiveInfoProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListCacheDirectivesRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 prevId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &previd_)));
          set_has_previd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter;
        break;
      }

      // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListCacheDirectivesRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 prevId = 1;
  if (has_previd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->previd(), output);
  }

  // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->filter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListCacheDirectivesRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 prevId = 1;
  if (has_previd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->previd(), target);
  }

  // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->filter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListCacheDirectivesRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 prevId = 1;
    if (has_previd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->previd());
    }

    // required .Hdfs.Internal.CacheDirectiveInfoProto filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCacheDirectivesRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListCacheDirectivesRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListCacheDirectivesRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListCacheDirectivesRequestProto::MergeFrom(const ListCacheDirectivesRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_previd()) {
      set_previd(from.previd());
    }
    if (from.has_filter()) {
      mutable_filter()->::Hdfs::Internal::CacheDirectiveInfoProto::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListCacheDirectivesRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCacheDirectivesRequestProto::CopyFrom(const ListCacheDirectivesRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCacheDirectivesRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void ListCacheDirectivesRequestProto::Swap(ListCacheDirectivesRequestProto* other) {
  if (other != this) {
    std::swap(previd_, other->previd_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListCacheDirectivesRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListCacheDirectivesRequestProto_descriptor_;
  metadata.reflection = ListCacheDirectivesRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheDirectiveEntryProto::kInfoFieldNumber;
const int CacheDirectiveEntryProto::kStatsFieldNumber;
#endif  // !_MSC_VER

CacheDirectiveEntryProto::CacheDirectiveEntryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CacheDirectiveEntryProto::InitAsDefaultInstance() {
  info_ = const_cast< ::Hdfs::Internal::CacheDirectiveInfoProto*>(&::Hdfs::Internal::CacheDirectiveInfoProto::default_instance());
  stats_ = const_cast< ::Hdfs::Internal::CacheDirectiveStatsProto*>(&::Hdfs::Internal::CacheDirectiveStatsProto::default_instance());
}

CacheDirectiveEntryProto::CacheDirectiveEntryProto(const CacheDirectiveEntryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CacheDirectiveEntryProto::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheDirectiveEntryProto::~CacheDirectiveEntryProto() {
  SharedDtor();
}

void CacheDirectiveEntryProto::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete stats_;
  }
}

void CacheDirectiveEntryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheDirectiveEntryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheDirectiveEntryProto_descriptor_;
}

const CacheDirectiveEntryProto& CacheDirectiveEntryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CacheDirectiveEntryProto* CacheDirectiveEntryProto::default_instance_ = NULL;

CacheDirectiveEntryProto* CacheDirectiveEntryProto::New() const {
  return new CacheDirectiveEntryProto;
}

void CacheDirectiveEntryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Hdfs::Internal::CacheDirectiveInfoProto::Clear();
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::Hdfs::Internal::CacheDirectiveStatsProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheDirectiveEntryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CacheDirectiveEntryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CacheDirectiveEntryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CacheDirectiveEntryProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.CacheDirectiveInfoProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required .Hdfs.Internal.CacheDirectiveStatsProto stats = 2;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheDirectiveEntryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheDirectiveEntryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheDirectiveEntryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheDirectiveEntryProto::MergeFrom(const CacheDirectiveEntryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Hdfs::Internal::CacheDirectiveInfoProto::MergeFrom(from.info());
    }
    if (from.has_stats()) {
      mutable_stats()->::Hdfs::Internal::CacheDirectiveStatsProto::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheDirectiveEntryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheDirectiveEntryProto::CopyFrom(const CacheDirectiveEntryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheDirectiveEntryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_stats()) {
    if (!this->stats().IsInitialized()) return false;
  }
  return true;
}

void CacheDirectiveEntryProto::Swap(CacheDirectiveEntryProto* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheDirectiveEntryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheDirectiveEntryProto_descriptor_;
  metadata.reflection = CacheDirectiveEntryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListCacheDirectivesResponseProto::kElementsFieldNumber;
const int ListCacheDirectivesResponseProto::kHasMoreFieldNumber;
#endif  // !_MSC_VER

ListCacheDirectivesResponseProto::ListCacheDirectivesResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListCacheDirectivesResponseProto::InitAsDefaultInstance() {
}

ListCacheDirectivesResponseProto::ListCacheDirectivesResponseProto(const ListCacheDirectivesResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListCacheDirectivesResponseProto::SharedCtor() {
  _cached_size_ = 0;
  hasmore_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListCacheDirectivesResponseProto::~ListCacheDirectivesResponseProto() {
  SharedDtor();
}

void ListCacheDirectivesResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListCacheDirectivesResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCacheDirectivesResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListCacheDirectivesResponseProto_descriptor_;
}

const ListCacheDirectivesResponseProto& ListCacheDirectivesResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ListCacheDirectivesResponseProto* ListCacheDirectivesResponseProto::default_instance_ = NULL;

ListCacheDirectivesResponseProto* ListCacheDirectivesResponseProto::New() const {
  return new ListCacheDirectivesResponseProto;
}

void ListCacheDirectivesResponseProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    hasmore_ = false;
  }
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListCacheDirectivesResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elements;
        if (input->ExpectTag(16)) goto parse_hasMore;
        break;
      }

      // required bool hasMore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmore_)));
          set_has_hasmore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListCacheDirectivesResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  // required bool hasMore = 2;
  if (has_hasmore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasmore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListCacheDirectivesResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elements(i), target);
  }

  // required bool hasMore = 2;
  if (has_hasmore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasmore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListCacheDirectivesResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool hasMore = 2;
    if (has_hasmore()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Hdfs.Internal.CacheDirectiveEntryProto elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCacheDirectivesResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListCacheDirectivesResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListCacheDirectivesResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListCacheDirectivesResponseProto::MergeFrom(const ListCacheDirectivesResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hasmore()) {
      set_hasmore(from.hasmore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListCacheDirectivesResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCacheDirectivesResponseProto::CopyFrom(const ListCacheDirectivesResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCacheDirectivesResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void ListCacheDirectivesResponseProto::Swap(ListCacheDirectivesResponseProto* other) {
  if (other != this) {
    elements_.Swap(&other->elements_);
    std::swap(hasmore_, other->hasmore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListCacheDirectivesResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListCacheDirectivesResponseProto_descriptor_;
  metadata.reflection = ListCacheDirectivesResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachePoolInfoProto::kPoolNameFieldNumber;
const int CachePoolInfoProto::kOwnerNameFieldNumber;
const int CachePoolInfoProto::kGroupNameFieldNumber;
const int CachePoolInfoProto::kModeFieldNumber;
const int CachePoolInfoProto::kLimitFieldNumber;
const int CachePoolInfoProto::kMaxRelativeExpiryFieldNumber;
#endif  // !_MSC_VER

CachePoolInfoProto::CachePoolInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachePoolInfoProto::InitAsDefaultInstance() {
}

CachePoolInfoProto::CachePoolInfoProto(const CachePoolInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachePoolInfoProto::SharedCtor() {
  _cached_size_ = 0;
  poolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0;
  limit_ = GOOGLE_LONGLONG(0);
  maxrelativeexpiry_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachePoolInfoProto::~CachePoolInfoProto() {
  SharedDtor();
}

void CachePoolInfoProto::SharedDtor() {
  if (poolname_ != &::google::protobuf::internal::kEmptyString) {
    delete poolname_;
  }
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (this != default_instance_) {
  }
}

void CachePoolInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachePoolInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachePoolInfoProto_descriptor_;
}

const CachePoolInfoProto& CachePoolInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CachePoolInfoProto* CachePoolInfoProto::default_instance_ = NULL;

CachePoolInfoProto* CachePoolInfoProto::New() const {
  return new CachePoolInfoProto;
}

void CachePoolInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poolname()) {
      if (poolname_ != &::google::protobuf::internal::kEmptyString) {
        poolname_->clear();
      }
    }
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::kEmptyString) {
        ownername_->clear();
      }
    }
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    mode_ = 0;
    limit_ = GOOGLE_LONGLONG(0);
    maxrelativeexpiry_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachePoolInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string poolName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poolname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poolname().data(), this->poolname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ownerName;
        break;
      }

      // optional string ownerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownername().data(), this->ownername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_groupName;
        break;
      }

      // optional string groupName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // optional int32 mode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_limit;
        break;
      }

      // optional int64 limit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_maxRelativeExpiry;
        break;
      }

      // optional int64 maxRelativeExpiry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxRelativeExpiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxrelativeexpiry_)));
          set_has_maxrelativeexpiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachePoolInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string poolName = 1;
  if (has_poolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolname().data(), this->poolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poolname(), output);
  }

  // optional string ownerName = 2;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ownername(), output);
  }

  // optional string groupName = 3;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->groupname(), output);
  }

  // optional int32 mode = 4;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mode(), output);
  }

  // optional int64 limit = 5;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->limit(), output);
  }

  // optional int64 maxRelativeExpiry = 6;
  if (has_maxrelativeexpiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->maxrelativeexpiry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachePoolInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string poolName = 1;
  if (has_poolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolname().data(), this->poolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poolname(), target);
  }

  // optional string ownerName = 2;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownername().data(), this->ownername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ownername(), target);
  }

  // optional string groupName = 3;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupname(), target);
  }

  // optional int32 mode = 4;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mode(), target);
  }

  // optional int64 limit = 5;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->limit(), target);
  }

  // optional int64 maxRelativeExpiry = 6;
  if (has_maxrelativeexpiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->maxrelativeexpiry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachePoolInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string poolName = 1;
    if (has_poolname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poolname());
    }

    // optional string ownerName = 2;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownername());
    }

    // optional string groupName = 3;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional int32 mode = 4;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int64 limit = 5;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->limit());
    }

    // optional int64 maxRelativeExpiry = 6;
    if (has_maxrelativeexpiry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxrelativeexpiry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachePoolInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachePoolInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachePoolInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachePoolInfoProto::MergeFrom(const CachePoolInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poolname()) {
      set_poolname(from.poolname());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_maxrelativeexpiry()) {
      set_maxrelativeexpiry(from.maxrelativeexpiry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachePoolInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachePoolInfoProto::CopyFrom(const CachePoolInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachePoolInfoProto::IsInitialized() const {

  return true;
}

void CachePoolInfoProto::Swap(CachePoolInfoProto* other) {
  if (other != this) {
    std::swap(poolname_, other->poolname_);
    std::swap(ownername_, other->ownername_);
    std::swap(groupname_, other->groupname_);
    std::swap(mode_, other->mode_);
    std::swap(limit_, other->limit_);
    std::swap(maxrelativeexpiry_, other->maxrelativeexpiry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachePoolInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachePoolInfoProto_descriptor_;
  metadata.reflection = CachePoolInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachePoolStatsProto::kBytesNeededFieldNumber;
const int CachePoolStatsProto::kBytesCachedFieldNumber;
const int CachePoolStatsProto::kBytesOverlimitFieldNumber;
const int CachePoolStatsProto::kFilesNeededFieldNumber;
const int CachePoolStatsProto::kFilesCachedFieldNumber;
#endif  // !_MSC_VER

CachePoolStatsProto::CachePoolStatsProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachePoolStatsProto::InitAsDefaultInstance() {
}

CachePoolStatsProto::CachePoolStatsProto(const CachePoolStatsProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachePoolStatsProto::SharedCtor() {
  _cached_size_ = 0;
  bytesneeded_ = GOOGLE_LONGLONG(0);
  bytescached_ = GOOGLE_LONGLONG(0);
  bytesoverlimit_ = GOOGLE_LONGLONG(0);
  filesneeded_ = GOOGLE_LONGLONG(0);
  filescached_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachePoolStatsProto::~CachePoolStatsProto() {
  SharedDtor();
}

void CachePoolStatsProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CachePoolStatsProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachePoolStatsProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachePoolStatsProto_descriptor_;
}

const CachePoolStatsProto& CachePoolStatsProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CachePoolStatsProto* CachePoolStatsProto::default_instance_ = NULL;

CachePoolStatsProto* CachePoolStatsProto::New() const {
  return new CachePoolStatsProto;
}

void CachePoolStatsProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bytesneeded_ = GOOGLE_LONGLONG(0);
    bytescached_ = GOOGLE_LONGLONG(0);
    bytesoverlimit_ = GOOGLE_LONGLONG(0);
    filesneeded_ = GOOGLE_LONGLONG(0);
    filescached_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachePoolStatsProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 bytesNeeded = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytesneeded_)));
          set_has_bytesneeded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bytesCached;
        break;
      }

      // required int64 bytesCached = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytesCached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytescached_)));
          set_has_bytescached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bytesOverlimit;
        break;
      }

      // required int64 bytesOverlimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytesOverlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytesoverlimit_)));
          set_has_bytesoverlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filesNeeded;
        break;
      }

      // required int64 filesNeeded = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesNeeded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesneeded_)));
          set_has_filesneeded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filesCached;
        break;
      }

      // required int64 filesCached = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesCached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filescached_)));
          set_has_filescached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachePoolStatsProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 bytesNeeded = 1;
  if (has_bytesneeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bytesneeded(), output);
  }

  // required int64 bytesCached = 2;
  if (has_bytescached()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bytescached(), output);
  }

  // required int64 bytesOverlimit = 3;
  if (has_bytesoverlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bytesoverlimit(), output);
  }

  // required int64 filesNeeded = 4;
  if (has_filesneeded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->filesneeded(), output);
  }

  // required int64 filesCached = 5;
  if (has_filescached()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->filescached(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachePoolStatsProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 bytesNeeded = 1;
  if (has_bytesneeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bytesneeded(), target);
  }

  // required int64 bytesCached = 2;
  if (has_bytescached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bytescached(), target);
  }

  // required int64 bytesOverlimit = 3;
  if (has_bytesoverlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bytesoverlimit(), target);
  }

  // required int64 filesNeeded = 4;
  if (has_filesneeded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->filesneeded(), target);
  }

  // required int64 filesCached = 5;
  if (has_filescached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->filescached(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachePoolStatsProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 bytesNeeded = 1;
    if (has_bytesneeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytesneeded());
    }

    // required int64 bytesCached = 2;
    if (has_bytescached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytescached());
    }

    // required int64 bytesOverlimit = 3;
    if (has_bytesoverlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytesoverlimit());
    }

    // required int64 filesNeeded = 4;
    if (has_filesneeded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesneeded());
    }

    // required int64 filesCached = 5;
    if (has_filescached()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filescached());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachePoolStatsProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachePoolStatsProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachePoolStatsProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachePoolStatsProto::MergeFrom(const CachePoolStatsProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytesneeded()) {
      set_bytesneeded(from.bytesneeded());
    }
    if (from.has_bytescached()) {
      set_bytescached(from.bytescached());
    }
    if (from.has_bytesoverlimit()) {
      set_bytesoverlimit(from.bytesoverlimit());
    }
    if (from.has_filesneeded()) {
      set_filesneeded(from.filesneeded());
    }
    if (from.has_filescached()) {
      set_filescached(from.filescached());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachePoolStatsProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachePoolStatsProto::CopyFrom(const CachePoolStatsProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachePoolStatsProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CachePoolStatsProto::Swap(CachePoolStatsProto* other) {
  if (other != this) {
    std::swap(bytesneeded_, other->bytesneeded_);
    std::swap(bytescached_, other->bytescached_);
    std::swap(bytesoverlimit_, other->bytesoverlimit_);
    std::swap(filesneeded_, other->filesneeded_);
    std::swap(filescached_, other->filescached_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachePoolStatsProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachePoolStatsProto_descriptor_;
  metadata.reflection = CachePoolStatsProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCachePoolRequestProto::kInfoFieldNumber;
#endif  // !_MSC_VER

AddCachePoolRequestProto::AddCachePoolRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCachePoolRequestProto::InitAsDefaultInstance() {
  info_ = const_cast< ::Hdfs::Internal::CachePoolInfoProto*>(&::Hdfs::Internal::CachePoolInfoProto::default_instance());
}

AddCachePoolRequestProto::AddCachePoolRequestProto(const AddCachePoolRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCachePoolRequestProto::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCachePoolRequestProto::~AddCachePoolRequestProto() {
  SharedDtor();
}

void AddCachePoolRequestProto::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void AddCachePoolRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCachePoolRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCachePoolRequestProto_descriptor_;
}

const AddCachePoolRequestProto& AddCachePoolRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AddCachePoolRequestProto* AddCachePoolRequestProto::default_instance_ = NULL;

AddCachePoolRequestProto* AddCachePoolRequestProto::New() const {
  return new AddCachePoolRequestProto;
}

void AddCachePoolRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Hdfs::Internal::CachePoolInfoProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCachePoolRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.CachePoolInfoProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddCachePoolRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCachePoolRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCachePoolRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.CachePoolInfoProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCachePoolRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCachePoolRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCachePoolRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCachePoolRequestProto::MergeFrom(const AddCachePoolRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Hdfs::Internal::CachePoolInfoProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCachePoolRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCachePoolRequestProto::CopyFrom(const AddCachePoolRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCachePoolRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddCachePoolRequestProto::Swap(AddCachePoolRequestProto* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCachePoolRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCachePoolRequestProto_descriptor_;
  metadata.reflection = AddCachePoolRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AddCachePoolResponseProto::AddCachePoolResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddCachePoolResponseProto::InitAsDefaultInstance() {
}

AddCachePoolResponseProto::AddCachePoolResponseProto(const AddCachePoolResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddCachePoolResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCachePoolResponseProto::~AddCachePoolResponseProto() {
  SharedDtor();
}

void AddCachePoolResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddCachePoolResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCachePoolResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCachePoolResponseProto_descriptor_;
}

const AddCachePoolResponseProto& AddCachePoolResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AddCachePoolResponseProto* AddCachePoolResponseProto::default_instance_ = NULL;

AddCachePoolResponseProto* AddCachePoolResponseProto::New() const {
  return new AddCachePoolResponseProto;
}

void AddCachePoolResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCachePoolResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AddCachePoolResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddCachePoolResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddCachePoolResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCachePoolResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCachePoolResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCachePoolResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCachePoolResponseProto::MergeFrom(const AddCachePoolResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCachePoolResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCachePoolResponseProto::CopyFrom(const AddCachePoolResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCachePoolResponseProto::IsInitialized() const {

  return true;
}

void AddCachePoolResponseProto::Swap(AddCachePoolResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCachePoolResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCachePoolResponseProto_descriptor_;
  metadata.reflection = AddCachePoolResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyCachePoolRequestProto::kInfoFieldNumber;
#endif  // !_MSC_VER

ModifyCachePoolRequestProto::ModifyCachePoolRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyCachePoolRequestProto::InitAsDefaultInstance() {
  info_ = const_cast< ::Hdfs::Internal::CachePoolInfoProto*>(&::Hdfs::Internal::CachePoolInfoProto::default_instance());
}

ModifyCachePoolRequestProto::ModifyCachePoolRequestProto(const ModifyCachePoolRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyCachePoolRequestProto::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyCachePoolRequestProto::~ModifyCachePoolRequestProto() {
  SharedDtor();
}

void ModifyCachePoolRequestProto::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ModifyCachePoolRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyCachePoolRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyCachePoolRequestProto_descriptor_;
}

const ModifyCachePoolRequestProto& ModifyCachePoolRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ModifyCachePoolRequestProto* ModifyCachePoolRequestProto::default_instance_ = NULL;

ModifyCachePoolRequestProto* ModifyCachePoolRequestProto::New() const {
  return new ModifyCachePoolRequestProto;
}

void ModifyCachePoolRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Hdfs::Internal::CachePoolInfoProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyCachePoolRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.CachePoolInfoProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModifyCachePoolRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyCachePoolRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyCachePoolRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.CachePoolInfoProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyCachePoolRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyCachePoolRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyCachePoolRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyCachePoolRequestProto::MergeFrom(const ModifyCachePoolRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Hdfs::Internal::CachePoolInfoProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyCachePoolRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyCachePoolRequestProto::CopyFrom(const ModifyCachePoolRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyCachePoolRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ModifyCachePoolRequestProto::Swap(ModifyCachePoolRequestProto* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyCachePoolRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyCachePoolRequestProto_descriptor_;
  metadata.reflection = ModifyCachePoolRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ModifyCachePoolResponseProto::ModifyCachePoolResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModifyCachePoolResponseProto::InitAsDefaultInstance() {
}

ModifyCachePoolResponseProto::ModifyCachePoolResponseProto(const ModifyCachePoolResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModifyCachePoolResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyCachePoolResponseProto::~ModifyCachePoolResponseProto() {
  SharedDtor();
}

void ModifyCachePoolResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModifyCachePoolResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyCachePoolResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyCachePoolResponseProto_descriptor_;
}

const ModifyCachePoolResponseProto& ModifyCachePoolResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ModifyCachePoolResponseProto* ModifyCachePoolResponseProto::default_instance_ = NULL;

ModifyCachePoolResponseProto* ModifyCachePoolResponseProto::New() const {
  return new ModifyCachePoolResponseProto;
}

void ModifyCachePoolResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyCachePoolResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ModifyCachePoolResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModifyCachePoolResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModifyCachePoolResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyCachePoolResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyCachePoolResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyCachePoolResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyCachePoolResponseProto::MergeFrom(const ModifyCachePoolResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyCachePoolResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyCachePoolResponseProto::CopyFrom(const ModifyCachePoolResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyCachePoolResponseProto::IsInitialized() const {

  return true;
}

void ModifyCachePoolResponseProto::Swap(ModifyCachePoolResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyCachePoolResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyCachePoolResponseProto_descriptor_;
  metadata.reflection = ModifyCachePoolResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveCachePoolRequestProto::kPoolNameFieldNumber;
#endif  // !_MSC_VER

RemoveCachePoolRequestProto::RemoveCachePoolRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveCachePoolRequestProto::InitAsDefaultInstance() {
}

RemoveCachePoolRequestProto::RemoveCachePoolRequestProto(const RemoveCachePoolRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveCachePoolRequestProto::SharedCtor() {
  _cached_size_ = 0;
  poolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveCachePoolRequestProto::~RemoveCachePoolRequestProto() {
  SharedDtor();
}

void RemoveCachePoolRequestProto::SharedDtor() {
  if (poolname_ != &::google::protobuf::internal::kEmptyString) {
    delete poolname_;
  }
  if (this != default_instance_) {
  }
}

void RemoveCachePoolRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveCachePoolRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveCachePoolRequestProto_descriptor_;
}

const RemoveCachePoolRequestProto& RemoveCachePoolRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RemoveCachePoolRequestProto* RemoveCachePoolRequestProto::default_instance_ = NULL;

RemoveCachePoolRequestProto* RemoveCachePoolRequestProto::New() const {
  return new RemoveCachePoolRequestProto;
}

void RemoveCachePoolRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poolname()) {
      if (poolname_ != &::google::protobuf::internal::kEmptyString) {
        poolname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveCachePoolRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string poolName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poolname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poolname().data(), this->poolname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveCachePoolRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string poolName = 1;
  if (has_poolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolname().data(), this->poolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poolname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveCachePoolRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string poolName = 1;
  if (has_poolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolname().data(), this->poolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poolname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveCachePoolRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string poolName = 1;
    if (has_poolname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poolname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveCachePoolRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveCachePoolRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveCachePoolRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveCachePoolRequestProto::MergeFrom(const RemoveCachePoolRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poolname()) {
      set_poolname(from.poolname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveCachePoolRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCachePoolRequestProto::CopyFrom(const RemoveCachePoolRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCachePoolRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveCachePoolRequestProto::Swap(RemoveCachePoolRequestProto* other) {
  if (other != this) {
    std::swap(poolname_, other->poolname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveCachePoolRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveCachePoolRequestProto_descriptor_;
  metadata.reflection = RemoveCachePoolRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RemoveCachePoolResponseProto::RemoveCachePoolResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveCachePoolResponseProto::InitAsDefaultInstance() {
}

RemoveCachePoolResponseProto::RemoveCachePoolResponseProto(const RemoveCachePoolResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveCachePoolResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveCachePoolResponseProto::~RemoveCachePoolResponseProto() {
  SharedDtor();
}

void RemoveCachePoolResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveCachePoolResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveCachePoolResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveCachePoolResponseProto_descriptor_;
}

const RemoveCachePoolResponseProto& RemoveCachePoolResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RemoveCachePoolResponseProto* RemoveCachePoolResponseProto::default_instance_ = NULL;

RemoveCachePoolResponseProto* RemoveCachePoolResponseProto::New() const {
  return new RemoveCachePoolResponseProto;
}

void RemoveCachePoolResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveCachePoolResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RemoveCachePoolResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveCachePoolResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveCachePoolResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveCachePoolResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveCachePoolResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveCachePoolResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveCachePoolResponseProto::MergeFrom(const RemoveCachePoolResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveCachePoolResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCachePoolResponseProto::CopyFrom(const RemoveCachePoolResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCachePoolResponseProto::IsInitialized() const {

  return true;
}

void RemoveCachePoolResponseProto::Swap(RemoveCachePoolResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveCachePoolResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveCachePoolResponseProto_descriptor_;
  metadata.reflection = RemoveCachePoolResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListCachePoolsRequestProto::kPrevPoolNameFieldNumber;
#endif  // !_MSC_VER

ListCachePoolsRequestProto::ListCachePoolsRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListCachePoolsRequestProto::InitAsDefaultInstance() {
}

ListCachePoolsRequestProto::ListCachePoolsRequestProto(const ListCachePoolsRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListCachePoolsRequestProto::SharedCtor() {
  _cached_size_ = 0;
  prevpoolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListCachePoolsRequestProto::~ListCachePoolsRequestProto() {
  SharedDtor();
}

void ListCachePoolsRequestProto::SharedDtor() {
  if (prevpoolname_ != &::google::protobuf::internal::kEmptyString) {
    delete prevpoolname_;
  }
  if (this != default_instance_) {
  }
}

void ListCachePoolsRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCachePoolsRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListCachePoolsRequestProto_descriptor_;
}

const ListCachePoolsRequestProto& ListCachePoolsRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ListCachePoolsRequestProto* ListCachePoolsRequestProto::default_instance_ = NULL;

ListCachePoolsRequestProto* ListCachePoolsRequestProto::New() const {
  return new ListCachePoolsRequestProto;
}

void ListCachePoolsRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prevpoolname()) {
      if (prevpoolname_ != &::google::protobuf::internal::kEmptyString) {
        prevpoolname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListCachePoolsRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string prevPoolName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prevpoolname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prevpoolname().data(), this->prevpoolname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListCachePoolsRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string prevPoolName = 1;
  if (has_prevpoolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prevpoolname().data(), this->prevpoolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->prevpoolname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListCachePoolsRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string prevPoolName = 1;
  if (has_prevpoolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prevpoolname().data(), this->prevpoolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prevpoolname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListCachePoolsRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string prevPoolName = 1;
    if (has_prevpoolname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prevpoolname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCachePoolsRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListCachePoolsRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListCachePoolsRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListCachePoolsRequestProto::MergeFrom(const ListCachePoolsRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prevpoolname()) {
      set_prevpoolname(from.prevpoolname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListCachePoolsRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCachePoolsRequestProto::CopyFrom(const ListCachePoolsRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCachePoolsRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ListCachePoolsRequestProto::Swap(ListCachePoolsRequestProto* other) {
  if (other != this) {
    std::swap(prevpoolname_, other->prevpoolname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListCachePoolsRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListCachePoolsRequestProto_descriptor_;
  metadata.reflection = ListCachePoolsRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListCachePoolsResponseProto::kEntriesFieldNumber;
const int ListCachePoolsResponseProto::kHasMoreFieldNumber;
#endif  // !_MSC_VER

ListCachePoolsResponseProto::ListCachePoolsResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListCachePoolsResponseProto::InitAsDefaultInstance() {
}

ListCachePoolsResponseProto::ListCachePoolsResponseProto(const ListCachePoolsResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListCachePoolsResponseProto::SharedCtor() {
  _cached_size_ = 0;
  hasmore_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListCachePoolsResponseProto::~ListCachePoolsResponseProto() {
  SharedDtor();
}

void ListCachePoolsResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListCachePoolsResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCachePoolsResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListCachePoolsResponseProto_descriptor_;
}

const ListCachePoolsResponseProto& ListCachePoolsResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

ListCachePoolsResponseProto* ListCachePoolsResponseProto::default_instance_ = NULL;

ListCachePoolsResponseProto* ListCachePoolsResponseProto::New() const {
  return new ListCachePoolsResponseProto;
}

void ListCachePoolsResponseProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    hasmore_ = false;
  }
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListCachePoolsResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectTag(16)) goto parse_hasMore;
        break;
      }

      // required bool hasMore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasmore_)));
          set_has_hasmore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListCachePoolsResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entries(i), output);
  }

  // required bool hasMore = 2;
  if (has_hasmore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasmore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListCachePoolsResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entries(i), target);
  }

  // required bool hasMore = 2;
  if (has_hasmore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasmore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListCachePoolsResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bool hasMore = 2;
    if (has_hasmore()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Hdfs.Internal.CachePoolEntryProto entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCachePoolsResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListCachePoolsResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListCachePoolsResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListCachePoolsResponseProto::MergeFrom(const ListCachePoolsResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_hasmore()) {
      set_hasmore(from.hasmore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListCachePoolsResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCachePoolsResponseProto::CopyFrom(const ListCachePoolsResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCachePoolsResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < entries_size(); i++) {
    if (!this->entries(i).IsInitialized()) return false;
  }
  return true;
}

void ListCachePoolsResponseProto::Swap(ListCachePoolsResponseProto* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(hasmore_, other->hasmore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListCachePoolsResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListCachePoolsResponseProto_descriptor_;
  metadata.reflection = ListCachePoolsResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CachePoolEntryProto::kInfoFieldNumber;
const int CachePoolEntryProto::kStatsFieldNumber;
#endif  // !_MSC_VER

CachePoolEntryProto::CachePoolEntryProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CachePoolEntryProto::InitAsDefaultInstance() {
  info_ = const_cast< ::Hdfs::Internal::CachePoolInfoProto*>(&::Hdfs::Internal::CachePoolInfoProto::default_instance());
  stats_ = const_cast< ::Hdfs::Internal::CachePoolStatsProto*>(&::Hdfs::Internal::CachePoolStatsProto::default_instance());
}

CachePoolEntryProto::CachePoolEntryProto(const CachePoolEntryProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CachePoolEntryProto::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  stats_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachePoolEntryProto::~CachePoolEntryProto() {
  SharedDtor();
}

void CachePoolEntryProto::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete stats_;
  }
}

void CachePoolEntryProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CachePoolEntryProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CachePoolEntryProto_descriptor_;
}

const CachePoolEntryProto& CachePoolEntryProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CachePoolEntryProto* CachePoolEntryProto::default_instance_ = NULL;

CachePoolEntryProto* CachePoolEntryProto::New() const {
  return new CachePoolEntryProto;
}

void CachePoolEntryProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Hdfs::Internal::CachePoolInfoProto::Clear();
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::Hdfs::Internal::CachePoolStatsProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CachePoolEntryProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.CachePoolInfoProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stats;
        break;
      }

      // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachePoolEntryProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CachePoolEntryProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.CachePoolInfoProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
  if (has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stats(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CachePoolEntryProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.CachePoolInfoProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required .Hdfs.Internal.CachePoolStatsProto stats = 2;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachePoolEntryProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CachePoolEntryProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CachePoolEntryProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CachePoolEntryProto::MergeFrom(const CachePoolEntryProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Hdfs::Internal::CachePoolInfoProto::MergeFrom(from.info());
    }
    if (from.has_stats()) {
      mutable_stats()->::Hdfs::Internal::CachePoolStatsProto::MergeFrom(from.stats());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CachePoolEntryProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CachePoolEntryProto::CopyFrom(const CachePoolEntryProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachePoolEntryProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stats()) {
    if (!this->stats().IsInitialized()) return false;
  }
  return true;
}

void CachePoolEntryProto::Swap(CachePoolEntryProto* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(stats_, other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CachePoolEntryProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CachePoolEntryProto_descriptor_;
  metadata.reflection = CachePoolEntryProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileLinkInfoRequestProto::kSrcFieldNumber;
#endif  // !_MSC_VER

GetFileLinkInfoRequestProto::GetFileLinkInfoRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileLinkInfoRequestProto::InitAsDefaultInstance() {
}

GetFileLinkInfoRequestProto::GetFileLinkInfoRequestProto(const GetFileLinkInfoRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileLinkInfoRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileLinkInfoRequestProto::~GetFileLinkInfoRequestProto() {
  SharedDtor();
}

void GetFileLinkInfoRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void GetFileLinkInfoRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileLinkInfoRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileLinkInfoRequestProto_descriptor_;
}

const GetFileLinkInfoRequestProto& GetFileLinkInfoRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetFileLinkInfoRequestProto* GetFileLinkInfoRequestProto::default_instance_ = NULL;

GetFileLinkInfoRequestProto* GetFileLinkInfoRequestProto::New() const {
  return new GetFileLinkInfoRequestProto;
}

void GetFileLinkInfoRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileLinkInfoRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileLinkInfoRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileLinkInfoRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileLinkInfoRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileLinkInfoRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileLinkInfoRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileLinkInfoRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileLinkInfoRequestProto::MergeFrom(const GetFileLinkInfoRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileLinkInfoRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileLinkInfoRequestProto::CopyFrom(const GetFileLinkInfoRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileLinkInfoRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetFileLinkInfoRequestProto::Swap(GetFileLinkInfoRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileLinkInfoRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileLinkInfoRequestProto_descriptor_;
  metadata.reflection = GetFileLinkInfoRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileLinkInfoResponseProto::kFsFieldNumber;
#endif  // !_MSC_VER

GetFileLinkInfoResponseProto::GetFileLinkInfoResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileLinkInfoResponseProto::InitAsDefaultInstance() {
  fs_ = const_cast< ::Hdfs::Internal::HdfsFileStatusProto*>(&::Hdfs::Internal::HdfsFileStatusProto::default_instance());
}

GetFileLinkInfoResponseProto::GetFileLinkInfoResponseProto(const GetFileLinkInfoResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileLinkInfoResponseProto::SharedCtor() {
  _cached_size_ = 0;
  fs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileLinkInfoResponseProto::~GetFileLinkInfoResponseProto() {
  SharedDtor();
}

void GetFileLinkInfoResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete fs_;
  }
}

void GetFileLinkInfoResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileLinkInfoResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileLinkInfoResponseProto_descriptor_;
}

const GetFileLinkInfoResponseProto& GetFileLinkInfoResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetFileLinkInfoResponseProto* GetFileLinkInfoResponseProto::default_instance_ = NULL;

GetFileLinkInfoResponseProto* GetFileLinkInfoResponseProto::New() const {
  return new GetFileLinkInfoResponseProto;
}

void GetFileLinkInfoResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fs()) {
      if (fs_ != NULL) fs_->::Hdfs::Internal::HdfsFileStatusProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileLinkInfoResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileLinkInfoResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  if (has_fs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileLinkInfoResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
  if (has_fs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileLinkInfoResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Hdfs.Internal.HdfsFileStatusProto fs = 1;
    if (has_fs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileLinkInfoResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileLinkInfoResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileLinkInfoResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileLinkInfoResponseProto::MergeFrom(const GetFileLinkInfoResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fs()) {
      mutable_fs()->::Hdfs::Internal::HdfsFileStatusProto::MergeFrom(from.fs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileLinkInfoResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileLinkInfoResponseProto::CopyFrom(const GetFileLinkInfoResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileLinkInfoResponseProto::IsInitialized() const {

  if (has_fs()) {
    if (!this->fs().IsInitialized()) return false;
  }
  return true;
}

void GetFileLinkInfoResponseProto::Swap(GetFileLinkInfoResponseProto* other) {
  if (other != this) {
    std::swap(fs_, other->fs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileLinkInfoResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileLinkInfoResponseProto_descriptor_;
  metadata.reflection = GetFileLinkInfoResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetContentSummaryRequestProto::kPathFieldNumber;
#endif  // !_MSC_VER

GetContentSummaryRequestProto::GetContentSummaryRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetContentSummaryRequestProto::InitAsDefaultInstance() {
}

GetContentSummaryRequestProto::GetContentSummaryRequestProto(const GetContentSummaryRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetContentSummaryRequestProto::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetContentSummaryRequestProto::~GetContentSummaryRequestProto() {
  SharedDtor();
}

void GetContentSummaryRequestProto::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void GetContentSummaryRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContentSummaryRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetContentSummaryRequestProto_descriptor_;
}

const GetContentSummaryRequestProto& GetContentSummaryRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetContentSummaryRequestProto* GetContentSummaryRequestProto::default_instance_ = NULL;

GetContentSummaryRequestProto* GetContentSummaryRequestProto::New() const {
  return new GetContentSummaryRequestProto;
}

void GetContentSummaryRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetContentSummaryRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetContentSummaryRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetContentSummaryRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetContentSummaryRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContentSummaryRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetContentSummaryRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetContentSummaryRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetContentSummaryRequestProto::MergeFrom(const GetContentSummaryRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetContentSummaryRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContentSummaryRequestProto::CopyFrom(const GetContentSummaryRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContentSummaryRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetContentSummaryRequestProto::Swap(GetContentSummaryRequestProto* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetContentSummaryRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetContentSummaryRequestProto_descriptor_;
  metadata.reflection = GetContentSummaryRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetContentSummaryResponseProto::kSummaryFieldNumber;
#endif  // !_MSC_VER

GetContentSummaryResponseProto::GetContentSummaryResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetContentSummaryResponseProto::InitAsDefaultInstance() {
  summary_ = const_cast< ::Hdfs::Internal::ContentSummaryProto*>(&::Hdfs::Internal::ContentSummaryProto::default_instance());
}

GetContentSummaryResponseProto::GetContentSummaryResponseProto(const GetContentSummaryResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetContentSummaryResponseProto::SharedCtor() {
  _cached_size_ = 0;
  summary_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetContentSummaryResponseProto::~GetContentSummaryResponseProto() {
  SharedDtor();
}

void GetContentSummaryResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete summary_;
  }
}

void GetContentSummaryResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetContentSummaryResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetContentSummaryResponseProto_descriptor_;
}

const GetContentSummaryResponseProto& GetContentSummaryResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetContentSummaryResponseProto* GetContentSummaryResponseProto::default_instance_ = NULL;

GetContentSummaryResponseProto* GetContentSummaryResponseProto::New() const {
  return new GetContentSummaryResponseProto;
}

void GetContentSummaryResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_summary()) {
      if (summary_ != NULL) summary_->::Hdfs::Internal::ContentSummaryProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetContentSummaryResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.ContentSummaryProto summary = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetContentSummaryResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.ContentSummaryProto summary = 1;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->summary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetContentSummaryResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.ContentSummaryProto summary = 1;
  if (has_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->summary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetContentSummaryResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.ContentSummaryProto summary = 1;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetContentSummaryResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetContentSummaryResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetContentSummaryResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetContentSummaryResponseProto::MergeFrom(const GetContentSummaryResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summary()) {
      mutable_summary()->::Hdfs::Internal::ContentSummaryProto::MergeFrom(from.summary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetContentSummaryResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetContentSummaryResponseProto::CopyFrom(const GetContentSummaryResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetContentSummaryResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_summary()) {
    if (!this->summary().IsInitialized()) return false;
  }
  return true;
}

void GetContentSummaryResponseProto::Swap(GetContentSummaryResponseProto* other) {
  if (other != this) {
    std::swap(summary_, other->summary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetContentSummaryResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetContentSummaryResponseProto_descriptor_;
  metadata.reflection = GetContentSummaryResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetQuotaRequestProto::kPathFieldNumber;
const int SetQuotaRequestProto::kNamespaceQuotaFieldNumber;
const int SetQuotaRequestProto::kDiskspaceQuotaFieldNumber;
#endif  // !_MSC_VER

SetQuotaRequestProto::SetQuotaRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetQuotaRequestProto::InitAsDefaultInstance() {
}

SetQuotaRequestProto::SetQuotaRequestProto(const SetQuotaRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetQuotaRequestProto::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  namespacequota_ = GOOGLE_ULONGLONG(0);
  diskspacequota_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetQuotaRequestProto::~SetQuotaRequestProto() {
  SharedDtor();
}

void SetQuotaRequestProto::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void SetQuotaRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetQuotaRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetQuotaRequestProto_descriptor_;
}

const SetQuotaRequestProto& SetQuotaRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetQuotaRequestProto* SetQuotaRequestProto::default_instance_ = NULL;

SetQuotaRequestProto* SetQuotaRequestProto::New() const {
  return new SetQuotaRequestProto;
}

void SetQuotaRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    namespacequota_ = GOOGLE_ULONGLONG(0);
    diskspacequota_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetQuotaRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_namespaceQuota;
        break;
      }

      // required uint64 namespaceQuota = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_namespaceQuota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &namespacequota_)));
          set_has_namespacequota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diskspaceQuota;
        break;
      }

      // required uint64 diskspaceQuota = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diskspaceQuota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diskspacequota_)));
          set_has_diskspacequota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetQuotaRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // required uint64 namespaceQuota = 2;
  if (has_namespacequota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->namespacequota(), output);
  }

  // required uint64 diskspaceQuota = 3;
  if (has_diskspacequota()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->diskspacequota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetQuotaRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // required uint64 namespaceQuota = 2;
  if (has_namespacequota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->namespacequota(), target);
  }

  // required uint64 diskspaceQuota = 3;
  if (has_diskspacequota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->diskspacequota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetQuotaRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // required uint64 namespaceQuota = 2;
    if (has_namespacequota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->namespacequota());
    }

    // required uint64 diskspaceQuota = 3;
    if (has_diskspacequota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->diskspacequota());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetQuotaRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetQuotaRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetQuotaRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetQuotaRequestProto::MergeFrom(const SetQuotaRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_namespacequota()) {
      set_namespacequota(from.namespacequota());
    }
    if (from.has_diskspacequota()) {
      set_diskspacequota(from.diskspacequota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetQuotaRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetQuotaRequestProto::CopyFrom(const SetQuotaRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetQuotaRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetQuotaRequestProto::Swap(SetQuotaRequestProto* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(namespacequota_, other->namespacequota_);
    std::swap(diskspacequota_, other->diskspacequota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetQuotaRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetQuotaRequestProto_descriptor_;
  metadata.reflection = SetQuotaRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetQuotaResponseProto::SetQuotaResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetQuotaResponseProto::InitAsDefaultInstance() {
}

SetQuotaResponseProto::SetQuotaResponseProto(const SetQuotaResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetQuotaResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetQuotaResponseProto::~SetQuotaResponseProto() {
  SharedDtor();
}

void SetQuotaResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetQuotaResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetQuotaResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetQuotaResponseProto_descriptor_;
}

const SetQuotaResponseProto& SetQuotaResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetQuotaResponseProto* SetQuotaResponseProto::default_instance_ = NULL;

SetQuotaResponseProto* SetQuotaResponseProto::New() const {
  return new SetQuotaResponseProto;
}

void SetQuotaResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetQuotaResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetQuotaResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetQuotaResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetQuotaResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetQuotaResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetQuotaResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetQuotaResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetQuotaResponseProto::MergeFrom(const SetQuotaResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetQuotaResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetQuotaResponseProto::CopyFrom(const SetQuotaResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetQuotaResponseProto::IsInitialized() const {

  return true;
}

void SetQuotaResponseProto::Swap(SetQuotaResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetQuotaResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetQuotaResponseProto_descriptor_;
  metadata.reflection = SetQuotaResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FsyncRequestProto::kSrcFieldNumber;
const int FsyncRequestProto::kClientFieldNumber;
const int FsyncRequestProto::kLastBlockLengthFieldNumber;
#endif  // !_MSC_VER

FsyncRequestProto::FsyncRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FsyncRequestProto::InitAsDefaultInstance() {
}

FsyncRequestProto::FsyncRequestProto(const FsyncRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FsyncRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastblocklength_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FsyncRequestProto::~FsyncRequestProto() {
  SharedDtor();
}

void FsyncRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (client_ != &::google::protobuf::internal::kEmptyString) {
    delete client_;
  }
  if (this != default_instance_) {
  }
}

void FsyncRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsyncRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FsyncRequestProto_descriptor_;
}

const FsyncRequestProto& FsyncRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

FsyncRequestProto* FsyncRequestProto::default_instance_ = NULL;

FsyncRequestProto* FsyncRequestProto::New() const {
  return new FsyncRequestProto;
}

void FsyncRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_client()) {
      if (client_ != &::google::protobuf::internal::kEmptyString) {
        client_->clear();
      }
    }
    lastblocklength_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FsyncRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // required string client = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client().data(), this->client().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastBlockLength;
        break;
      }

      // optional sint64 lastBlockLength = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastBlockLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lastblocklength_)));
          set_has_lastblocklength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FsyncRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required string client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client().data(), this->client().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->client(), output);
  }

  // optional sint64 lastBlockLength = 3 [default = -1];
  if (has_lastblocklength()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->lastblocklength(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FsyncRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client().data(), this->client().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client(), target);
  }

  // optional sint64 lastBlockLength = 3 [default = -1];
  if (has_lastblocklength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->lastblocklength(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FsyncRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string client = 2;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client());
    }

    // optional sint64 lastBlockLength = 3 [default = -1];
    if (has_lastblocklength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lastblocklength());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsyncRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FsyncRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FsyncRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FsyncRequestProto::MergeFrom(const FsyncRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_client()) {
      set_client(from.client());
    }
    if (from.has_lastblocklength()) {
      set_lastblocklength(from.lastblocklength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FsyncRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsyncRequestProto::CopyFrom(const FsyncRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsyncRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FsyncRequestProto::Swap(FsyncRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(client_, other->client_);
    std::swap(lastblocklength_, other->lastblocklength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FsyncRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FsyncRequestProto_descriptor_;
  metadata.reflection = FsyncRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FsyncResponseProto::FsyncResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FsyncResponseProto::InitAsDefaultInstance() {
}

FsyncResponseProto::FsyncResponseProto(const FsyncResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FsyncResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FsyncResponseProto::~FsyncResponseProto() {
  SharedDtor();
}

void FsyncResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FsyncResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsyncResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FsyncResponseProto_descriptor_;
}

const FsyncResponseProto& FsyncResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

FsyncResponseProto* FsyncResponseProto::default_instance_ = NULL;

FsyncResponseProto* FsyncResponseProto::New() const {
  return new FsyncResponseProto;
}

void FsyncResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FsyncResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FsyncResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FsyncResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FsyncResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsyncResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FsyncResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FsyncResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FsyncResponseProto::MergeFrom(const FsyncResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FsyncResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsyncResponseProto::CopyFrom(const FsyncResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsyncResponseProto::IsInitialized() const {

  return true;
}

void FsyncResponseProto::Swap(FsyncResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FsyncResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FsyncResponseProto_descriptor_;
  metadata.reflection = FsyncResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTimesRequestProto::kSrcFieldNumber;
const int SetTimesRequestProto::kMtimeFieldNumber;
const int SetTimesRequestProto::kAtimeFieldNumber;
#endif  // !_MSC_VER

SetTimesRequestProto::SetTimesRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTimesRequestProto::InitAsDefaultInstance() {
}

SetTimesRequestProto::SetTimesRequestProto(const SetTimesRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTimesRequestProto::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mtime_ = GOOGLE_ULONGLONG(0);
  atime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTimesRequestProto::~SetTimesRequestProto() {
  SharedDtor();
}

void SetTimesRequestProto::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (this != default_instance_) {
  }
}

void SetTimesRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTimesRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTimesRequestProto_descriptor_;
}

const SetTimesRequestProto& SetTimesRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetTimesRequestProto* SetTimesRequestProto::default_instance_ = NULL;

SetTimesRequestProto* SetTimesRequestProto::New() const {
  return new SetTimesRequestProto;
}

void SetTimesRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    mtime_ = GOOGLE_ULONGLONG(0);
    atime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTimesRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mtime;
        break;
      }

      // required uint64 mtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_atime;
        break;
      }

      // required uint64 atime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atime_)));
          set_has_atime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTimesRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }

  // required uint64 mtime = 2;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mtime(), output);
  }

  // required uint64 atime = 3;
  if (has_atime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->atime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTimesRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required uint64 mtime = 2;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mtime(), target);
  }

  // required uint64 atime = 3;
  if (has_atime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->atime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTimesRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required uint64 mtime = 2;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mtime());
    }

    // required uint64 atime = 3;
    if (has_atime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTimesRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTimesRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTimesRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTimesRequestProto::MergeFrom(const SetTimesRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_atime()) {
      set_atime(from.atime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTimesRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTimesRequestProto::CopyFrom(const SetTimesRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTimesRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetTimesRequestProto::Swap(SetTimesRequestProto* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(mtime_, other->mtime_);
    std::swap(atime_, other->atime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTimesRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTimesRequestProto_descriptor_;
  metadata.reflection = SetTimesRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetTimesResponseProto::SetTimesResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTimesResponseProto::InitAsDefaultInstance() {
}

SetTimesResponseProto::SetTimesResponseProto(const SetTimesResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTimesResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTimesResponseProto::~SetTimesResponseProto() {
  SharedDtor();
}

void SetTimesResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTimesResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTimesResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTimesResponseProto_descriptor_;
}

const SetTimesResponseProto& SetTimesResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetTimesResponseProto* SetTimesResponseProto::default_instance_ = NULL;

SetTimesResponseProto* SetTimesResponseProto::New() const {
  return new SetTimesResponseProto;
}

void SetTimesResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTimesResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetTimesResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTimesResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTimesResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTimesResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTimesResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTimesResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTimesResponseProto::MergeFrom(const SetTimesResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTimesResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTimesResponseProto::CopyFrom(const SetTimesResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTimesResponseProto::IsInitialized() const {

  return true;
}

void SetTimesResponseProto::Swap(SetTimesResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTimesResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTimesResponseProto_descriptor_;
  metadata.reflection = SetTimesResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateSymlinkRequestProto::kTargetFieldNumber;
const int CreateSymlinkRequestProto::kLinkFieldNumber;
const int CreateSymlinkRequestProto::kDirPermFieldNumber;
const int CreateSymlinkRequestProto::kCreateParentFieldNumber;
#endif  // !_MSC_VER

CreateSymlinkRequestProto::CreateSymlinkRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSymlinkRequestProto::InitAsDefaultInstance() {
  dirperm_ = const_cast< ::Hdfs::Internal::FsPermissionProto*>(&::Hdfs::Internal::FsPermissionProto::default_instance());
}

CreateSymlinkRequestProto::CreateSymlinkRequestProto(const CreateSymlinkRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSymlinkRequestProto::SharedCtor() {
  _cached_size_ = 0;
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dirperm_ = NULL;
  createparent_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSymlinkRequestProto::~CreateSymlinkRequestProto() {
  SharedDtor();
}

void CreateSymlinkRequestProto::SharedDtor() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (link_ != &::google::protobuf::internal::kEmptyString) {
    delete link_;
  }
  if (this != default_instance_) {
    delete dirperm_;
  }
}

void CreateSymlinkRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSymlinkRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSymlinkRequestProto_descriptor_;
}

const CreateSymlinkRequestProto& CreateSymlinkRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CreateSymlinkRequestProto* CreateSymlinkRequestProto::default_instance_ = NULL;

CreateSymlinkRequestProto* CreateSymlinkRequestProto::New() const {
  return new CreateSymlinkRequestProto;
}

void CreateSymlinkRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
    if (has_link()) {
      if (link_ != &::google::protobuf::internal::kEmptyString) {
        link_->clear();
      }
    }
    if (has_dirperm()) {
      if (dirperm_ != NULL) dirperm_->::Hdfs::Internal::FsPermissionProto::Clear();
    }
    createparent_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSymlinkRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_link;
        break;
      }

      // required string link = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->link().data(), this->link().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dirPerm;
        break;
      }

      // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dirPerm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dirperm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createParent;
        break;
      }

      // required bool createParent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createParent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &createparent_)));
          set_has_createparent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateSymlinkRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->target(), output);
  }

  // required string link = 2;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->link(), output);
  }

  // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
  if (has_dirperm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dirperm(), output);
  }

  // required bool createParent = 4;
  if (has_createparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->createparent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSymlinkRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string target = 1;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target(), target);
  }

  // required string link = 2;
  if (has_link()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link(), target);
  }

  // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
  if (has_dirperm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dirperm(), target);
  }

  // required bool createParent = 4;
  if (has_createparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->createparent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSymlinkRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // required string link = 2;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
    }

    // required .Hdfs.Internal.FsPermissionProto dirPerm = 3;
    if (has_dirperm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirperm());
    }

    // required bool createParent = 4;
    if (has_createparent()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSymlinkRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSymlinkRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSymlinkRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSymlinkRequestProto::MergeFrom(const CreateSymlinkRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_link()) {
      set_link(from.link());
    }
    if (from.has_dirperm()) {
      mutable_dirperm()->::Hdfs::Internal::FsPermissionProto::MergeFrom(from.dirperm());
    }
    if (from.has_createparent()) {
      set_createparent(from.createparent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSymlinkRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSymlinkRequestProto::CopyFrom(const CreateSymlinkRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSymlinkRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_dirperm()) {
    if (!this->dirperm().IsInitialized()) return false;
  }
  return true;
}

void CreateSymlinkRequestProto::Swap(CreateSymlinkRequestProto* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(link_, other->link_);
    std::swap(dirperm_, other->dirperm_);
    std::swap(createparent_, other->createparent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSymlinkRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSymlinkRequestProto_descriptor_;
  metadata.reflection = CreateSymlinkRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CreateSymlinkResponseProto::CreateSymlinkResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSymlinkResponseProto::InitAsDefaultInstance() {
}

CreateSymlinkResponseProto::CreateSymlinkResponseProto(const CreateSymlinkResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSymlinkResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSymlinkResponseProto::~CreateSymlinkResponseProto() {
  SharedDtor();
}

void CreateSymlinkResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateSymlinkResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSymlinkResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSymlinkResponseProto_descriptor_;
}

const CreateSymlinkResponseProto& CreateSymlinkResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CreateSymlinkResponseProto* CreateSymlinkResponseProto::default_instance_ = NULL;

CreateSymlinkResponseProto* CreateSymlinkResponseProto::New() const {
  return new CreateSymlinkResponseProto;
}

void CreateSymlinkResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSymlinkResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CreateSymlinkResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSymlinkResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSymlinkResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSymlinkResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSymlinkResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSymlinkResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSymlinkResponseProto::MergeFrom(const CreateSymlinkResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSymlinkResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSymlinkResponseProto::CopyFrom(const CreateSymlinkResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSymlinkResponseProto::IsInitialized() const {

  return true;
}

void CreateSymlinkResponseProto::Swap(CreateSymlinkResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSymlinkResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSymlinkResponseProto_descriptor_;
  metadata.reflection = CreateSymlinkResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLinkTargetRequestProto::kPathFieldNumber;
#endif  // !_MSC_VER

GetLinkTargetRequestProto::GetLinkTargetRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLinkTargetRequestProto::InitAsDefaultInstance() {
}

GetLinkTargetRequestProto::GetLinkTargetRequestProto(const GetLinkTargetRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLinkTargetRequestProto::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLinkTargetRequestProto::~GetLinkTargetRequestProto() {
  SharedDtor();
}

void GetLinkTargetRequestProto::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void GetLinkTargetRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLinkTargetRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLinkTargetRequestProto_descriptor_;
}

const GetLinkTargetRequestProto& GetLinkTargetRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetLinkTargetRequestProto* GetLinkTargetRequestProto::default_instance_ = NULL;

GetLinkTargetRequestProto* GetLinkTargetRequestProto::New() const {
  return new GetLinkTargetRequestProto;
}

void GetLinkTargetRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLinkTargetRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLinkTargetRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLinkTargetRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLinkTargetRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLinkTargetRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLinkTargetRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLinkTargetRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLinkTargetRequestProto::MergeFrom(const GetLinkTargetRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLinkTargetRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLinkTargetRequestProto::CopyFrom(const GetLinkTargetRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkTargetRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetLinkTargetRequestProto::Swap(GetLinkTargetRequestProto* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLinkTargetRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLinkTargetRequestProto_descriptor_;
  metadata.reflection = GetLinkTargetRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLinkTargetResponseProto::kTargetPathFieldNumber;
#endif  // !_MSC_VER

GetLinkTargetResponseProto::GetLinkTargetResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLinkTargetResponseProto::InitAsDefaultInstance() {
}

GetLinkTargetResponseProto::GetLinkTargetResponseProto(const GetLinkTargetResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLinkTargetResponseProto::SharedCtor() {
  _cached_size_ = 0;
  targetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLinkTargetResponseProto::~GetLinkTargetResponseProto() {
  SharedDtor();
}

void GetLinkTargetResponseProto::SharedDtor() {
  if (targetpath_ != &::google::protobuf::internal::kEmptyString) {
    delete targetpath_;
  }
  if (this != default_instance_) {
  }
}

void GetLinkTargetResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLinkTargetResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLinkTargetResponseProto_descriptor_;
}

const GetLinkTargetResponseProto& GetLinkTargetResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetLinkTargetResponseProto* GetLinkTargetResponseProto::default_instance_ = NULL;

GetLinkTargetResponseProto* GetLinkTargetResponseProto::New() const {
  return new GetLinkTargetResponseProto;
}

void GetLinkTargetResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_targetpath()) {
      if (targetpath_ != &::google::protobuf::internal::kEmptyString) {
        targetpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLinkTargetResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string targetPath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetpath().data(), this->targetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLinkTargetResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string targetPath = 1;
  if (has_targetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetpath().data(), this->targetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->targetpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLinkTargetResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string targetPath = 1;
  if (has_targetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetpath().data(), this->targetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->targetpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLinkTargetResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string targetPath = 1;
    if (has_targetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLinkTargetResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLinkTargetResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLinkTargetResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLinkTargetResponseProto::MergeFrom(const GetLinkTargetResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetpath()) {
      set_targetpath(from.targetpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLinkTargetResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLinkTargetResponseProto::CopyFrom(const GetLinkTargetResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLinkTargetResponseProto::IsInitialized() const {

  return true;
}

void GetLinkTargetResponseProto::Swap(GetLinkTargetResponseProto* other) {
  if (other != this) {
    std::swap(targetpath_, other->targetpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLinkTargetResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLinkTargetResponseProto_descriptor_;
  metadata.reflection = GetLinkTargetResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBlockForPipelineRequestProto::kBlockFieldNumber;
const int UpdateBlockForPipelineRequestProto::kClientNameFieldNumber;
#endif  // !_MSC_VER

UpdateBlockForPipelineRequestProto::UpdateBlockForPipelineRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBlockForPipelineRequestProto::InitAsDefaultInstance() {
  block_ = const_cast< ::Hdfs::Internal::ExtendedBlockProto*>(&::Hdfs::Internal::ExtendedBlockProto::default_instance());
}

UpdateBlockForPipelineRequestProto::UpdateBlockForPipelineRequestProto(const UpdateBlockForPipelineRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBlockForPipelineRequestProto::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBlockForPipelineRequestProto::~UpdateBlockForPipelineRequestProto() {
  SharedDtor();
}

void UpdateBlockForPipelineRequestProto::SharedDtor() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
    delete block_;
  }
}

void UpdateBlockForPipelineRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBlockForPipelineRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBlockForPipelineRequestProto_descriptor_;
}

const UpdateBlockForPipelineRequestProto& UpdateBlockForPipelineRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

UpdateBlockForPipelineRequestProto* UpdateBlockForPipelineRequestProto::default_instance_ = NULL;

UpdateBlockForPipelineRequestProto* UpdateBlockForPipelineRequestProto::New() const {
  return new UpdateBlockForPipelineRequestProto;
}

void UpdateBlockForPipelineRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::Hdfs::Internal::ExtendedBlockProto::Clear();
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBlockForPipelineRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.ExtendedBlockProto block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientName;
        break;
      }

      // required string clientName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateBlockForPipelineRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.ExtendedBlockProto block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBlockForPipelineRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.ExtendedBlockProto block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBlockForPipelineRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.ExtendedBlockProto block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

    // required string clientName = 2;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBlockForPipelineRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBlockForPipelineRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBlockForPipelineRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBlockForPipelineRequestProto::MergeFrom(const UpdateBlockForPipelineRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(from.block());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBlockForPipelineRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBlockForPipelineRequestProto::CopyFrom(const UpdateBlockForPipelineRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBlockForPipelineRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  return true;
}

void UpdateBlockForPipelineRequestProto::Swap(UpdateBlockForPipelineRequestProto* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(clientname_, other->clientname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBlockForPipelineRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBlockForPipelineRequestProto_descriptor_;
  metadata.reflection = UpdateBlockForPipelineRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBlockForPipelineResponseProto::kBlockFieldNumber;
#endif  // !_MSC_VER

UpdateBlockForPipelineResponseProto::UpdateBlockForPipelineResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBlockForPipelineResponseProto::InitAsDefaultInstance() {
  block_ = const_cast< ::Hdfs::Internal::LocatedBlockProto*>(&::Hdfs::Internal::LocatedBlockProto::default_instance());
}

UpdateBlockForPipelineResponseProto::UpdateBlockForPipelineResponseProto(const UpdateBlockForPipelineResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBlockForPipelineResponseProto::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBlockForPipelineResponseProto::~UpdateBlockForPipelineResponseProto() {
  SharedDtor();
}

void UpdateBlockForPipelineResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void UpdateBlockForPipelineResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBlockForPipelineResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBlockForPipelineResponseProto_descriptor_;
}

const UpdateBlockForPipelineResponseProto& UpdateBlockForPipelineResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

UpdateBlockForPipelineResponseProto* UpdateBlockForPipelineResponseProto::default_instance_ = NULL;

UpdateBlockForPipelineResponseProto* UpdateBlockForPipelineResponseProto::New() const {
  return new UpdateBlockForPipelineResponseProto;
}

void UpdateBlockForPipelineResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block()) {
      if (block_ != NULL) block_->::Hdfs::Internal::LocatedBlockProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBlockForPipelineResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Hdfs.Internal.LocatedBlockProto block = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateBlockForPipelineResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBlockForPipelineResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Hdfs.Internal.LocatedBlockProto block = 1;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBlockForPipelineResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Hdfs.Internal.LocatedBlockProto block = 1;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBlockForPipelineResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBlockForPipelineResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBlockForPipelineResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBlockForPipelineResponseProto::MergeFrom(const UpdateBlockForPipelineResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block()) {
      mutable_block()->::Hdfs::Internal::LocatedBlockProto::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBlockForPipelineResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBlockForPipelineResponseProto::CopyFrom(const UpdateBlockForPipelineResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBlockForPipelineResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_block()) {
    if (!this->block().IsInitialized()) return false;
  }
  return true;
}

void UpdateBlockForPipelineResponseProto::Swap(UpdateBlockForPipelineResponseProto* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBlockForPipelineResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBlockForPipelineResponseProto_descriptor_;
  metadata.reflection = UpdateBlockForPipelineResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePipelineRequestProto::kClientNameFieldNumber;
const int UpdatePipelineRequestProto::kOldBlockFieldNumber;
const int UpdatePipelineRequestProto::kNewBlockFieldNumber;
const int UpdatePipelineRequestProto::kNewNodesFieldNumber;
const int UpdatePipelineRequestProto::kStorageIDsFieldNumber;
#endif  // !_MSC_VER

UpdatePipelineRequestProto::UpdatePipelineRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePipelineRequestProto::InitAsDefaultInstance() {
  oldblock_ = const_cast< ::Hdfs::Internal::ExtendedBlockProto*>(&::Hdfs::Internal::ExtendedBlockProto::default_instance());
  newblock_ = const_cast< ::Hdfs::Internal::ExtendedBlockProto*>(&::Hdfs::Internal::ExtendedBlockProto::default_instance());
}

UpdatePipelineRequestProto::UpdatePipelineRequestProto(const UpdatePipelineRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePipelineRequestProto::SharedCtor() {
  _cached_size_ = 0;
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldblock_ = NULL;
  newblock_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePipelineRequestProto::~UpdatePipelineRequestProto() {
  SharedDtor();
}

void UpdatePipelineRequestProto::SharedDtor() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (this != default_instance_) {
    delete oldblock_;
    delete newblock_;
  }
}

void UpdatePipelineRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePipelineRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePipelineRequestProto_descriptor_;
}

const UpdatePipelineRequestProto& UpdatePipelineRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

UpdatePipelineRequestProto* UpdatePipelineRequestProto::default_instance_ = NULL;

UpdatePipelineRequestProto* UpdatePipelineRequestProto::New() const {
  return new UpdatePipelineRequestProto;
}

void UpdatePipelineRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
    if (has_oldblock()) {
      if (oldblock_ != NULL) oldblock_->::Hdfs::Internal::ExtendedBlockProto::Clear();
    }
    if (has_newblock()) {
      if (newblock_ != NULL) newblock_->::Hdfs::Internal::ExtendedBlockProto::Clear();
    }
  }
  newnodes_.Clear();
  storageids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePipelineRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_oldBlock;
        break;
      }

      // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oldBlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oldblock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_newBlock;
        break;
      }

      // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newBlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newblock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newNodes;
        break;
      }

      // repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newnodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_newNodes;
        if (input->ExpectTag(42)) goto parse_storageIDs;
        break;
      }

      // repeated string storageIDs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storageIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_storageids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->storageids(this->storageids_size() - 1).data(),
            this->storageids(this->storageids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_storageIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePipelineRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string clientName = 1;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientname(), output);
  }

  // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
  if (has_oldblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->oldblock(), output);
  }

  // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
  if (has_newblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->newblock(), output);
  }

  // repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
  for (int i = 0; i < this->newnodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->newnodes(i), output);
  }

  // repeated string storageIDs = 5;
  for (int i = 0; i < this->storageids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->storageids(i).data(), this->storageids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->storageids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePipelineRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string clientName = 1;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientname(), target);
  }

  // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
  if (has_oldblock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->oldblock(), target);
  }

  // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
  if (has_newblock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->newblock(), target);
  }

  // repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
  for (int i = 0; i < this->newnodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->newnodes(i), target);
  }

  // repeated string storageIDs = 5;
  for (int i = 0; i < this->storageids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->storageids(i).data(), this->storageids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->storageids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePipelineRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string clientName = 1;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }

    // required .Hdfs.Internal.ExtendedBlockProto oldBlock = 2;
    if (has_oldblock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oldblock());
    }

    // required .Hdfs.Internal.ExtendedBlockProto newBlock = 3;
    if (has_newblock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newblock());
    }

  }
  // repeated .Hdfs.Internal.DatanodeIDProto newNodes = 4;
  total_size += 1 * this->newnodes_size();
  for (int i = 0; i < this->newnodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newnodes(i));
  }

  // repeated string storageIDs = 5;
  total_size += 1 * this->storageids_size();
  for (int i = 0; i < this->storageids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->storageids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePipelineRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePipelineRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePipelineRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePipelineRequestProto::MergeFrom(const UpdatePipelineRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  newnodes_.MergeFrom(from.newnodes_);
  storageids_.MergeFrom(from.storageids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
    if (from.has_oldblock()) {
      mutable_oldblock()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(from.oldblock());
    }
    if (from.has_newblock()) {
      mutable_newblock()->::Hdfs::Internal::ExtendedBlockProto::MergeFrom(from.newblock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePipelineRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePipelineRequestProto::CopyFrom(const UpdatePipelineRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePipelineRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_oldblock()) {
    if (!this->oldblock().IsInitialized()) return false;
  }
  if (has_newblock()) {
    if (!this->newblock().IsInitialized()) return false;
  }
  for (int i = 0; i < newnodes_size(); i++) {
    if (!this->newnodes(i).IsInitialized()) return false;
  }
  return true;
}

void UpdatePipelineRequestProto::Swap(UpdatePipelineRequestProto* other) {
  if (other != this) {
    std::swap(clientname_, other->clientname_);
    std::swap(oldblock_, other->oldblock_);
    std::swap(newblock_, other->newblock_);
    newnodes_.Swap(&other->newnodes_);
    storageids_.Swap(&other->storageids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePipelineRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePipelineRequestProto_descriptor_;
  metadata.reflection = UpdatePipelineRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UpdatePipelineResponseProto::UpdatePipelineResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePipelineResponseProto::InitAsDefaultInstance() {
}

UpdatePipelineResponseProto::UpdatePipelineResponseProto(const UpdatePipelineResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePipelineResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePipelineResponseProto::~UpdatePipelineResponseProto() {
  SharedDtor();
}

void UpdatePipelineResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdatePipelineResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePipelineResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePipelineResponseProto_descriptor_;
}

const UpdatePipelineResponseProto& UpdatePipelineResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

UpdatePipelineResponseProto* UpdatePipelineResponseProto::default_instance_ = NULL;

UpdatePipelineResponseProto* UpdatePipelineResponseProto::New() const {
  return new UpdatePipelineResponseProto;
}

void UpdatePipelineResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePipelineResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UpdatePipelineResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePipelineResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePipelineResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePipelineResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePipelineResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePipelineResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePipelineResponseProto::MergeFrom(const UpdatePipelineResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePipelineResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePipelineResponseProto::CopyFrom(const UpdatePipelineResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePipelineResponseProto::IsInitialized() const {

  return true;
}

void UpdatePipelineResponseProto::Swap(UpdatePipelineResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePipelineResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePipelineResponseProto_descriptor_;
  metadata.reflection = UpdatePipelineResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetBalancerBandwidthRequestProto::kBandwidthFieldNumber;
#endif  // !_MSC_VER

SetBalancerBandwidthRequestProto::SetBalancerBandwidthRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetBalancerBandwidthRequestProto::InitAsDefaultInstance() {
}

SetBalancerBandwidthRequestProto::SetBalancerBandwidthRequestProto(const SetBalancerBandwidthRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetBalancerBandwidthRequestProto::SharedCtor() {
  _cached_size_ = 0;
  bandwidth_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetBalancerBandwidthRequestProto::~SetBalancerBandwidthRequestProto() {
  SharedDtor();
}

void SetBalancerBandwidthRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetBalancerBandwidthRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBalancerBandwidthRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetBalancerBandwidthRequestProto_descriptor_;
}

const SetBalancerBandwidthRequestProto& SetBalancerBandwidthRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetBalancerBandwidthRequestProto* SetBalancerBandwidthRequestProto::default_instance_ = NULL;

SetBalancerBandwidthRequestProto* SetBalancerBandwidthRequestProto::New() const {
  return new SetBalancerBandwidthRequestProto;
}

void SetBalancerBandwidthRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bandwidth_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetBalancerBandwidthRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 bandwidth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetBalancerBandwidthRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 bandwidth = 1;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bandwidth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetBalancerBandwidthRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 bandwidth = 1;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bandwidth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetBalancerBandwidthRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 bandwidth = 1;
    if (has_bandwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bandwidth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBalancerBandwidthRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetBalancerBandwidthRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetBalancerBandwidthRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetBalancerBandwidthRequestProto::MergeFrom(const SetBalancerBandwidthRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetBalancerBandwidthRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBalancerBandwidthRequestProto::CopyFrom(const SetBalancerBandwidthRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBalancerBandwidthRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetBalancerBandwidthRequestProto::Swap(SetBalancerBandwidthRequestProto* other) {
  if (other != this) {
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetBalancerBandwidthRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetBalancerBandwidthRequestProto_descriptor_;
  metadata.reflection = SetBalancerBandwidthRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SetBalancerBandwidthResponseProto::SetBalancerBandwidthResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetBalancerBandwidthResponseProto::InitAsDefaultInstance() {
}

SetBalancerBandwidthResponseProto::SetBalancerBandwidthResponseProto(const SetBalancerBandwidthResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetBalancerBandwidthResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetBalancerBandwidthResponseProto::~SetBalancerBandwidthResponseProto() {
  SharedDtor();
}

void SetBalancerBandwidthResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetBalancerBandwidthResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBalancerBandwidthResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetBalancerBandwidthResponseProto_descriptor_;
}

const SetBalancerBandwidthResponseProto& SetBalancerBandwidthResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

SetBalancerBandwidthResponseProto* SetBalancerBandwidthResponseProto::default_instance_ = NULL;

SetBalancerBandwidthResponseProto* SetBalancerBandwidthResponseProto::New() const {
  return new SetBalancerBandwidthResponseProto;
}

void SetBalancerBandwidthResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetBalancerBandwidthResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SetBalancerBandwidthResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetBalancerBandwidthResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetBalancerBandwidthResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBalancerBandwidthResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetBalancerBandwidthResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetBalancerBandwidthResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetBalancerBandwidthResponseProto::MergeFrom(const SetBalancerBandwidthResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetBalancerBandwidthResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBalancerBandwidthResponseProto::CopyFrom(const SetBalancerBandwidthResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBalancerBandwidthResponseProto::IsInitialized() const {

  return true;
}

void SetBalancerBandwidthResponseProto::Swap(SetBalancerBandwidthResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetBalancerBandwidthResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetBalancerBandwidthResponseProto_descriptor_;
  metadata.reflection = SetBalancerBandwidthResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetDataEncryptionKeyRequestProto::GetDataEncryptionKeyRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDataEncryptionKeyRequestProto::InitAsDefaultInstance() {
}

GetDataEncryptionKeyRequestProto::GetDataEncryptionKeyRequestProto(const GetDataEncryptionKeyRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDataEncryptionKeyRequestProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDataEncryptionKeyRequestProto::~GetDataEncryptionKeyRequestProto() {
  SharedDtor();
}

void GetDataEncryptionKeyRequestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDataEncryptionKeyRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataEncryptionKeyRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDataEncryptionKeyRequestProto_descriptor_;
}

const GetDataEncryptionKeyRequestProto& GetDataEncryptionKeyRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetDataEncryptionKeyRequestProto* GetDataEncryptionKeyRequestProto::default_instance_ = NULL;

GetDataEncryptionKeyRequestProto* GetDataEncryptionKeyRequestProto::New() const {
  return new GetDataEncryptionKeyRequestProto;
}

void GetDataEncryptionKeyRequestProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDataEncryptionKeyRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetDataEncryptionKeyRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDataEncryptionKeyRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDataEncryptionKeyRequestProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataEncryptionKeyRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDataEncryptionKeyRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDataEncryptionKeyRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDataEncryptionKeyRequestProto::MergeFrom(const GetDataEncryptionKeyRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDataEncryptionKeyRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataEncryptionKeyRequestProto::CopyFrom(const GetDataEncryptionKeyRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataEncryptionKeyRequestProto::IsInitialized() const {

  return true;
}

void GetDataEncryptionKeyRequestProto::Swap(GetDataEncryptionKeyRequestProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDataEncryptionKeyRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDataEncryptionKeyRequestProto_descriptor_;
  metadata.reflection = GetDataEncryptionKeyRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetDataEncryptionKeyResponseProto::kDataEncryptionKeyFieldNumber;
#endif  // !_MSC_VER

GetDataEncryptionKeyResponseProto::GetDataEncryptionKeyResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetDataEncryptionKeyResponseProto::InitAsDefaultInstance() {
  dataencryptionkey_ = const_cast< ::Hdfs::Internal::DataEncryptionKeyProto*>(&::Hdfs::Internal::DataEncryptionKeyProto::default_instance());
}

GetDataEncryptionKeyResponseProto::GetDataEncryptionKeyResponseProto(const GetDataEncryptionKeyResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetDataEncryptionKeyResponseProto::SharedCtor() {
  _cached_size_ = 0;
  dataencryptionkey_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDataEncryptionKeyResponseProto::~GetDataEncryptionKeyResponseProto() {
  SharedDtor();
}

void GetDataEncryptionKeyResponseProto::SharedDtor() {
  if (this != default_instance_) {
    delete dataencryptionkey_;
  }
}

void GetDataEncryptionKeyResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDataEncryptionKeyResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDataEncryptionKeyResponseProto_descriptor_;
}

const GetDataEncryptionKeyResponseProto& GetDataEncryptionKeyResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

GetDataEncryptionKeyResponseProto* GetDataEncryptionKeyResponseProto::default_instance_ = NULL;

GetDataEncryptionKeyResponseProto* GetDataEncryptionKeyResponseProto::New() const {
  return new GetDataEncryptionKeyResponseProto;
}

void GetDataEncryptionKeyResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dataencryptionkey()) {
      if (dataencryptionkey_ != NULL) dataencryptionkey_->::Hdfs::Internal::DataEncryptionKeyProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDataEncryptionKeyResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dataencryptionkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDataEncryptionKeyResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
  if (has_dataencryptionkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dataencryptionkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDataEncryptionKeyResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
  if (has_dataencryptionkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dataencryptionkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDataEncryptionKeyResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Hdfs.Internal.DataEncryptionKeyProto dataEncryptionKey = 1;
    if (has_dataencryptionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dataencryptionkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDataEncryptionKeyResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetDataEncryptionKeyResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDataEncryptionKeyResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetDataEncryptionKeyResponseProto::MergeFrom(const GetDataEncryptionKeyResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataencryptionkey()) {
      mutable_dataencryptionkey()->::Hdfs::Internal::DataEncryptionKeyProto::MergeFrom(from.dataencryptionkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDataEncryptionKeyResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataEncryptionKeyResponseProto::CopyFrom(const GetDataEncryptionKeyResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataEncryptionKeyResponseProto::IsInitialized() const {

  if (has_dataencryptionkey()) {
    if (!this->dataencryptionkey().IsInitialized()) return false;
  }
  return true;
}

void GetDataEncryptionKeyResponseProto::Swap(GetDataEncryptionKeyResponseProto* other) {
  if (other != this) {
    std::swap(dataencryptionkey_, other->dataencryptionkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDataEncryptionKeyResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDataEncryptionKeyResponseProto_descriptor_;
  metadata.reflection = GetDataEncryptionKeyResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateSnapshotRequestProto::kSnapshotRootFieldNumber;
const int CreateSnapshotRequestProto::kSnapshotNameFieldNumber;
#endif  // !_MSC_VER

CreateSnapshotRequestProto::CreateSnapshotRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSnapshotRequestProto::InitAsDefaultInstance() {
}

CreateSnapshotRequestProto::CreateSnapshotRequestProto(const CreateSnapshotRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSnapshotRequestProto::SharedCtor() {
  _cached_size_ = 0;
  snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  snapshotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSnapshotRequestProto::~CreateSnapshotRequestProto() {
  SharedDtor();
}

void CreateSnapshotRequestProto::SharedDtor() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (snapshotname_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotname_;
  }
  if (this != default_instance_) {
  }
}

void CreateSnapshotRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSnapshotRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSnapshotRequestProto_descriptor_;
}

const CreateSnapshotRequestProto& CreateSnapshotRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CreateSnapshotRequestProto* CreateSnapshotRequestProto::default_instance_ = NULL;

CreateSnapshotRequestProto* CreateSnapshotRequestProto::New() const {
  return new CreateSnapshotRequestProto;
}

void CreateSnapshotRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshotroot()) {
      if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
        snapshotroot_->clear();
      }
    }
    if (has_snapshotname()) {
      if (snapshotname_ != &::google::protobuf::internal::kEmptyString) {
        snapshotname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSnapshotRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshotRoot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotroot().data(), this->snapshotroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapshotName;
        break;
      }

      // optional string snapshotName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshotName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotname().data(), this->snapshotname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateSnapshotRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshotroot(), output);
  }

  // optional string snapshotName = 2;
  if (has_snapshotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotname().data(), this->snapshotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snapshotname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSnapshotRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshotroot(), target);
  }

  // optional string snapshotName = 2;
  if (has_snapshotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotname().data(), this->snapshotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapshotname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSnapshotRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshotRoot = 1;
    if (has_snapshotroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotroot());
    }

    // optional string snapshotName = 2;
    if (has_snapshotname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSnapshotRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSnapshotRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSnapshotRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSnapshotRequestProto::MergeFrom(const CreateSnapshotRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotroot()) {
      set_snapshotroot(from.snapshotroot());
    }
    if (from.has_snapshotname()) {
      set_snapshotname(from.snapshotname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSnapshotRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSnapshotRequestProto::CopyFrom(const CreateSnapshotRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateSnapshotRequestProto::Swap(CreateSnapshotRequestProto* other) {
  if (other != this) {
    std::swap(snapshotroot_, other->snapshotroot_);
    std::swap(snapshotname_, other->snapshotname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSnapshotRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSnapshotRequestProto_descriptor_;
  metadata.reflection = CreateSnapshotRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateSnapshotResponseProto::kSnapshotPathFieldNumber;
#endif  // !_MSC_VER

CreateSnapshotResponseProto::CreateSnapshotResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSnapshotResponseProto::InitAsDefaultInstance() {
}

CreateSnapshotResponseProto::CreateSnapshotResponseProto(const CreateSnapshotResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSnapshotResponseProto::SharedCtor() {
  _cached_size_ = 0;
  snapshotpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSnapshotResponseProto::~CreateSnapshotResponseProto() {
  SharedDtor();
}

void CreateSnapshotResponseProto::SharedDtor() {
  if (snapshotpath_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotpath_;
  }
  if (this != default_instance_) {
  }
}

void CreateSnapshotResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSnapshotResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSnapshotResponseProto_descriptor_;
}

const CreateSnapshotResponseProto& CreateSnapshotResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

CreateSnapshotResponseProto* CreateSnapshotResponseProto::default_instance_ = NULL;

CreateSnapshotResponseProto* CreateSnapshotResponseProto::New() const {
  return new CreateSnapshotResponseProto;
}

void CreateSnapshotResponseProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshotpath()) {
      if (snapshotpath_ != &::google::protobuf::internal::kEmptyString) {
        snapshotpath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSnapshotResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshotPath = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotpath().data(), this->snapshotpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateSnapshotResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string snapshotPath = 1;
  if (has_snapshotpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotpath().data(), this->snapshotpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshotpath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSnapshotResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string snapshotPath = 1;
  if (has_snapshotpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotpath().data(), this->snapshotpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshotpath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSnapshotResponseProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshotPath = 1;
    if (has_snapshotpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotpath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSnapshotResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSnapshotResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSnapshotResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSnapshotResponseProto::MergeFrom(const CreateSnapshotResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotpath()) {
      set_snapshotpath(from.snapshotpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSnapshotResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSnapshotResponseProto::CopyFrom(const CreateSnapshotResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSnapshotResponseProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateSnapshotResponseProto::Swap(CreateSnapshotResponseProto* other) {
  if (other != this) {
    std::swap(snapshotpath_, other->snapshotpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSnapshotResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSnapshotResponseProto_descriptor_;
  metadata.reflection = CreateSnapshotResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameSnapshotRequestProto::kSnapshotRootFieldNumber;
const int RenameSnapshotRequestProto::kSnapshotOldNameFieldNumber;
const int RenameSnapshotRequestProto::kSnapshotNewNameFieldNumber;
#endif  // !_MSC_VER

RenameSnapshotRequestProto::RenameSnapshotRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameSnapshotRequestProto::InitAsDefaultInstance() {
}

RenameSnapshotRequestProto::RenameSnapshotRequestProto(const RenameSnapshotRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameSnapshotRequestProto::SharedCtor() {
  _cached_size_ = 0;
  snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  snapshotoldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  snapshotnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameSnapshotRequestProto::~RenameSnapshotRequestProto() {
  SharedDtor();
}

void RenameSnapshotRequestProto::SharedDtor() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (snapshotoldname_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotoldname_;
  }
  if (snapshotnewname_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotnewname_;
  }
  if (this != default_instance_) {
  }
}

void RenameSnapshotRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameSnapshotRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameSnapshotRequestProto_descriptor_;
}

const RenameSnapshotRequestProto& RenameSnapshotRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RenameSnapshotRequestProto* RenameSnapshotRequestProto::default_instance_ = NULL;

RenameSnapshotRequestProto* RenameSnapshotRequestProto::New() const {
  return new RenameSnapshotRequestProto;
}

void RenameSnapshotRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshotroot()) {
      if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
        snapshotroot_->clear();
      }
    }
    if (has_snapshotoldname()) {
      if (snapshotoldname_ != &::google::protobuf::internal::kEmptyString) {
        snapshotoldname_->clear();
      }
    }
    if (has_snapshotnewname()) {
      if (snapshotnewname_ != &::google::protobuf::internal::kEmptyString) {
        snapshotnewname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameSnapshotRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshotRoot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotroot().data(), this->snapshotroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapshotOldName;
        break;
      }

      // required string snapshotOldName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshotOldName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotoldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotoldname().data(), this->snapshotoldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_snapshotNewName;
        break;
      }

      // required string snapshotNewName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshotNewName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotnewname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotnewname().data(), this->snapshotnewname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameSnapshotRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshotroot(), output);
  }

  // required string snapshotOldName = 2;
  if (has_snapshotoldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotoldname().data(), this->snapshotoldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snapshotoldname(), output);
  }

  // required string snapshotNewName = 3;
  if (has_snapshotnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotnewname().data(), this->snapshotnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->snapshotnewname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameSnapshotRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshotroot(), target);
  }

  // required string snapshotOldName = 2;
  if (has_snapshotoldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotoldname().data(), this->snapshotoldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapshotoldname(), target);
  }

  // required string snapshotNewName = 3;
  if (has_snapshotnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotnewname().data(), this->snapshotnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snapshotnewname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameSnapshotRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshotRoot = 1;
    if (has_snapshotroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotroot());
    }

    // required string snapshotOldName = 2;
    if (has_snapshotoldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotoldname());
    }

    // required string snapshotNewName = 3;
    if (has_snapshotnewname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotnewname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameSnapshotRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameSnapshotRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameSnapshotRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameSnapshotRequestProto::MergeFrom(const RenameSnapshotRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotroot()) {
      set_snapshotroot(from.snapshotroot());
    }
    if (from.has_snapshotoldname()) {
      set_snapshotoldname(from.snapshotoldname());
    }
    if (from.has_snapshotnewname()) {
      set_snapshotnewname(from.snapshotnewname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameSnapshotRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameSnapshotRequestProto::CopyFrom(const RenameSnapshotRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RenameSnapshotRequestProto::Swap(RenameSnapshotRequestProto* other) {
  if (other != this) {
    std::swap(snapshotroot_, other->snapshotroot_);
    std::swap(snapshotoldname_, other->snapshotoldname_);
    std::swap(snapshotnewname_, other->snapshotnewname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameSnapshotRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameSnapshotRequestProto_descriptor_;
  metadata.reflection = RenameSnapshotRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RenameSnapshotResponseProto::RenameSnapshotResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameSnapshotResponseProto::InitAsDefaultInstance() {
}

RenameSnapshotResponseProto::RenameSnapshotResponseProto(const RenameSnapshotResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameSnapshotResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameSnapshotResponseProto::~RenameSnapshotResponseProto() {
  SharedDtor();
}

void RenameSnapshotResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RenameSnapshotResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameSnapshotResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameSnapshotResponseProto_descriptor_;
}

const RenameSnapshotResponseProto& RenameSnapshotResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

RenameSnapshotResponseProto* RenameSnapshotResponseProto::default_instance_ = NULL;

RenameSnapshotResponseProto* RenameSnapshotResponseProto::New() const {
  return new RenameSnapshotResponseProto;
}

void RenameSnapshotResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameSnapshotResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RenameSnapshotResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameSnapshotResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameSnapshotResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameSnapshotResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameSnapshotResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameSnapshotResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameSnapshotResponseProto::MergeFrom(const RenameSnapshotResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameSnapshotResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameSnapshotResponseProto::CopyFrom(const RenameSnapshotResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameSnapshotResponseProto::IsInitialized() const {

  return true;
}

void RenameSnapshotResponseProto::Swap(RenameSnapshotResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameSnapshotResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameSnapshotResponseProto_descriptor_;
  metadata.reflection = RenameSnapshotResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllowSnapshotRequestProto::kSnapshotRootFieldNumber;
#endif  // !_MSC_VER

AllowSnapshotRequestProto::AllowSnapshotRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllowSnapshotRequestProto::InitAsDefaultInstance() {
}

AllowSnapshotRequestProto::AllowSnapshotRequestProto(const AllowSnapshotRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllowSnapshotRequestProto::SharedCtor() {
  _cached_size_ = 0;
  snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllowSnapshotRequestProto::~AllowSnapshotRequestProto() {
  SharedDtor();
}

void AllowSnapshotRequestProto::SharedDtor() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (this != default_instance_) {
  }
}

void AllowSnapshotRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllowSnapshotRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllowSnapshotRequestProto_descriptor_;
}

const AllowSnapshotRequestProto& AllowSnapshotRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AllowSnapshotRequestProto* AllowSnapshotRequestProto::default_instance_ = NULL;

AllowSnapshotRequestProto* AllowSnapshotRequestProto::New() const {
  return new AllowSnapshotRequestProto;
}

void AllowSnapshotRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshotroot()) {
      if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
        snapshotroot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllowSnapshotRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshotRoot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotroot().data(), this->snapshotroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllowSnapshotRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshotroot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllowSnapshotRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshotroot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllowSnapshotRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshotRoot = 1;
    if (has_snapshotroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotroot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllowSnapshotRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllowSnapshotRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllowSnapshotRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllowSnapshotRequestProto::MergeFrom(const AllowSnapshotRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotroot()) {
      set_snapshotroot(from.snapshotroot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllowSnapshotRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllowSnapshotRequestProto::CopyFrom(const AllowSnapshotRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllowSnapshotRequestProto::Swap(AllowSnapshotRequestProto* other) {
  if (other != this) {
    std::swap(snapshotroot_, other->snapshotroot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllowSnapshotRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllowSnapshotRequestProto_descriptor_;
  metadata.reflection = AllowSnapshotRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AllowSnapshotResponseProto::AllowSnapshotResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllowSnapshotResponseProto::InitAsDefaultInstance() {
}

AllowSnapshotResponseProto::AllowSnapshotResponseProto(const AllowSnapshotResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllowSnapshotResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllowSnapshotResponseProto::~AllowSnapshotResponseProto() {
  SharedDtor();
}

void AllowSnapshotResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllowSnapshotResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllowSnapshotResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllowSnapshotResponseProto_descriptor_;
}

const AllowSnapshotResponseProto& AllowSnapshotResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

AllowSnapshotResponseProto* AllowSnapshotResponseProto::default_instance_ = NULL;

AllowSnapshotResponseProto* AllowSnapshotResponseProto::New() const {
  return new AllowSnapshotResponseProto;
}

void AllowSnapshotResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllowSnapshotResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AllowSnapshotResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllowSnapshotResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllowSnapshotResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllowSnapshotResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllowSnapshotResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllowSnapshotResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllowSnapshotResponseProto::MergeFrom(const AllowSnapshotResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllowSnapshotResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllowSnapshotResponseProto::CopyFrom(const AllowSnapshotResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllowSnapshotResponseProto::IsInitialized() const {

  return true;
}

void AllowSnapshotResponseProto::Swap(AllowSnapshotResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllowSnapshotResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllowSnapshotResponseProto_descriptor_;
  metadata.reflection = AllowSnapshotResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisallowSnapshotRequestProto::kSnapshotRootFieldNumber;
#endif  // !_MSC_VER

DisallowSnapshotRequestProto::DisallowSnapshotRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisallowSnapshotRequestProto::InitAsDefaultInstance() {
}

DisallowSnapshotRequestProto::DisallowSnapshotRequestProto(const DisallowSnapshotRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisallowSnapshotRequestProto::SharedCtor() {
  _cached_size_ = 0;
  snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisallowSnapshotRequestProto::~DisallowSnapshotRequestProto() {
  SharedDtor();
}

void DisallowSnapshotRequestProto::SharedDtor() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (this != default_instance_) {
  }
}

void DisallowSnapshotRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisallowSnapshotRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisallowSnapshotRequestProto_descriptor_;
}

const DisallowSnapshotRequestProto& DisallowSnapshotRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

DisallowSnapshotRequestProto* DisallowSnapshotRequestProto::default_instance_ = NULL;

DisallowSnapshotRequestProto* DisallowSnapshotRequestProto::New() const {
  return new DisallowSnapshotRequestProto;
}

void DisallowSnapshotRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshotroot()) {
      if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
        snapshotroot_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisallowSnapshotRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshotRoot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotroot().data(), this->snapshotroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisallowSnapshotRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshotroot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisallowSnapshotRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshotroot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisallowSnapshotRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshotRoot = 1;
    if (has_snapshotroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotroot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisallowSnapshotRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisallowSnapshotRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisallowSnapshotRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisallowSnapshotRequestProto::MergeFrom(const DisallowSnapshotRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotroot()) {
      set_snapshotroot(from.snapshotroot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisallowSnapshotRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisallowSnapshotRequestProto::CopyFrom(const DisallowSnapshotRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisallowSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DisallowSnapshotRequestProto::Swap(DisallowSnapshotRequestProto* other) {
  if (other != this) {
    std::swap(snapshotroot_, other->snapshotroot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisallowSnapshotRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisallowSnapshotRequestProto_descriptor_;
  metadata.reflection = DisallowSnapshotRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DisallowSnapshotResponseProto::DisallowSnapshotResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisallowSnapshotResponseProto::InitAsDefaultInstance() {
}

DisallowSnapshotResponseProto::DisallowSnapshotResponseProto(const DisallowSnapshotResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisallowSnapshotResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisallowSnapshotResponseProto::~DisallowSnapshotResponseProto() {
  SharedDtor();
}

void DisallowSnapshotResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisallowSnapshotResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisallowSnapshotResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisallowSnapshotResponseProto_descriptor_;
}

const DisallowSnapshotResponseProto& DisallowSnapshotResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

DisallowSnapshotResponseProto* DisallowSnapshotResponseProto::default_instance_ = NULL;

DisallowSnapshotResponseProto* DisallowSnapshotResponseProto::New() const {
  return new DisallowSnapshotResponseProto;
}

void DisallowSnapshotResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisallowSnapshotResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DisallowSnapshotResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisallowSnapshotResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisallowSnapshotResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisallowSnapshotResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisallowSnapshotResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisallowSnapshotResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisallowSnapshotResponseProto::MergeFrom(const DisallowSnapshotResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisallowSnapshotResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisallowSnapshotResponseProto::CopyFrom(const DisallowSnapshotResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisallowSnapshotResponseProto::IsInitialized() const {

  return true;
}

void DisallowSnapshotResponseProto::Swap(DisallowSnapshotResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisallowSnapshotResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisallowSnapshotResponseProto_descriptor_;
  metadata.reflection = DisallowSnapshotResponseProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteSnapshotRequestProto::kSnapshotRootFieldNumber;
const int DeleteSnapshotRequestProto::kSnapshotNameFieldNumber;
#endif  // !_MSC_VER

DeleteSnapshotRequestProto::DeleteSnapshotRequestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSnapshotRequestProto::InitAsDefaultInstance() {
}

DeleteSnapshotRequestProto::DeleteSnapshotRequestProto(const DeleteSnapshotRequestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSnapshotRequestProto::SharedCtor() {
  _cached_size_ = 0;
  snapshotroot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  snapshotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSnapshotRequestProto::~DeleteSnapshotRequestProto() {
  SharedDtor();
}

void DeleteSnapshotRequestProto::SharedDtor() {
  if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotroot_;
  }
  if (snapshotname_ != &::google::protobuf::internal::kEmptyString) {
    delete snapshotname_;
  }
  if (this != default_instance_) {
  }
}

void DeleteSnapshotRequestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSnapshotRequestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSnapshotRequestProto_descriptor_;
}

const DeleteSnapshotRequestProto& DeleteSnapshotRequestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

DeleteSnapshotRequestProto* DeleteSnapshotRequestProto::default_instance_ = NULL;

DeleteSnapshotRequestProto* DeleteSnapshotRequestProto::New() const {
  return new DeleteSnapshotRequestProto;
}

void DeleteSnapshotRequestProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_snapshotroot()) {
      if (snapshotroot_ != &::google::protobuf::internal::kEmptyString) {
        snapshotroot_->clear();
      }
    }
    if (has_snapshotname()) {
      if (snapshotname_ != &::google::protobuf::internal::kEmptyString) {
        snapshotname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSnapshotRequestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string snapshotRoot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotroot()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotroot().data(), this->snapshotroot().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_snapshotName;
        break;
      }

      // required string snapshotName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_snapshotName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshotname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->snapshotname().data(), this->snapshotname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteSnapshotRequestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->snapshotroot(), output);
  }

  // required string snapshotName = 2;
  if (has_snapshotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotname().data(), this->snapshotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->snapshotname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSnapshotRequestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string snapshotRoot = 1;
  if (has_snapshotroot()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotroot().data(), this->snapshotroot().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshotroot(), target);
  }

  // required string snapshotName = 2;
  if (has_snapshotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->snapshotname().data(), this->snapshotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->snapshotname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSnapshotRequestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string snapshotRoot = 1;
    if (has_snapshotroot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotroot());
    }

    // required string snapshotName = 2;
    if (has_snapshotname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshotname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSnapshotRequestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSnapshotRequestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSnapshotRequestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSnapshotRequestProto::MergeFrom(const DeleteSnapshotRequestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_snapshotroot()) {
      set_snapshotroot(from.snapshotroot());
    }
    if (from.has_snapshotname()) {
      set_snapshotname(from.snapshotname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSnapshotRequestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotRequestProto::CopyFrom(const DeleteSnapshotRequestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotRequestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteSnapshotRequestProto::Swap(DeleteSnapshotRequestProto* other) {
  if (other != this) {
    std::swap(snapshotroot_, other->snapshotroot_);
    std::swap(snapshotname_, other->snapshotname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSnapshotRequestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSnapshotRequestProto_descriptor_;
  metadata.reflection = DeleteSnapshotRequestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeleteSnapshotResponseProto::DeleteSnapshotResponseProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteSnapshotResponseProto::InitAsDefaultInstance() {
}

DeleteSnapshotResponseProto::DeleteSnapshotResponseProto(const DeleteSnapshotResponseProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteSnapshotResponseProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteSnapshotResponseProto::~DeleteSnapshotResponseProto() {
  SharedDtor();
}

void DeleteSnapshotResponseProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteSnapshotResponseProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSnapshotResponseProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteSnapshotResponseProto_descriptor_;
}

const DeleteSnapshotResponseProto& DeleteSnapshotResponseProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientNamenodeProtocol_2eproto();
  return *default_instance_;
}

DeleteSnapshotResponseProto* DeleteSnapshotResponseProto::default_instance_ = NULL;

DeleteSnapshotResponseProto* DeleteSnapshotResponseProto::New() const {
  return new DeleteSnapshotResponseProto;
}

void DeleteSnapshotResponseProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteSnapshotResponseProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DeleteSnapshotResponseProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteSnapshotResponseProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteSnapshotResponseProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSnapshotResponseProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteSnapshotResponseProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteSnapshotResponseProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteSnapshotResponseProto::MergeFrom(const DeleteSnapshotResponseProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteSnapshotResponseProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotResponseProto::CopyFrom(const DeleteSnapshotResponseProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotResponseProto::IsInitialized() const {

  return true;
}

void DeleteSnapshotResponseProto::Swap(DeleteSnapshotResponseProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteSnapshotResponseProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteSnapshotResponseProto_descriptor_;
  metadata.reflection = DeleteSnapshotResponseProto_reflection_;
  return metadata;
}


// ===================================================================

ClientNamenodeProtocol::~ClientNamenodeProtocol() {}

const ::google::protobuf::ServiceDescriptor* ClientNamenodeProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientNamenodeProtocol_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* ClientNamenodeProtocol::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientNamenodeProtocol_descriptor_;
}

void ClientNamenodeProtocol::getBlockLocations(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetBlockLocationsRequestProto*,
                         ::Hdfs::Internal::GetBlockLocationsResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getBlockLocations() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getServerDefaults(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetServerDefaultsRequestProto*,
                         ::Hdfs::Internal::GetServerDefaultsResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getServerDefaults() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::create(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::CreateRequestProto*,
                         ::Hdfs::Internal::CreateResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method create() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::append(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::AppendRequestProto*,
                         ::Hdfs::Internal::AppendResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method append() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setReplication(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::SetReplicationRequestProto*,
                         ::Hdfs::Internal::SetReplicationResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setReplication() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setPermission(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::SetPermissionRequestProto*,
                         ::Hdfs::Internal::SetPermissionResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setPermission() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setOwner(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::SetOwnerRequestProto*,
                         ::Hdfs::Internal::SetOwnerResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setOwner() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::abandonBlock(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::AbandonBlockRequestProto*,
                         ::Hdfs::Internal::AbandonBlockResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method abandonBlock() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::addBlock(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::AddBlockRequestProto*,
                         ::Hdfs::Internal::AddBlockResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method addBlock() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getAdditionalDatanode(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto*,
                         ::Hdfs::Internal::GetAdditionalDatanodeResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getAdditionalDatanode() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::complete(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::CompleteRequestProto*,
                         ::Hdfs::Internal::CompleteResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method complete() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::reportBadBlocks(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::ReportBadBlocksRequestProto*,
                         ::Hdfs::Internal::ReportBadBlocksResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method reportBadBlocks() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::concat(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::ConcatRequestProto*,
                         ::Hdfs::Internal::ConcatResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method concat() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::truncate(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::TruncateRequestProto*,
                         ::Hdfs::Internal::TruncateResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method truncate() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getLease(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetLeaseRequestProto*,
                         ::Hdfs::Internal::GetLeaseResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getLease() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::releaseLease(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::ReleaseLeaseRequestProto*,
                         ::Hdfs::Internal::ReleaseLeaseResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method releaseLease() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::rename(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RenameRequestProto*,
                         ::Hdfs::Internal::RenameResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rename() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::rename2(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::Rename2RequestProto*,
                         ::Hdfs::Internal::Rename2ResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rename2() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::deleteFile(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::DeleteRequestProto*,
                         ::Hdfs::Internal::DeleteResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method deleteFile() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::mkdirs(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::MkdirsRequestProto*,
                         ::Hdfs::Internal::MkdirsResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method mkdirs() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getListing(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetListingRequestProto*,
                         ::Hdfs::Internal::GetListingResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getListing() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::renewLease(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RenewLeaseRequestProto*,
                         ::Hdfs::Internal::RenewLeaseResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method renewLease() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::recoverLease(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RecoverLeaseRequestProto*,
                         ::Hdfs::Internal::RecoverLeaseResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method recoverLease() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getFsStats(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetFsStatusRequestProto*,
                         ::Hdfs::Internal::GetFsStatsResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getFsStats() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getDatanodeReport(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetDatanodeReportRequestProto*,
                         ::Hdfs::Internal::GetDatanodeReportResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getDatanodeReport() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getPreferredBlockSize(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto*,
                         ::Hdfs::Internal::GetPreferredBlockSizeResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getPreferredBlockSize() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setSafeMode(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::SetSafeModeRequestProto*,
                         ::Hdfs::Internal::SetSafeModeResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setSafeMode() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::saveNamespace(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::SaveNamespaceRequestProto*,
                         ::Hdfs::Internal::SaveNamespaceResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method saveNamespace() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::rollEdits(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RollEditsRequestProto*,
                         ::Hdfs::Internal::RollEditsResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rollEdits() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::restoreFailedStorage(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RestoreFailedStorageRequestProto*,
                         ::Hdfs::Internal::RestoreFailedStorageResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method restoreFailedStorage() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::refreshNodes(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RefreshNodesRequestProto*,
                         ::Hdfs::Internal::RefreshNodesResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method refreshNodes() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::finalizeUpgrade(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::FinalizeUpgradeRequestProto*,
                         ::Hdfs::Internal::FinalizeUpgradeResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method finalizeUpgrade() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::listCorruptFileBlocks(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto*,
                         ::Hdfs::Internal::ListCorruptFileBlocksResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listCorruptFileBlocks() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::metaSave(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::MetaSaveRequestProto*,
                         ::Hdfs::Internal::MetaSaveResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method metaSave() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getFileInfo(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetFileInfoRequestProto*,
                         ::Hdfs::Internal::GetFileInfoResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getFileInfo() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::addCacheDirective(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::AddCacheDirectiveRequestProto*,
                         ::Hdfs::Internal::AddCacheDirectiveResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method addCacheDirective() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::modifyCacheDirective(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto*,
                         ::Hdfs::Internal::ModifyCacheDirectiveResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method modifyCacheDirective() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::removeCacheDirective(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto*,
                         ::Hdfs::Internal::RemoveCacheDirectiveResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method removeCacheDirective() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::listCacheDirectives(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::ListCacheDirectivesRequestProto*,
                         ::Hdfs::Internal::ListCacheDirectivesResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listCacheDirectives() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::addCachePool(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::AddCachePoolRequestProto*,
                         ::Hdfs::Internal::AddCachePoolResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method addCachePool() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::modifyCachePool(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::ModifyCachePoolRequestProto*,
                         ::Hdfs::Internal::ModifyCachePoolResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method modifyCachePool() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::removeCachePool(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RemoveCachePoolRequestProto*,
                         ::Hdfs::Internal::RemoveCachePoolResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method removeCachePool() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::listCachePools(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::ListCachePoolsRequestProto*,
                         ::Hdfs::Internal::ListCachePoolsResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listCachePools() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getFileLinkInfo(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetFileLinkInfoRequestProto*,
                         ::Hdfs::Internal::GetFileLinkInfoResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getFileLinkInfo() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getContentSummary(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetContentSummaryRequestProto*,
                         ::Hdfs::Internal::GetContentSummaryResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getContentSummary() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setQuota(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::SetQuotaRequestProto*,
                         ::Hdfs::Internal::SetQuotaResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setQuota() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::fsync(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::FsyncRequestProto*,
                         ::Hdfs::Internal::FsyncResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method fsync() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setTimes(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::SetTimesRequestProto*,
                         ::Hdfs::Internal::SetTimesResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setTimes() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::createSymlink(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::CreateSymlinkRequestProto*,
                         ::Hdfs::Internal::CreateSymlinkResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method createSymlink() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getLinkTarget(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetLinkTargetRequestProto*,
                         ::Hdfs::Internal::GetLinkTargetResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getLinkTarget() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::updateBlockForPipeline(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto*,
                         ::Hdfs::Internal::UpdateBlockForPipelineResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method updateBlockForPipeline() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::updatePipeline(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::UpdatePipelineRequestProto*,
                         ::Hdfs::Internal::UpdatePipelineResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method updatePipeline() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getDelegationToken(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetDelegationTokenRequestProto*,
                         ::Hdfs::Internal::GetDelegationTokenResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getDelegationToken() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::renewDelegationToken(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RenewDelegationTokenRequestProto*,
                         ::Hdfs::Internal::RenewDelegationTokenResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method renewDelegationToken() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::cancelDelegationToken(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::CancelDelegationTokenRequestProto*,
                         ::Hdfs::Internal::CancelDelegationTokenResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method cancelDelegationToken() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::setBalancerBandwidth(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::SetBalancerBandwidthRequestProto*,
                         ::Hdfs::Internal::SetBalancerBandwidthResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method setBalancerBandwidth() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getDataEncryptionKey(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto*,
                         ::Hdfs::Internal::GetDataEncryptionKeyResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getDataEncryptionKey() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::createSnapshot(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::CreateSnapshotRequestProto*,
                         ::Hdfs::Internal::CreateSnapshotResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method createSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::renameSnapshot(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::RenameSnapshotRequestProto*,
                         ::Hdfs::Internal::RenameSnapshotResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method renameSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::allowSnapshot(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::AllowSnapshotRequestProto*,
                         ::Hdfs::Internal::AllowSnapshotResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method allowSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::disallowSnapshot(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::DisallowSnapshotRequestProto*,
                         ::Hdfs::Internal::DisallowSnapshotResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method disallowSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getSnapshottableDirListing(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto*,
                         ::Hdfs::Internal::GetSnapshottableDirListingResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getSnapshottableDirListing() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::deleteSnapshot(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::DeleteSnapshotRequestProto*,
                         ::Hdfs::Internal::DeleteSnapshotResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method deleteSnapshot() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getSnapshotDiffReport(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto*,
                         ::Hdfs::Internal::GetSnapshotDiffReportResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getSnapshotDiffReport() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::isFileClosed(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::IsFileClosedRequestProto*,
                         ::Hdfs::Internal::IsFileClosedResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method isFileClosed() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::createEncryptionZone(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::CreateEncryptionZoneRequestProto*,
                         ::Hdfs::Internal::CreateEncryptionZoneResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method createEncryptionZone() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::listEncryptionZones(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::ListEncryptionZonesRequestProto*,
                         ::Hdfs::Internal::ListEncryptionZonesResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method listEncryptionZones() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::getEZForPath(::google::protobuf::RpcController* controller,
                         const ::Hdfs::Internal::GetEZForPathRequestProto*,
                         ::Hdfs::Internal::GetEZForPathResponseProto*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getEZForPath() not implemented.");
  done->Run();
}

void ClientNamenodeProtocol::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), ClientNamenodeProtocol_descriptor_);
  switch(method->index()) {
    case 0:
      getBlockLocations(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetBlockLocationsRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetBlockLocationsResponseProto*>(response),
             done);
      break;
    case 1:
      getServerDefaults(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetServerDefaultsRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetServerDefaultsResponseProto*>(response),
             done);
      break;
    case 2:
      create(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::CreateRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::CreateResponseProto*>(response),
             done);
      break;
    case 3:
      append(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::AppendRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::AppendResponseProto*>(response),
             done);
      break;
    case 4:
      setReplication(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::SetReplicationRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::SetReplicationResponseProto*>(response),
             done);
      break;
    case 5:
      setPermission(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::SetPermissionRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::SetPermissionResponseProto*>(response),
             done);
      break;
    case 6:
      setOwner(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::SetOwnerRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::SetOwnerResponseProto*>(response),
             done);
      break;
    case 7:
      abandonBlock(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::AbandonBlockRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::AbandonBlockResponseProto*>(response),
             done);
      break;
    case 8:
      addBlock(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::AddBlockRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::AddBlockResponseProto*>(response),
             done);
      break;
    case 9:
      getAdditionalDatanode(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetAdditionalDatanodeResponseProto*>(response),
             done);
      break;
    case 10:
      complete(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::CompleteRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::CompleteResponseProto*>(response),
             done);
      break;
    case 11:
      reportBadBlocks(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::ReportBadBlocksRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::ReportBadBlocksResponseProto*>(response),
             done);
      break;
    case 12:
      concat(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::ConcatRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::ConcatResponseProto*>(response),
             done);
      break;
    case 13:
      truncate(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::TruncateRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::TruncateResponseProto*>(response),
             done);
      break;
    case 14:
      getLease(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetLeaseRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetLeaseResponseProto*>(response),
             done);
      break;
    case 15:
      releaseLease(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::ReleaseLeaseRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::ReleaseLeaseResponseProto*>(response),
             done);
      break;
    case 16:
      rename(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RenameRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RenameResponseProto*>(response),
             done);
      break;
    case 17:
      rename2(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::Rename2RequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::Rename2ResponseProto*>(response),
             done);
      break;
    case 18:
      deleteFile(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::DeleteRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::DeleteResponseProto*>(response),
             done);
      break;
    case 19:
      mkdirs(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::MkdirsRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::MkdirsResponseProto*>(response),
             done);
      break;
    case 20:
      getListing(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetListingRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetListingResponseProto*>(response),
             done);
      break;
    case 21:
      renewLease(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RenewLeaseRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RenewLeaseResponseProto*>(response),
             done);
      break;
    case 22:
      recoverLease(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RecoverLeaseRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RecoverLeaseResponseProto*>(response),
             done);
      break;
    case 23:
      getFsStats(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetFsStatusRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetFsStatsResponseProto*>(response),
             done);
      break;
    case 24:
      getDatanodeReport(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetDatanodeReportRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetDatanodeReportResponseProto*>(response),
             done);
      break;
    case 25:
      getPreferredBlockSize(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetPreferredBlockSizeResponseProto*>(response),
             done);
      break;
    case 26:
      setSafeMode(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::SetSafeModeRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::SetSafeModeResponseProto*>(response),
             done);
      break;
    case 27:
      saveNamespace(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::SaveNamespaceRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::SaveNamespaceResponseProto*>(response),
             done);
      break;
    case 28:
      rollEdits(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RollEditsRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RollEditsResponseProto*>(response),
             done);
      break;
    case 29:
      restoreFailedStorage(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RestoreFailedStorageRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RestoreFailedStorageResponseProto*>(response),
             done);
      break;
    case 30:
      refreshNodes(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RefreshNodesRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RefreshNodesResponseProto*>(response),
             done);
      break;
    case 31:
      finalizeUpgrade(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::FinalizeUpgradeRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::FinalizeUpgradeResponseProto*>(response),
             done);
      break;
    case 32:
      listCorruptFileBlocks(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::ListCorruptFileBlocksResponseProto*>(response),
             done);
      break;
    case 33:
      metaSave(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::MetaSaveRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::MetaSaveResponseProto*>(response),
             done);
      break;
    case 34:
      getFileInfo(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetFileInfoRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetFileInfoResponseProto*>(response),
             done);
      break;
    case 35:
      addCacheDirective(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::AddCacheDirectiveRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::AddCacheDirectiveResponseProto*>(response),
             done);
      break;
    case 36:
      modifyCacheDirective(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::ModifyCacheDirectiveResponseProto*>(response),
             done);
      break;
    case 37:
      removeCacheDirective(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RemoveCacheDirectiveResponseProto*>(response),
             done);
      break;
    case 38:
      listCacheDirectives(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::ListCacheDirectivesRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::ListCacheDirectivesResponseProto*>(response),
             done);
      break;
    case 39:
      addCachePool(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::AddCachePoolRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::AddCachePoolResponseProto*>(response),
             done);
      break;
    case 40:
      modifyCachePool(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::ModifyCachePoolRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::ModifyCachePoolResponseProto*>(response),
             done);
      break;
    case 41:
      removeCachePool(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RemoveCachePoolRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RemoveCachePoolResponseProto*>(response),
             done);
      break;
    case 42:
      listCachePools(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::ListCachePoolsRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::ListCachePoolsResponseProto*>(response),
             done);
      break;
    case 43:
      getFileLinkInfo(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetFileLinkInfoRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetFileLinkInfoResponseProto*>(response),
             done);
      break;
    case 44:
      getContentSummary(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetContentSummaryRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetContentSummaryResponseProto*>(response),
             done);
      break;
    case 45:
      setQuota(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::SetQuotaRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::SetQuotaResponseProto*>(response),
             done);
      break;
    case 46:
      fsync(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::FsyncRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::FsyncResponseProto*>(response),
             done);
      break;
    case 47:
      setTimes(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::SetTimesRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::SetTimesResponseProto*>(response),
             done);
      break;
    case 48:
      createSymlink(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::CreateSymlinkRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::CreateSymlinkResponseProto*>(response),
             done);
      break;
    case 49:
      getLinkTarget(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetLinkTargetRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetLinkTargetResponseProto*>(response),
             done);
      break;
    case 50:
      updateBlockForPipeline(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::UpdateBlockForPipelineResponseProto*>(response),
             done);
      break;
    case 51:
      updatePipeline(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::UpdatePipelineRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::UpdatePipelineResponseProto*>(response),
             done);
      break;
    case 52:
      getDelegationToken(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetDelegationTokenRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetDelegationTokenResponseProto*>(response),
             done);
      break;
    case 53:
      renewDelegationToken(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RenewDelegationTokenRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RenewDelegationTokenResponseProto*>(response),
             done);
      break;
    case 54:
      cancelDelegationToken(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::CancelDelegationTokenRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::CancelDelegationTokenResponseProto*>(response),
             done);
      break;
    case 55:
      setBalancerBandwidth(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::SetBalancerBandwidthRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::SetBalancerBandwidthResponseProto*>(response),
             done);
      break;
    case 56:
      getDataEncryptionKey(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetDataEncryptionKeyResponseProto*>(response),
             done);
      break;
    case 57:
      createSnapshot(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::CreateSnapshotRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::CreateSnapshotResponseProto*>(response),
             done);
      break;
    case 58:
      renameSnapshot(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::RenameSnapshotRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::RenameSnapshotResponseProto*>(response),
             done);
      break;
    case 59:
      allowSnapshot(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::AllowSnapshotRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::AllowSnapshotResponseProto*>(response),
             done);
      break;
    case 60:
      disallowSnapshot(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::DisallowSnapshotRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::DisallowSnapshotResponseProto*>(response),
             done);
      break;
    case 61:
      getSnapshottableDirListing(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetSnapshottableDirListingResponseProto*>(response),
             done);
      break;
    case 62:
      deleteSnapshot(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::DeleteSnapshotRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::DeleteSnapshotResponseProto*>(response),
             done);
      break;
    case 63:
      getSnapshotDiffReport(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetSnapshotDiffReportResponseProto*>(response),
             done);
      break;
    case 64:
      isFileClosed(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::IsFileClosedRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::IsFileClosedResponseProto*>(response),
             done);
      break;
    case 65:
      createEncryptionZone(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::CreateEncryptionZoneRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::CreateEncryptionZoneResponseProto*>(response),
             done);
      break;
    case 66:
      listEncryptionZones(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::ListEncryptionZonesRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::ListEncryptionZonesResponseProto*>(response),
             done);
      break;
    case 67:
      getEZForPath(controller,
             ::google::protobuf::down_cast<const ::Hdfs::Internal::GetEZForPathRequestProto*>(request),
             ::google::protobuf::down_cast< ::Hdfs::Internal::GetEZForPathResponseProto*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& ClientNamenodeProtocol::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Hdfs::Internal::GetBlockLocationsRequestProto::default_instance();
    case 1:
      return ::Hdfs::Internal::GetServerDefaultsRequestProto::default_instance();
    case 2:
      return ::Hdfs::Internal::CreateRequestProto::default_instance();
    case 3:
      return ::Hdfs::Internal::AppendRequestProto::default_instance();
    case 4:
      return ::Hdfs::Internal::SetReplicationRequestProto::default_instance();
    case 5:
      return ::Hdfs::Internal::SetPermissionRequestProto::default_instance();
    case 6:
      return ::Hdfs::Internal::SetOwnerRequestProto::default_instance();
    case 7:
      return ::Hdfs::Internal::AbandonBlockRequestProto::default_instance();
    case 8:
      return ::Hdfs::Internal::AddBlockRequestProto::default_instance();
    case 9:
      return ::Hdfs::Internal::GetAdditionalDatanodeRequestProto::default_instance();
    case 10:
      return ::Hdfs::Internal::CompleteRequestProto::default_instance();
    case 11:
      return ::Hdfs::Internal::ReportBadBlocksRequestProto::default_instance();
    case 12:
      return ::Hdfs::Internal::ConcatRequestProto::default_instance();
    case 13:
      return ::Hdfs::Internal::TruncateRequestProto::default_instance();
    case 14:
      return ::Hdfs::Internal::GetLeaseRequestProto::default_instance();
    case 15:
      return ::Hdfs::Internal::ReleaseLeaseRequestProto::default_instance();
    case 16:
      return ::Hdfs::Internal::RenameRequestProto::default_instance();
    case 17:
      return ::Hdfs::Internal::Rename2RequestProto::default_instance();
    case 18:
      return ::Hdfs::Internal::DeleteRequestProto::default_instance();
    case 19:
      return ::Hdfs::Internal::MkdirsRequestProto::default_instance();
    case 20:
      return ::Hdfs::Internal::GetListingRequestProto::default_instance();
    case 21:
      return ::Hdfs::Internal::RenewLeaseRequestProto::default_instance();
    case 22:
      return ::Hdfs::Internal::RecoverLeaseRequestProto::default_instance();
    case 23:
      return ::Hdfs::Internal::GetFsStatusRequestProto::default_instance();
    case 24:
      return ::Hdfs::Internal::GetDatanodeReportRequestProto::default_instance();
    case 25:
      return ::Hdfs::Internal::GetPreferredBlockSizeRequestProto::default_instance();
    case 26:
      return ::Hdfs::Internal::SetSafeModeRequestProto::default_instance();
    case 27:
      return ::Hdfs::Internal::SaveNamespaceRequestProto::default_instance();
    case 28:
      return ::Hdfs::Internal::RollEditsRequestProto::default_instance();
    case 29:
      return ::Hdfs::Internal::RestoreFailedStorageRequestProto::default_instance();
    case 30:
      return ::Hdfs::Internal::RefreshNodesRequestProto::default_instance();
    case 31:
      return ::Hdfs::Internal::FinalizeUpgradeRequestProto::default_instance();
    case 32:
      return ::Hdfs::Internal::ListCorruptFileBlocksRequestProto::default_instance();
    case 33:
      return ::Hdfs::Internal::MetaSaveRequestProto::default_instance();
    case 34:
      return ::Hdfs::Internal::GetFileInfoRequestProto::default_instance();
    case 35:
      return ::Hdfs::Internal::AddCacheDirectiveRequestProto::default_instance();
    case 36:
      return ::Hdfs::Internal::ModifyCacheDirectiveRequestProto::default_instance();
    case 37:
      return ::Hdfs::Internal::RemoveCacheDirectiveRequestProto::default_instance();
    case 38:
      return ::Hdfs::Internal::ListCacheDirectivesRequestProto::default_instance();
    case 39:
      return ::Hdfs::Internal::AddCachePoolRequestProto::default_instance();
    case 40:
      return ::Hdfs::Internal::ModifyCachePoolRequestProto::default_instance();
    case 41:
      return ::Hdfs::Internal::RemoveCachePoolRequestProto::default_instance();
    case 42:
      return ::Hdfs::Internal::ListCachePoolsRequestProto::default_instance();
    case 43:
      return ::Hdfs::Internal::GetFileLinkInfoRequestProto::default_instance();
    case 44:
      return ::Hdfs::Internal::GetContentSummaryRequestProto::default_instance();
    case 45:
      return ::Hdfs::Internal::SetQuotaRequestProto::default_instance();
    case 46:
      return ::Hdfs::Internal::FsyncRequestProto::default_instance();
    case 47:
      return ::Hdfs::Internal::SetTimesRequestProto::default_instance();
    case 48:
      return ::Hdfs::Internal::CreateSymlinkRequestProto::default_instance();
    case 49:
      return ::Hdfs::Internal::GetLinkTargetRequestProto::default_instance();
    case 50:
      return ::Hdfs::Internal::UpdateBlockForPipelineRequestProto::default_instance();
    case 51:
      return ::Hdfs::Internal::UpdatePipelineRequestProto::default_instance();
    case 52:
      return ::Hdfs::Internal::GetDelegationTokenRequestProto::default_instance();
    case 53:
      return ::Hdfs::Internal::RenewDelegationTokenRequestProto::default_instance();
    case 54:
      return ::Hdfs::Internal::CancelDelegationTokenRequestProto::default_instance();
    case 55:
      return ::Hdfs::Internal::SetBalancerBandwidthRequestProto::default_instance();
    case 56:
      return ::Hdfs::Internal::GetDataEncryptionKeyRequestProto::default_instance();
    case 57:
      return ::Hdfs::Internal::CreateSnapshotRequestProto::default_instance();
    case 58:
      return ::Hdfs::Internal::RenameSnapshotRequestProto::default_instance();
    case 59:
      return ::Hdfs::Internal::AllowSnapshotRequestProto::default_instance();
    case 60:
      return ::Hdfs::Internal::DisallowSnapshotRequestProto::default_instance();
    case 61:
      return ::Hdfs::Internal::GetSnapshottableDirListingRequestProto::default_instance();
    case 62:
      return ::Hdfs::Internal::DeleteSnapshotRequestProto::default_instance();
    case 63:
      return ::Hdfs::Internal::GetSnapshotDiffReportRequestProto::default_instance();
    case 64:
      return ::Hdfs::Internal::IsFileClosedRequestProto::default_instance();
    case 65:
      return ::Hdfs::Internal::CreateEncryptionZoneRequestProto::default_instance();
    case 66:
      return ::Hdfs::Internal::ListEncryptionZonesRequestProto::default_instance();
    case 67:
      return ::Hdfs::Internal::GetEZForPathRequestProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& ClientNamenodeProtocol::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::Hdfs::Internal::GetBlockLocationsResponseProto::default_instance();
    case 1:
      return ::Hdfs::Internal::GetServerDefaultsResponseProto::default_instance();
    case 2:
      return ::Hdfs::Internal::CreateResponseProto::default_instance();
    case 3:
      return ::Hdfs::Internal::AppendResponseProto::default_instance();
    case 4:
      return ::Hdfs::Internal::SetReplicationResponseProto::default_instance();
    case 5:
      return ::Hdfs::Internal::SetPermissionResponseProto::default_instance();
    case 6:
      return ::Hdfs::Internal::SetOwnerResponseProto::default_instance();
    case 7:
      return ::Hdfs::Internal::AbandonBlockResponseProto::default_instance();
    case 8:
      return ::Hdfs::Internal::AddBlockResponseProto::default_instance();
    case 9:
      return ::Hdfs::Internal::GetAdditionalDatanodeResponseProto::default_instance();
    case 10:
      return ::Hdfs::Internal::CompleteResponseProto::default_instance();
    case 11:
      return ::Hdfs::Internal::ReportBadBlocksResponseProto::default_instance();
    case 12:
      return ::Hdfs::Internal::ConcatResponseProto::default_instance();
    case 13:
      return ::Hdfs::Internal::TruncateResponseProto::default_instance();
    case 14:
      return ::Hdfs::Internal::GetLeaseResponseProto::default_instance();
    case 15:
      return ::Hdfs::Internal::ReleaseLeaseResponseProto::default_instance();
    case 16:
      return ::Hdfs::Internal::RenameResponseProto::default_instance();
    case 17:
      return ::Hdfs::Internal::Rename2ResponseProto::default_instance();
    case 18:
      return ::Hdfs::Internal::DeleteResponseProto::default_instance();
    case 19:
      return ::Hdfs::Internal::MkdirsResponseProto::default_instance();
    case 20:
      return ::Hdfs::Internal::GetListingResponseProto::default_instance();
    case 21:
      return ::Hdfs::Internal::RenewLeaseResponseProto::default_instance();
    case 22:
      return ::Hdfs::Internal::RecoverLeaseResponseProto::default_instance();
    case 23:
      return ::Hdfs::Internal::GetFsStatsResponseProto::default_instance();
    case 24:
      return ::Hdfs::Internal::GetDatanodeReportResponseProto::default_instance();
    case 25:
      return ::Hdfs::Internal::GetPreferredBlockSizeResponseProto::default_instance();
    case 26:
      return ::Hdfs::Internal::SetSafeModeResponseProto::default_instance();
    case 27:
      return ::Hdfs::Internal::SaveNamespaceResponseProto::default_instance();
    case 28:
      return ::Hdfs::Internal::RollEditsResponseProto::default_instance();
    case 29:
      return ::Hdfs::Internal::RestoreFailedStorageResponseProto::default_instance();
    case 30:
      return ::Hdfs::Internal::RefreshNodesResponseProto::default_instance();
    case 31:
      return ::Hdfs::Internal::FinalizeUpgradeResponseProto::default_instance();
    case 32:
      return ::Hdfs::Internal::ListCorruptFileBlocksResponseProto::default_instance();
    case 33:
      return ::Hdfs::Internal::MetaSaveResponseProto::default_instance();
    case 34:
      return ::Hdfs::Internal::GetFileInfoResponseProto::default_instance();
    case 35:
      return ::Hdfs::Internal::AddCacheDirectiveResponseProto::default_instance();
    case 36:
      return ::Hdfs::Internal::ModifyCacheDirectiveResponseProto::default_instance();
    case 37:
      return ::Hdfs::Internal::RemoveCacheDirectiveResponseProto::default_instance();
    case 38:
      return ::Hdfs::Internal::ListCacheDirectivesResponseProto::default_instance();
    case 39:
      return ::Hdfs::Internal::AddCachePoolResponseProto::default_instance();
    case 40:
      return ::Hdfs::Internal::ModifyCachePoolResponseProto::default_instance();
    case 41:
      return ::Hdfs::Internal::RemoveCachePoolResponseProto::default_instance();
    case 42:
      return ::Hdfs::Internal::ListCachePoolsResponseProto::default_instance();
    case 43:
      return ::Hdfs::Internal::GetFileLinkInfoResponseProto::default_instance();
    case 44:
      return ::Hdfs::Internal::GetContentSummaryResponseProto::default_instance();
    case 45:
      return ::Hdfs::Internal::SetQuotaResponseProto::default_instance();
    case 46:
      return ::Hdfs::Internal::FsyncResponseProto::default_instance();
    case 47:
      return ::Hdfs::Internal::SetTimesResponseProto::default_instance();
    case 48:
      return ::Hdfs::Internal::CreateSymlinkResponseProto::default_instance();
    case 49:
      return ::Hdfs::Internal::GetLinkTargetResponseProto::default_instance();
    case 50:
      return ::Hdfs::Internal::UpdateBlockForPipelineResponseProto::default_instance();
    case 51:
      return ::Hdfs::Internal::UpdatePipelineResponseProto::default_instance();
    case 52:
      return ::Hdfs::Internal::GetDelegationTokenResponseProto::default_instance();
    case 53:
      return ::Hdfs::Internal::RenewDelegationTokenResponseProto::default_instance();
    case 54:
      return ::Hdfs::Internal::CancelDelegationTokenResponseProto::default_instance();
    case 55:
      return ::Hdfs::Internal::SetBalancerBandwidthResponseProto::default_instance();
    case 56:
      return ::Hdfs::Internal::GetDataEncryptionKeyResponseProto::default_instance();
    case 57:
      return ::Hdfs::Internal::CreateSnapshotResponseProto::default_instance();
    case 58:
      return ::Hdfs::Internal::RenameSnapshotResponseProto::default_instance();
    case 59:
      return ::Hdfs::Internal::AllowSnapshotResponseProto::default_instance();
    case 60:
      return ::Hdfs::Internal::DisallowSnapshotResponseProto::default_instance();
    case 61:
      return ::Hdfs::Internal::GetSnapshottableDirListingResponseProto::default_instance();
    case 62:
      return ::Hdfs::Internal::DeleteSnapshotResponseProto::default_instance();
    case 63:
      return ::Hdfs::Internal::GetSnapshotDiffReportResponseProto::default_instance();
    case 64:
      return ::Hdfs::Internal::IsFileClosedResponseProto::default_instance();
    case 65:
      return ::Hdfs::Internal::CreateEncryptionZoneResponseProto::default_instance();
    case 66:
      return ::Hdfs::Internal::ListEncryptionZonesResponseProto::default_instance();
    case 67:
      return ::Hdfs::Internal::GetEZForPathResponseProto::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

ClientNamenodeProtocol_Stub::ClientNamenodeProtocol_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
ClientNamenodeProtocol_Stub::ClientNamenodeProtocol_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
ClientNamenodeProtocol_Stub::~ClientNamenodeProtocol_Stub() {
  if (owns_channel_) delete channel_;
}

void ClientNamenodeProtocol_Stub::getBlockLocations(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetBlockLocationsRequestProto* request,
                              ::Hdfs::Internal::GetBlockLocationsResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getServerDefaults(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetServerDefaultsRequestProto* request,
                              ::Hdfs::Internal::GetServerDefaultsResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::create(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::CreateRequestProto* request,
                              ::Hdfs::Internal::CreateResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::append(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::AppendRequestProto* request,
                              ::Hdfs::Internal::AppendResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::setReplication(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::SetReplicationRequestProto* request,
                              ::Hdfs::Internal::SetReplicationResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::setPermission(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::SetPermissionRequestProto* request,
                              ::Hdfs::Internal::SetPermissionResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::setOwner(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::SetOwnerRequestProto* request,
                              ::Hdfs::Internal::SetOwnerResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::abandonBlock(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::AbandonBlockRequestProto* request,
                              ::Hdfs::Internal::AbandonBlockResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::addBlock(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::AddBlockRequestProto* request,
                              ::Hdfs::Internal::AddBlockResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getAdditionalDatanode(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetAdditionalDatanodeRequestProto* request,
                              ::Hdfs::Internal::GetAdditionalDatanodeResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::complete(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::CompleteRequestProto* request,
                              ::Hdfs::Internal::CompleteResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::reportBadBlocks(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::ReportBadBlocksRequestProto* request,
                              ::Hdfs::Internal::ReportBadBlocksResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::concat(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::ConcatRequestProto* request,
                              ::Hdfs::Internal::ConcatResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::truncate(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::TruncateRequestProto* request,
                              ::Hdfs::Internal::TruncateResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getLease(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetLeaseRequestProto* request,
                              ::Hdfs::Internal::GetLeaseResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::releaseLease(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::ReleaseLeaseRequestProto* request,
                              ::Hdfs::Internal::ReleaseLeaseResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::rename(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RenameRequestProto* request,
                              ::Hdfs::Internal::RenameResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::rename2(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::Rename2RequestProto* request,
                              ::Hdfs::Internal::Rename2ResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::deleteFile(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::DeleteRequestProto* request,
                              ::Hdfs::Internal::DeleteResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(18),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::mkdirs(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::MkdirsRequestProto* request,
                              ::Hdfs::Internal::MkdirsResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(19),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getListing(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetListingRequestProto* request,
                              ::Hdfs::Internal::GetListingResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(20),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::renewLease(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RenewLeaseRequestProto* request,
                              ::Hdfs::Internal::RenewLeaseResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(21),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::recoverLease(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RecoverLeaseRequestProto* request,
                              ::Hdfs::Internal::RecoverLeaseResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(22),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getFsStats(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetFsStatusRequestProto* request,
                              ::Hdfs::Internal::GetFsStatsResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(23),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getDatanodeReport(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetDatanodeReportRequestProto* request,
                              ::Hdfs::Internal::GetDatanodeReportResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(24),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getPreferredBlockSize(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetPreferredBlockSizeRequestProto* request,
                              ::Hdfs::Internal::GetPreferredBlockSizeResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(25),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::setSafeMode(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::SetSafeModeRequestProto* request,
                              ::Hdfs::Internal::SetSafeModeResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(26),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::saveNamespace(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::SaveNamespaceRequestProto* request,
                              ::Hdfs::Internal::SaveNamespaceResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(27),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::rollEdits(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RollEditsRequestProto* request,
                              ::Hdfs::Internal::RollEditsResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(28),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::restoreFailedStorage(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RestoreFailedStorageRequestProto* request,
                              ::Hdfs::Internal::RestoreFailedStorageResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(29),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::refreshNodes(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RefreshNodesRequestProto* request,
                              ::Hdfs::Internal::RefreshNodesResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(30),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::finalizeUpgrade(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::FinalizeUpgradeRequestProto* request,
                              ::Hdfs::Internal::FinalizeUpgradeResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(31),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::listCorruptFileBlocks(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::ListCorruptFileBlocksRequestProto* request,
                              ::Hdfs::Internal::ListCorruptFileBlocksResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(32),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::metaSave(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::MetaSaveRequestProto* request,
                              ::Hdfs::Internal::MetaSaveResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(33),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getFileInfo(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetFileInfoRequestProto* request,
                              ::Hdfs::Internal::GetFileInfoResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(34),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::addCacheDirective(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::AddCacheDirectiveRequestProto* request,
                              ::Hdfs::Internal::AddCacheDirectiveResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(35),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::modifyCacheDirective(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::ModifyCacheDirectiveRequestProto* request,
                              ::Hdfs::Internal::ModifyCacheDirectiveResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(36),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::removeCacheDirective(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RemoveCacheDirectiveRequestProto* request,
                              ::Hdfs::Internal::RemoveCacheDirectiveResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(37),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::listCacheDirectives(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::ListCacheDirectivesRequestProto* request,
                              ::Hdfs::Internal::ListCacheDirectivesResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(38),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::addCachePool(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::AddCachePoolRequestProto* request,
                              ::Hdfs::Internal::AddCachePoolResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(39),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::modifyCachePool(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::ModifyCachePoolRequestProto* request,
                              ::Hdfs::Internal::ModifyCachePoolResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(40),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::removeCachePool(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RemoveCachePoolRequestProto* request,
                              ::Hdfs::Internal::RemoveCachePoolResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(41),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::listCachePools(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::ListCachePoolsRequestProto* request,
                              ::Hdfs::Internal::ListCachePoolsResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(42),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getFileLinkInfo(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetFileLinkInfoRequestProto* request,
                              ::Hdfs::Internal::GetFileLinkInfoResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(43),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getContentSummary(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetContentSummaryRequestProto* request,
                              ::Hdfs::Internal::GetContentSummaryResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(44),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::setQuota(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::SetQuotaRequestProto* request,
                              ::Hdfs::Internal::SetQuotaResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(45),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::fsync(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::FsyncRequestProto* request,
                              ::Hdfs::Internal::FsyncResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(46),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::setTimes(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::SetTimesRequestProto* request,
                              ::Hdfs::Internal::SetTimesResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(47),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::createSymlink(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::CreateSymlinkRequestProto* request,
                              ::Hdfs::Internal::CreateSymlinkResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(48),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getLinkTarget(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetLinkTargetRequestProto* request,
                              ::Hdfs::Internal::GetLinkTargetResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(49),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::updateBlockForPipeline(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::UpdateBlockForPipelineRequestProto* request,
                              ::Hdfs::Internal::UpdateBlockForPipelineResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(50),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::updatePipeline(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::UpdatePipelineRequestProto* request,
                              ::Hdfs::Internal::UpdatePipelineResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(51),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getDelegationToken(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetDelegationTokenRequestProto* request,
                              ::Hdfs::Internal::GetDelegationTokenResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(52),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::renewDelegationToken(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RenewDelegationTokenRequestProto* request,
                              ::Hdfs::Internal::RenewDelegationTokenResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(53),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::cancelDelegationToken(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::CancelDelegationTokenRequestProto* request,
                              ::Hdfs::Internal::CancelDelegationTokenResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(54),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::setBalancerBandwidth(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::SetBalancerBandwidthRequestProto* request,
                              ::Hdfs::Internal::SetBalancerBandwidthResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(55),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getDataEncryptionKey(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetDataEncryptionKeyRequestProto* request,
                              ::Hdfs::Internal::GetDataEncryptionKeyResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(56),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::createSnapshot(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::CreateSnapshotRequestProto* request,
                              ::Hdfs::Internal::CreateSnapshotResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(57),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::renameSnapshot(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::RenameSnapshotRequestProto* request,
                              ::Hdfs::Internal::RenameSnapshotResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(58),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::allowSnapshot(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::AllowSnapshotRequestProto* request,
                              ::Hdfs::Internal::AllowSnapshotResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(59),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::disallowSnapshot(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::DisallowSnapshotRequestProto* request,
                              ::Hdfs::Internal::DisallowSnapshotResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(60),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getSnapshottableDirListing(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetSnapshottableDirListingRequestProto* request,
                              ::Hdfs::Internal::GetSnapshottableDirListingResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(61),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::deleteSnapshot(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::DeleteSnapshotRequestProto* request,
                              ::Hdfs::Internal::DeleteSnapshotResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(62),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getSnapshotDiffReport(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetSnapshotDiffReportRequestProto* request,
                              ::Hdfs::Internal::GetSnapshotDiffReportResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(63),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::isFileClosed(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::IsFileClosedRequestProto* request,
                              ::Hdfs::Internal::IsFileClosedResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(64),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::createEncryptionZone(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::CreateEncryptionZoneRequestProto* request,
                              ::Hdfs::Internal::CreateEncryptionZoneResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(65),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::listEncryptionZones(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::ListEncryptionZonesRequestProto* request,
                              ::Hdfs::Internal::ListEncryptionZonesResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(66),
                       controller, request, response, done);
}
void ClientNamenodeProtocol_Stub::getEZForPath(::google::protobuf::RpcController* controller,
                              const ::Hdfs::Internal::GetEZForPathRequestProto* request,
                              ::Hdfs::Internal::GetEZForPathResponseProto* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(67),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace Internal
}  // namespace Hdfs

// @@protoc_insertion_point(global_scope)
